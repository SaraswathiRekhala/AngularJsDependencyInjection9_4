/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.math.BigDecimal;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.IdClass;
import javax.persistence.Table;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonProperty.Access;

/**
 * AllExternalTypes generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`ALL EXTERNAL TYPES`")
@IdClass(AllExternalTypesId.class)
public class AllExternalTypes implements Serializable {

    private Integer serialType;
    private Long bigserialType;
    private Long bigintType;
    private Boolean bitType;
    private Boolean booleanType;
    @JsonProperty(access = Access.READ_ONLY)
    private byte[] byteaBlobType;
    private String charDoubleQuotes;
    private String characterType;
    private String characterVaryingType;
    private Date dateType;
    private Integer integerType;
    private BigDecimal numericType;
    private Short smallIntType;
    private String textType;
    private LocalDateTime timestampWithoutTimeZone;
    private Timestamp timestampWithTimeZone;
    private Time timeWithoutTimeZone;
    private Time timeWithTimeZone;
    private String uuidType;
    private BigDecimal doublePrecisionCol;

    @Id
    @Column(name = "`SERIAL TYPE `", nullable = false, scale = 0, precision = 10)
    public Integer getSerialType() {
        return this.serialType;
    }

    public void setSerialType(Integer serialType) {
        this.serialType = serialType;
    }

    @Id
    @Column(name = "`BIGSERIAL TYPE`", nullable = false, scale = 0, precision = 19)
    public Long getBigserialType() {
        return this.bigserialType;
    }

    public void setBigserialType(Long bigserialType) {
        this.bigserialType = bigserialType;
    }

    @Id
    @Column(name = "`BIGINT TYPE`", nullable = true, scale = 0, precision = 19)
    public Long getBigintType() {
        return this.bigintType;
    }

    public void setBigintType(Long bigintType) {
        this.bigintType = bigintType;
    }

    @Id
    @Column(name = "`BIT TYPE`", nullable = true)
    public Boolean getBitType() {
        return this.bitType;
    }

    public void setBitType(Boolean bitType) {
        this.bitType = bitType;
    }

    @Id
    @Column(name = "`BOOLEAN TYPE`", nullable = true)
    public Boolean getBooleanType() {
        return this.booleanType;
    }

    public void setBooleanType(Boolean booleanType) {
        this.booleanType = booleanType;
    }

    @Id
    @Column(name = "`BYTEA BLOB TYPE`", nullable = true)
    public byte[] getByteaBlobType() {
        return this.byteaBlobType;
    }

    public void setByteaBlobType(byte[] byteaBlobType) {
        this.byteaBlobType = byteaBlobType;
    }

    @Id
    @Column(name = "`CHAR DOUBLE QUOTES`", nullable = true, length = 1)
    public String getCharDoubleQuotes() {
        return this.charDoubleQuotes;
    }

    public void setCharDoubleQuotes(String charDoubleQuotes) {
        this.charDoubleQuotes = charDoubleQuotes;
    }

    @Id
    @Column(name = "`CHARACTER TYPE`", nullable = true, length = 1)
    public String getCharacterType() {
        return this.characterType;
    }

    public void setCharacterType(String characterType) {
        this.characterType = characterType;
    }

    @Id
    @Column(name = "`CHARACTER VARYING TYPE`", nullable = true, length = 255)
    public String getCharacterVaryingType() {
        return this.characterVaryingType;
    }

    public void setCharacterVaryingType(String characterVaryingType) {
        this.characterVaryingType = characterVaryingType;
    }

    @Id
    @Column(name = "`DATE TYPE`", nullable = true)
    public Date getDateType() {
        return this.dateType;
    }

    public void setDateType(Date dateType) {
        this.dateType = dateType;
    }

    @Id
    @Column(name = "`INTEGER TYPE`", nullable = true, scale = 0, precision = 10)
    public Integer getIntegerType() {
        return this.integerType;
    }

    public void setIntegerType(Integer integerType) {
        this.integerType = integerType;
    }

    @Id
    @Column(name = "`NUMERIC TYPE`", nullable = true, scale = 15, precision = 38)
    public BigDecimal getNumericType() {
        return this.numericType;
    }

    public void setNumericType(BigDecimal numericType) {
        this.numericType = numericType;
    }

    @Id
    @Column(name = "`SMALL INT TYPE`", nullable = true, scale = 0, precision = 5)
    public Short getSmallIntType() {
        return this.smallIntType;
    }

    public void setSmallIntType(Short smallIntType) {
        this.smallIntType = smallIntType;
    }

    @Id
    @Column(name = "`TEXT TYPE`", nullable = true, length = 2147483647)
    public String getTextType() {
        return this.textType;
    }

    public void setTextType(String textType) {
        this.textType = textType;
    }

    @Id
    @Column(name = "`TIMESTAMP WITHOUT TIME ZONE`", nullable = true)
    public LocalDateTime getTimestampWithoutTimeZone() {
        return this.timestampWithoutTimeZone;
    }

    public void setTimestampWithoutTimeZone(LocalDateTime timestampWithoutTimeZone) {
        this.timestampWithoutTimeZone = timestampWithoutTimeZone;
    }

    @Id
    @Column(name = "`TIMESTAMP WITH TIME ZONE`", nullable = true)
    public Timestamp getTimestampWithTimeZone() {
        return this.timestampWithTimeZone;
    }

    public void setTimestampWithTimeZone(Timestamp timestampWithTimeZone) {
        this.timestampWithTimeZone = timestampWithTimeZone;
    }

    @Id
    @Column(name = "`TIME WITHOUT TIME ZONE`", nullable = true)
    public Time getTimeWithoutTimeZone() {
        return this.timeWithoutTimeZone;
    }

    public void setTimeWithoutTimeZone(Time timeWithoutTimeZone) {
        this.timeWithoutTimeZone = timeWithoutTimeZone;
    }

    @Id
    @Column(name = "`TIME WITH TIME ZONE`", nullable = true)
    public Time getTimeWithTimeZone() {
        return this.timeWithTimeZone;
    }

    public void setTimeWithTimeZone(Time timeWithTimeZone) {
        this.timeWithTimeZone = timeWithTimeZone;
    }

    @Id
    @Column(name = "`UUID TYPE`", nullable = true, length = 32)
    public String getUuidType() {
        return this.uuidType;
    }

    public void setUuidType(String uuidType) {
        this.uuidType = uuidType;
    }

    @Id
    @Column(name = "`DOUBLE PRECISION COL`", nullable = true, scale = 17, precision = 17)
    public BigDecimal getDoublePrecisionCol() {
        return this.doublePrecisionCol;
    }

    public void setDoublePrecisionCol(BigDecimal doublePrecisionCol) {
        this.doublePrecisionCol = doublePrecisionCol;
    }



    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof AllExternalTypes)) return false;
        final AllExternalTypes allExternalTypes = (AllExternalTypes) o;
        return Objects.equals(getSerialType(), allExternalTypes.getSerialType()) &&
                Objects.equals(getBigserialType(), allExternalTypes.getBigserialType()) &&
                Objects.equals(getBigintType(), allExternalTypes.getBigintType()) &&
                Objects.equals(getBitType(), allExternalTypes.getBitType()) &&
                Objects.equals(getBooleanType(), allExternalTypes.getBooleanType()) &&
                Objects.equals(getByteaBlobType(), allExternalTypes.getByteaBlobType()) &&
                Objects.equals(getCharDoubleQuotes(), allExternalTypes.getCharDoubleQuotes()) &&
                Objects.equals(getCharacterType(), allExternalTypes.getCharacterType()) &&
                Objects.equals(getCharacterVaryingType(), allExternalTypes.getCharacterVaryingType()) &&
                Objects.equals(getDateType(), allExternalTypes.getDateType()) &&
                Objects.equals(getIntegerType(), allExternalTypes.getIntegerType()) &&
                Objects.equals(getNumericType(), allExternalTypes.getNumericType()) &&
                Objects.equals(getSmallIntType(), allExternalTypes.getSmallIntType()) &&
                Objects.equals(getTextType(), allExternalTypes.getTextType()) &&
                Objects.equals(getTimestampWithoutTimeZone(), allExternalTypes.getTimestampWithoutTimeZone()) &&
                Objects.equals(getTimestampWithTimeZone(), allExternalTypes.getTimestampWithTimeZone()) &&
                Objects.equals(getTimeWithoutTimeZone(), allExternalTypes.getTimeWithoutTimeZone()) &&
                Objects.equals(getTimeWithTimeZone(), allExternalTypes.getTimeWithTimeZone()) &&
                Objects.equals(getUuidType(), allExternalTypes.getUuidType()) &&
                Objects.equals(getDoublePrecisionCol(), allExternalTypes.getDoublePrecisionCol());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getSerialType(),
                getBigserialType(),
                getBigintType(),
                getBitType(),
                getBooleanType(),
                getByteaBlobType(),
                getCharDoubleQuotes(),
                getCharacterType(),
                getCharacterVaryingType(),
                getDateType(),
                getIntegerType(),
                getNumericType(),
                getSmallIntType(),
                getTextType(),
                getTimestampWithoutTimeZone(),
                getTimestampWithTimeZone(),
                getTimeWithoutTimeZone(),
                getTimeWithTimeZone(),
                getUuidType(),
                getDoublePrecisionCol());
    }
}