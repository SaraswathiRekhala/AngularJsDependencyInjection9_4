/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.math.BigDecimal;
import java.sql.Date;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * TCrMany2one4 generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`T-CR-MANY2ONE4`")
public class TCrMany2one4 implements Serializable {

    private Date dateId;
    private Short shortId;
    private String stringId;
    private BigDecimal bigdecId;
    private BigDecimal doubleId;
    private Boolean booleanCol;
    private TCrMany2one3 tcrMany2one3;

    @Id
    @Column(name = "`DATE-ID`", nullable = false)
    public Date getDateId() {
        return this.dateId;
    }

    public void setDateId(Date dateId) {
        this.dateId = dateId;
    }

    @Column(name = "`SHORT-ID`", nullable = true, scale = 0, precision = 5)
    public Short getShortId() {
        return this.shortId;
    }

    public void setShortId(Short shortId) {
        this.shortId = shortId;
    }

    @Column(name = "`STRING-ID`", nullable = true, length = 255)
    public String getStringId() {
        return this.stringId;
    }

    public void setStringId(String stringId) {
        this.stringId = stringId;
    }

    @Column(name = "`BIGDEC-ID`", nullable = false, scale = 15, precision = 35)
    public BigDecimal getBigdecId() {
        return this.bigdecId;
    }

    public void setBigdecId(BigDecimal bigdecId) {
        this.bigdecId = bigdecId;
    }

    @Column(name = "`DOUBLE-ID`", nullable = false, scale = 8, precision = 18)
    public BigDecimal getDoubleId() {
        return this.doubleId;
    }

    public void setDoubleId(BigDecimal doubleId) {
        this.doubleId = doubleId;
    }

    @Column(name = "`BOOLEAN-COL`", nullable = true)
    public Boolean getBooleanCol() {
        return this.booleanCol;
    }

    public void setBooleanCol(Boolean booleanCol) {
        this.booleanCol = booleanCol;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumns(value = {
            @JoinColumn(name = "`SHORT-ID`", referencedColumnName = "`SHORT-ID`", insertable = false, updatable = false),
            @JoinColumn(name = "`STRING-ID`", referencedColumnName = "`STRING-COL`", insertable = false, updatable = false),
            @JoinColumn(name = "`BIGDEC-ID`", referencedColumnName = "`BIGDEC-COL`", insertable = false, updatable = false),
            @JoinColumn(name = "`DOUBLE-ID`", referencedColumnName = "`DOUBLE-COL`", insertable = false, updatable = false)},
        foreignKey = @ForeignKey(name = "`FK_T-CR-MANY2ONE4_TO_T-CxvVc9`"))
    @Fetch(FetchMode.JOIN)
    public TCrMany2one3 getTcrMany2one3() {
        return this.tcrMany2one3;
    }

    public void setTcrMany2one3(TCrMany2one3 tcrMany2one3) {
        if(tcrMany2one3 != null) {
            this.shortId = tcrMany2one3.getShortId();
            this.stringId = tcrMany2one3.getStringCol();
            this.bigdecId = tcrMany2one3.getBigdecCol();
            this.doubleId = tcrMany2one3.getDoubleCol();
        }

        this.tcrMany2one3 = tcrMany2one3;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof TCrMany2one4)) return false;
        final TCrMany2one4 tcrMany2one4 = (TCrMany2one4) o;
        return Objects.equals(getDateId(), tcrMany2one4.getDateId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getDateId());
    }
}