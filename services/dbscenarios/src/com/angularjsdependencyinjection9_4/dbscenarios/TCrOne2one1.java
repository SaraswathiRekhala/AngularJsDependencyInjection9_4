/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.math.BigDecimal;
import java.sql.Date;
import java.sql.Time;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.Id;
import javax.persistence.IdClass;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * TCrOne2one1 generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`T_CR_ONE2ONE1`", uniqueConstraints = {
            @UniqueConstraint(name = "`UK_T_CR_ONE2ONE1_TIME-COL`", columnNames = {"`TIME-COL`"})})
@IdClass(TCrOne2one1Id.class)
public class TCrOne2one1 implements Serializable {

    private BigDecimal intId;
    private String stringCol;
    private Integer bigdecCol;
    private String charCol;
    private Date dateCol;
    private Time timeCol;
    private TCrOne2one2 tcrOne2one2;

    @Id
    @Column(name = "`INT-ID`", nullable = false, scale = 0, precision = 10)
    public BigDecimal getIntId() {
        return this.intId;
    }

    public void setIntId(BigDecimal intId) {
        this.intId = intId;
    }

    @Id
    @Column(name = "`STRING COL`", nullable = false, length = 255)
    public String getStringCol() {
        return this.stringCol;
    }

    public void setStringCol(String stringCol) {
        this.stringCol = stringCol;
    }

    @Id
    @Column(name = "`BIGDEC COL`", nullable = false, scale = 15, precision = 35)
    public Integer getBigdecCol() {
        return this.bigdecCol;
    }

    public void setBigdecCol(Integer bigdecCol) {
        this.bigdecCol = bigdecCol;
    }

    @Column(name = "`CHAR COL`", nullable = false, length = 1)
    public String getCharCol() {
        return this.charCol;
    }

    public void setCharCol(String charCol) {
        this.charCol = charCol;
    }

    @Column(name = "`DATE COL`", nullable = true)
    public Date getDateCol() {
        return this.dateCol;
    }

    public void setDateCol(Date dateCol) {
        this.dateCol = dateCol;
    }

    @Column(name = "`TIME-COL`", nullable = true)
    public Time getTimeCol() {
        return this.timeCol;
    }

    public void setTimeCol(Time timeCol) {
        this.timeCol = timeCol;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumns(value = {
            @JoinColumn(name = "`BIGDEC COL`", referencedColumnName = "`INT-ID`", insertable = false, updatable = false),
            @JoinColumn(name = "`STRING COL`", referencedColumnName = "`CHAR-COL`", insertable = false, updatable = false),
            @JoinColumn(name = "`INT-ID`", referencedColumnName = "`BIGDEC-COL`", insertable = false, updatable = false),
            @JoinColumn(name = "`CHAR COL`", referencedColumnName = "`STRING-COL`", insertable = false, updatable = false)},
        foreignKey = @ForeignKey(name = "`FK_T_CR_ONE2ONE1_TO_T_CRnV6EW`"))
    @Fetch(FetchMode.JOIN)
    public TCrOne2one2 getTcrOne2one2() {
        return this.tcrOne2one2;
    }

    public void setTcrOne2one2(TCrOne2one2 tcrOne2one2) {
        if(tcrOne2one2 != null) {
            this.bigdecCol = tcrOne2one2.getIntId();
            this.stringCol = tcrOne2one2.getCharCol();
            this.intId = tcrOne2one2.getBigdecCol();
            this.charCol = tcrOne2one2.getStringCol();
        }

        this.tcrOne2one2 = tcrOne2one2;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof TCrOne2one1)) return false;
        final TCrOne2one1 tcrOne2one1 = (TCrOne2one1) o;
        return Objects.equals(getIntId(), tcrOne2one1.getIntId()) &&
                Objects.equals(getStringCol(), tcrOne2one1.getStringCol()) &&
                Objects.equals(getBigdecCol(), tcrOne2one1.getBigdecCol());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getIntId(),
                getStringCol(),
                getBigdecCol());
    }
}