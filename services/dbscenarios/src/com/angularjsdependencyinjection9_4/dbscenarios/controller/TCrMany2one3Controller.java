/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigDecimal;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.angularjsdependencyinjection9_4.dbscenarios.TCrMany2one3;
import com.angularjsdependencyinjection9_4.dbscenarios.TCrMany2one3Id;
import com.angularjsdependencyinjection9_4.dbscenarios.TCrMany2one4;
import com.angularjsdependencyinjection9_4.dbscenarios.service.TCrMany2one3Service;


/**
 * Controller object for domain model class TCrMany2one3.
 * @see TCrMany2one3
 */
@RestController("dbscenarios.TCrMany2one3Controller")
@Api(value = "TCrMany2one3Controller", description = "Exposes APIs to work with TCrMany2one3 resource.")
@RequestMapping("/dbscenarios/TCrMany2one3")
public class TCrMany2one3Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(TCrMany2one3Controller.class);

    @Autowired
	@Qualifier("dbscenarios.TCrMany2one3Service")
	private TCrMany2one3Service tCrMany2one3Service;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TCrMany2one3 instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TCrMany2one3 createTCrMany2one3(@RequestBody TCrMany2one3 tcrMany2one3) {
		LOGGER.debug("Create TCrMany2one3 with information: {}" , tcrMany2one3);

		tcrMany2one3 = tCrMany2one3Service.create(tcrMany2one3);
		LOGGER.debug("Created TCrMany2one3 with information: {}" , tcrMany2one3);

	    return tcrMany2one3;
	}

    @ApiOperation(value = "Returns the TCrMany2one3 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TCrMany2one3 getTCrMany2one3(@RequestParam("doubleCol") BigDecimal doubleCol, @RequestParam("shortId") Short shortId, @RequestParam("stringCol") String stringCol, @RequestParam("bigdecCol") BigDecimal bigdecCol) {

        TCrMany2one3Id tcrmany2one3Id = new TCrMany2one3Id();
        tcrmany2one3Id.setDoubleCol(doubleCol);
        tcrmany2one3Id.setShortId(shortId);
        tcrmany2one3Id.setStringCol(stringCol);
        tcrmany2one3Id.setBigdecCol(bigdecCol);

        LOGGER.debug("Getting TCrMany2one3 with id: {}" , tcrmany2one3Id);
        TCrMany2one3 tcrMany2one3 = tCrMany2one3Service.getById(tcrmany2one3Id);
        LOGGER.debug("TCrMany2one3 details with id: {}" , tcrMany2one3);

        return tcrMany2one3;
    }



    @ApiOperation(value = "Updates the TCrMany2one3 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TCrMany2one3 editTCrMany2one3(@RequestParam("doubleCol") BigDecimal doubleCol, @RequestParam("shortId") Short shortId, @RequestParam("stringCol") String stringCol, @RequestParam("bigdecCol") BigDecimal bigdecCol, @RequestBody TCrMany2one3 tcrMany2one3) {

        tcrMany2one3.setDoubleCol(doubleCol);
        tcrMany2one3.setShortId(shortId);
        tcrMany2one3.setStringCol(stringCol);
        tcrMany2one3.setBigdecCol(bigdecCol);

        LOGGER.debug("TCrMany2one3 details with id is updated with: {}" , tcrMany2one3);

        return tCrMany2one3Service.update(tcrMany2one3);
    }


    @ApiOperation(value = "Deletes the TCrMany2one3 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTCrMany2one3(@RequestParam("doubleCol") BigDecimal doubleCol, @RequestParam("shortId") Short shortId, @RequestParam("stringCol") String stringCol, @RequestParam("bigdecCol") BigDecimal bigdecCol) {

        TCrMany2one3Id tcrmany2one3Id = new TCrMany2one3Id();
        tcrmany2one3Id.setDoubleCol(doubleCol);
        tcrmany2one3Id.setShortId(shortId);
        tcrmany2one3Id.setStringCol(stringCol);
        tcrmany2one3Id.setBigdecCol(bigdecCol);

        LOGGER.debug("Deleting TCrMany2one3 with id: {}" , tcrmany2one3Id);
        TCrMany2one3 tcrMany2one3 = tCrMany2one3Service.delete(tcrmany2one3Id);

        return tcrMany2one3 != null;
    }


    /**
     * @deprecated Use {@link #findTCrMany2one3s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TCrMany2one3 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TCrMany2one3> searchTCrMany2one3sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TCrMany2one3s list by query filter:{}", (Object) queryFilters);
        return tCrMany2one3Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TCrMany2one3 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TCrMany2one3> findTCrMany2one3s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TCrMany2one3s list by filter:", query);
        return tCrMany2one3Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TCrMany2one3 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TCrMany2one3> filterTCrMany2one3s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TCrMany2one3s list by filter", query);
        return tCrMany2one3Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTCrMany2one3s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tCrMany2one3Service.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTCrMany2one3sAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TCrMany2one3.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tCrMany2one3Service.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TCrMany2one3 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTCrMany2one3s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TCrMany2one3s");
		return tCrMany2one3Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTCrMany2one3AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tCrMany2one3Service.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/composite-id/tcrMany2one4s", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the tcrMany2one4s instance associated with the given composite-id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TCrMany2one4> findAssociatedTcrMany2one4s(@RequestParam("doubleCol") BigDecimal doubleCol, @RequestParam("shortId") Short shortId, @RequestParam("stringCol") String stringCol, @RequestParam("bigdecCol") BigDecimal bigdecCol, Pageable pageable) {

        LOGGER.debug("Fetching all associated tcrMany2one4s");
        return tCrMany2one3Service.findAssociatedTcrMany2one4s(doubleCol, shortId, stringCol, bigdecCol, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TCrMany2one3Service instance
	 */
	protected void setTCrMany2one3Service(TCrMany2one3Service service) {
		this.tCrMany2one3Service = service;
	}

}