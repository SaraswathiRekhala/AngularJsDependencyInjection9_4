/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigDecimal;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.angularjsdependencyinjection9_4.dbscenarios.AllExternalTypes;
import com.angularjsdependencyinjection9_4.dbscenarios.AllExternalTypesId;
import com.angularjsdependencyinjection9_4.dbscenarios.service.AllExternalTypesService;


/**
 * Controller object for domain model class AllExternalTypes.
 * @see AllExternalTypes
 */
@RestController("dbscenarios.AllExternalTypesController")
@Api(value = "AllExternalTypesController", description = "Exposes APIs to work with AllExternalTypes resource.")
@RequestMapping("/dbscenarios/AllExternalTypes")
public class AllExternalTypesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AllExternalTypesController.class);

    @Autowired
	@Qualifier("dbscenarios.AllExternalTypesService")
	private AllExternalTypesService allExternalTypesService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new AllExternalTypes instance.")
    @RequestMapping(method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AllExternalTypes createAllExternalTypes(@RequestPart("wm_data_json") AllExternalTypes allExternalTypes, @RequestPart(value = "byteaBlobType", required = false) MultipartFile _byteaBlobType) {
		LOGGER.debug("Create AllExternalTypes with information: {}" , allExternalTypes);

    allExternalTypes.setByteaBlobType(WMMultipartUtils.toByteArray(_byteaBlobType));
		allExternalTypes = allExternalTypesService.create(allExternalTypes);
		LOGGER.debug("Created AllExternalTypes with information: {}" , allExternalTypes);

	    return allExternalTypes;
	}

    @ApiOperation(value = "Returns the AllExternalTypes instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AllExternalTypes getAllExternalTypes(@RequestParam("serialType") Integer serialType, @RequestParam("bigserialType") Long bigserialType, @RequestParam("bigintType") Long bigintType, @RequestParam("bitType") Boolean bitType, @RequestParam("booleanType") Boolean booleanType, @RequestParam("byteaBlobType") byte[] byteaBlobType, @RequestParam("charDoubleQuotes") String charDoubleQuotes, @RequestParam("characterType") String characterType, @RequestParam("characterVaryingType") String characterVaryingType, @RequestParam("dateType") Date dateType, @RequestParam("integerType") Integer integerType, @RequestParam("numericType") BigDecimal numericType, @RequestParam("smallIntType") Short smallIntType, @RequestParam("textType") String textType, @RequestParam("timestampWithoutTimeZone") LocalDateTime timestampWithoutTimeZone, @RequestParam("timestampWithTimeZone") Timestamp timestampWithTimeZone, @RequestParam("timeWithoutTimeZone") Time timeWithoutTimeZone, @RequestParam("timeWithTimeZone") Time timeWithTimeZone, @RequestParam("uuidType") String uuidType, @RequestParam("doublePrecisionCol") BigDecimal doublePrecisionCol) {

        AllExternalTypesId allexternaltypesId = new AllExternalTypesId();
        allexternaltypesId.setSerialType(serialType);
        allexternaltypesId.setBigserialType(bigserialType);
        allexternaltypesId.setBigintType(bigintType);
        allexternaltypesId.setBitType(bitType);
        allexternaltypesId.setBooleanType(booleanType);
        allexternaltypesId.setByteaBlobType(byteaBlobType);
        allexternaltypesId.setCharDoubleQuotes(charDoubleQuotes);
        allexternaltypesId.setCharacterType(characterType);
        allexternaltypesId.setCharacterVaryingType(characterVaryingType);
        allexternaltypesId.setDateType(dateType);
        allexternaltypesId.setIntegerType(integerType);
        allexternaltypesId.setNumericType(numericType);
        allexternaltypesId.setSmallIntType(smallIntType);
        allexternaltypesId.setTextType(textType);
        allexternaltypesId.setTimestampWithoutTimeZone(timestampWithoutTimeZone);
        allexternaltypesId.setTimestampWithTimeZone(timestampWithTimeZone);
        allexternaltypesId.setTimeWithoutTimeZone(timeWithoutTimeZone);
        allexternaltypesId.setTimeWithTimeZone(timeWithTimeZone);
        allexternaltypesId.setUuidType(uuidType);
        allexternaltypesId.setDoublePrecisionCol(doublePrecisionCol);

        LOGGER.debug("Getting AllExternalTypes with id: {}" , allexternaltypesId);
        AllExternalTypes allExternalTypes = allExternalTypesService.getById(allexternaltypesId);
        LOGGER.debug("AllExternalTypes details with id: {}" , allExternalTypes);

        return allExternalTypes;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in AllExternalTypes instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id/content/{fieldName}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public void getAllExternalTypesBLOBContent(@RequestParam("serialType") Integer serialType, @RequestParam("bigserialType") Long bigserialType, @RequestParam("bigintType") Long bigintType, @RequestParam("bitType") Boolean bitType, @RequestParam("booleanType") Boolean booleanType, @RequestParam("byteaBlobType") byte[] byteaBlobType, @RequestParam("charDoubleQuotes") String charDoubleQuotes, @RequestParam("characterType") String characterType, @RequestParam("characterVaryingType") String characterVaryingType, @RequestParam("dateType") Date dateType, @RequestParam("integerType") Integer integerType, @RequestParam("numericType") BigDecimal numericType, @RequestParam("smallIntType") Short smallIntType, @RequestParam("textType") String textType, @RequestParam("timestampWithoutTimeZone") LocalDateTime timestampWithoutTimeZone, @RequestParam("timestampWithTimeZone") Timestamp timestampWithTimeZone, @RequestParam("timeWithoutTimeZone") Time timeWithoutTimeZone, @RequestParam("timeWithTimeZone") Time timeWithTimeZone, @RequestParam("uuidType") String uuidType, @RequestParam("doublePrecisionCol") BigDecimal doublePrecisionCol, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) {

        LOGGER.debug("Retrieves content for the given BLOB field {} in AllExternalTypes instance" , fieldName);

        if(!WMRuntimeUtils.isLob(AllExternalTypes.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName +  " is not a valid BLOB type");
        }

        AllExternalTypesId allexternaltypesId = new AllExternalTypesId();
        allexternaltypesId.setSerialType(serialType);
        allexternaltypesId.setBigserialType(bigserialType);
        allexternaltypesId.setBigintType(bigintType);
        allexternaltypesId.setBitType(bitType);
        allexternaltypesId.setBooleanType(booleanType);
        allexternaltypesId.setByteaBlobType(byteaBlobType);
        allexternaltypesId.setCharDoubleQuotes(charDoubleQuotes);
        allexternaltypesId.setCharacterType(characterType);
        allexternaltypesId.setCharacterVaryingType(characterVaryingType);
        allexternaltypesId.setDateType(dateType);
        allexternaltypesId.setIntegerType(integerType);
        allexternaltypesId.setNumericType(numericType);
        allexternaltypesId.setSmallIntType(smallIntType);
        allexternaltypesId.setTextType(textType);
        allexternaltypesId.setTimestampWithoutTimeZone(timestampWithoutTimeZone);
        allexternaltypesId.setTimestampWithTimeZone(timestampWithTimeZone);
        allexternaltypesId.setTimeWithoutTimeZone(timeWithoutTimeZone);
        allexternaltypesId.setTimeWithTimeZone(timeWithTimeZone);
        allexternaltypesId.setUuidType(uuidType);
        allexternaltypesId.setDoublePrecisionCol(doublePrecisionCol);

        AllExternalTypes allExternalTypes = allExternalTypesService.getById(allexternaltypesId);
        WMMultipartUtils.buildHttpResponseForBlob(allExternalTypes, fieldName, httpServletRequest, httpServletResponse);
    }



    @ApiOperation(value = "Updates the AllExternalTypes instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AllExternalTypes editAllExternalTypes(@RequestParam("serialType") Integer serialType, @RequestParam("bigserialType") Long bigserialType, @RequestParam("bigintType") Long bigintType, @RequestParam("bitType") Boolean bitType, @RequestParam("booleanType") Boolean booleanType, @RequestParam("byteaBlobType") byte[] byteaBlobType, @RequestParam("charDoubleQuotes") String charDoubleQuotes, @RequestParam("characterType") String characterType, @RequestParam("characterVaryingType") String characterVaryingType, @RequestParam("dateType") Date dateType, @RequestParam("integerType") Integer integerType, @RequestParam("numericType") BigDecimal numericType, @RequestParam("smallIntType") Short smallIntType, @RequestParam("textType") String textType, @RequestParam("timestampWithoutTimeZone") LocalDateTime timestampWithoutTimeZone, @RequestParam("timestampWithTimeZone") Timestamp timestampWithTimeZone, @RequestParam("timeWithoutTimeZone") Time timeWithoutTimeZone, @RequestParam("timeWithTimeZone") Time timeWithTimeZone, @RequestParam("uuidType") String uuidType, @RequestParam("doublePrecisionCol") BigDecimal doublePrecisionCol, @RequestBody AllExternalTypes allExternalTypes) {

        allExternalTypes.setSerialType(serialType);
        allExternalTypes.setBigserialType(bigserialType);
        allExternalTypes.setBigintType(bigintType);
        allExternalTypes.setBitType(bitType);
        allExternalTypes.setBooleanType(booleanType);
        allExternalTypes.setByteaBlobType(byteaBlobType);
        allExternalTypes.setCharDoubleQuotes(charDoubleQuotes);
        allExternalTypes.setCharacterType(characterType);
        allExternalTypes.setCharacterVaryingType(characterVaryingType);
        allExternalTypes.setDateType(dateType);
        allExternalTypes.setIntegerType(integerType);
        allExternalTypes.setNumericType(numericType);
        allExternalTypes.setSmallIntType(smallIntType);
        allExternalTypes.setTextType(textType);
        allExternalTypes.setTimestampWithoutTimeZone(timestampWithoutTimeZone);
        allExternalTypes.setTimestampWithTimeZone(timestampWithTimeZone);
        allExternalTypes.setTimeWithoutTimeZone(timeWithoutTimeZone);
        allExternalTypes.setTimeWithTimeZone(timeWithTimeZone);
        allExternalTypes.setUuidType(uuidType);
        allExternalTypes.setDoublePrecisionCol(doublePrecisionCol);

        LOGGER.debug("AllExternalTypes details with id is updated with: {}" , allExternalTypes);

        return allExternalTypesService.update(allExternalTypes);
    }

    @ApiOperation(value = "Updates the AllExternalTypes instance associated with the given composite-id.This API should be used when AllExternalTypes instance fields that require multipart data.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AllExternalTypes editAllExternalTypes(@RequestParam("serialType") Integer serialType, @RequestParam("bigserialType") Long bigserialType, @RequestParam("bigintType") Long bigintType, @RequestParam("bitType") Boolean bitType, @RequestParam("booleanType") Boolean booleanType, @RequestParam("byteaBlobType") byte[] byteaBlobType, @RequestParam("charDoubleQuotes") String charDoubleQuotes, @RequestParam("characterType") String characterType, @RequestParam("characterVaryingType") String characterVaryingType, @RequestParam("dateType") Date dateType, @RequestParam("integerType") Integer integerType, @RequestParam("numericType") BigDecimal numericType, @RequestParam("smallIntType") Short smallIntType, @RequestParam("textType") String textType, @RequestParam("timestampWithoutTimeZone") LocalDateTime timestampWithoutTimeZone, @RequestParam("timestampWithTimeZone") Timestamp timestampWithTimeZone, @RequestParam("timeWithoutTimeZone") Time timeWithoutTimeZone, @RequestParam("timeWithTimeZone") Time timeWithTimeZone, @RequestParam("uuidType") String uuidType, @RequestParam("doublePrecisionCol") BigDecimal doublePrecisionCol, MultipartHttpServletRequest multipartHttpServletRequest) {
        return this.editAllExternalTypesAndMultiparts(serialType, bigserialType, bigintType, bitType, booleanType, byteaBlobType, charDoubleQuotes, characterType, characterVaryingType, dateType, integerType, numericType, smallIntType, textType, timestampWithoutTimeZone, timestampWithTimeZone, timeWithoutTimeZone, timeWithTimeZone, uuidType, doublePrecisionCol, multipartHttpServletRequest);
    }

    @ApiOperation(value = "Updates the AllExternalTypes instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT,  consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AllExternalTypes editAllExternalTypesAndMultiparts(@RequestParam("serialType") Integer serialType, @RequestParam("bigserialType") Long bigserialType, @RequestParam("bigintType") Long bigintType, @RequestParam("bitType") Boolean bitType, @RequestParam("booleanType") Boolean booleanType, @RequestParam("byteaBlobType") byte[] byteaBlobType, @RequestParam("charDoubleQuotes") String charDoubleQuotes, @RequestParam("characterType") String characterType, @RequestParam("characterVaryingType") String characterVaryingType, @RequestParam("dateType") Date dateType, @RequestParam("integerType") Integer integerType, @RequestParam("numericType") BigDecimal numericType, @RequestParam("smallIntType") Short smallIntType, @RequestParam("textType") String textType, @RequestParam("timestampWithoutTimeZone") LocalDateTime timestampWithoutTimeZone, @RequestParam("timestampWithTimeZone") Timestamp timestampWithTimeZone, @RequestParam("timeWithoutTimeZone") Time timeWithoutTimeZone, @RequestParam("timeWithTimeZone") Time timeWithTimeZone, @RequestParam("uuidType") String uuidType, @RequestParam("doublePrecisionCol") BigDecimal doublePrecisionCol, MultipartHttpServletRequest multipartHttpServletRequest) { 

        AllExternalTypesId allexternaltypesId = new AllExternalTypesId();
        allexternaltypesId.setSerialType(serialType);
        allexternaltypesId.setBigserialType(bigserialType);
        allexternaltypesId.setBigintType(bigintType);
        allexternaltypesId.setBitType(bitType);
        allexternaltypesId.setBooleanType(booleanType);
        allexternaltypesId.setByteaBlobType(byteaBlobType);
        allexternaltypesId.setCharDoubleQuotes(charDoubleQuotes);
        allexternaltypesId.setCharacterType(characterType);
        allexternaltypesId.setCharacterVaryingType(characterVaryingType);
        allexternaltypesId.setDateType(dateType);
        allexternaltypesId.setIntegerType(integerType);
        allexternaltypesId.setNumericType(numericType);
        allexternaltypesId.setSmallIntType(smallIntType);
        allexternaltypesId.setTextType(textType);
        allexternaltypesId.setTimestampWithoutTimeZone(timestampWithoutTimeZone);
        allexternaltypesId.setTimestampWithTimeZone(timestampWithTimeZone);
        allexternaltypesId.setTimeWithoutTimeZone(timeWithoutTimeZone);
        allexternaltypesId.setTimeWithTimeZone(timeWithTimeZone);
        allexternaltypesId.setUuidType(uuidType);
        allexternaltypesId.setDoublePrecisionCol(doublePrecisionCol);

        AllExternalTypes newAllExternalTypes = WMMultipartUtils.toObject(multipartHttpServletRequest, AllExternalTypes.class, "dbscenarios");
        AllExternalTypes oldAllExternalTypes = allExternalTypesService.getById(allexternaltypesId);

        WMMultipartUtils.updateLobsContent(oldAllExternalTypes, newAllExternalTypes);

        newAllExternalTypes.setSerialType(serialType);
        newAllExternalTypes.setBigserialType(bigserialType);
        newAllExternalTypes.setBigintType(bigintType);
        newAllExternalTypes.setBitType(bitType);
        newAllExternalTypes.setBooleanType(booleanType);
        newAllExternalTypes.setByteaBlobType(byteaBlobType);
        newAllExternalTypes.setCharDoubleQuotes(charDoubleQuotes);
        newAllExternalTypes.setCharacterType(characterType);
        newAllExternalTypes.setCharacterVaryingType(characterVaryingType);
        newAllExternalTypes.setDateType(dateType);
        newAllExternalTypes.setIntegerType(integerType);
        newAllExternalTypes.setNumericType(numericType);
        newAllExternalTypes.setSmallIntType(smallIntType);
        newAllExternalTypes.setTextType(textType);
        newAllExternalTypes.setTimestampWithoutTimeZone(timestampWithoutTimeZone);
        newAllExternalTypes.setTimestampWithTimeZone(timestampWithTimeZone);
        newAllExternalTypes.setTimeWithoutTimeZone(timeWithoutTimeZone);
        newAllExternalTypes.setTimeWithTimeZone(timeWithTimeZone);
        newAllExternalTypes.setUuidType(uuidType);
        newAllExternalTypes.setDoublePrecisionCol(doublePrecisionCol);

        LOGGER.debug("AllExternalTypes details with id is updated with: {}" , newAllExternalTypes);

        return allExternalTypesService.update(newAllExternalTypes);
    }


    @ApiOperation(value = "Deletes the AllExternalTypes instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteAllExternalTypes(@RequestParam("serialType") Integer serialType, @RequestParam("bigserialType") Long bigserialType, @RequestParam("bigintType") Long bigintType, @RequestParam("bitType") Boolean bitType, @RequestParam("booleanType") Boolean booleanType, @RequestParam("byteaBlobType") byte[] byteaBlobType, @RequestParam("charDoubleQuotes") String charDoubleQuotes, @RequestParam("characterType") String characterType, @RequestParam("characterVaryingType") String characterVaryingType, @RequestParam("dateType") Date dateType, @RequestParam("integerType") Integer integerType, @RequestParam("numericType") BigDecimal numericType, @RequestParam("smallIntType") Short smallIntType, @RequestParam("textType") String textType, @RequestParam("timestampWithoutTimeZone") LocalDateTime timestampWithoutTimeZone, @RequestParam("timestampWithTimeZone") Timestamp timestampWithTimeZone, @RequestParam("timeWithoutTimeZone") Time timeWithoutTimeZone, @RequestParam("timeWithTimeZone") Time timeWithTimeZone, @RequestParam("uuidType") String uuidType, @RequestParam("doublePrecisionCol") BigDecimal doublePrecisionCol) {

        AllExternalTypesId allexternaltypesId = new AllExternalTypesId();
        allexternaltypesId.setSerialType(serialType);
        allexternaltypesId.setBigserialType(bigserialType);
        allexternaltypesId.setBigintType(bigintType);
        allexternaltypesId.setBitType(bitType);
        allexternaltypesId.setBooleanType(booleanType);
        allexternaltypesId.setByteaBlobType(byteaBlobType);
        allexternaltypesId.setCharDoubleQuotes(charDoubleQuotes);
        allexternaltypesId.setCharacterType(characterType);
        allexternaltypesId.setCharacterVaryingType(characterVaryingType);
        allexternaltypesId.setDateType(dateType);
        allexternaltypesId.setIntegerType(integerType);
        allexternaltypesId.setNumericType(numericType);
        allexternaltypesId.setSmallIntType(smallIntType);
        allexternaltypesId.setTextType(textType);
        allexternaltypesId.setTimestampWithoutTimeZone(timestampWithoutTimeZone);
        allexternaltypesId.setTimestampWithTimeZone(timestampWithTimeZone);
        allexternaltypesId.setTimeWithoutTimeZone(timeWithoutTimeZone);
        allexternaltypesId.setTimeWithTimeZone(timeWithTimeZone);
        allexternaltypesId.setUuidType(uuidType);
        allexternaltypesId.setDoublePrecisionCol(doublePrecisionCol);

        LOGGER.debug("Deleting AllExternalTypes with id: {}" , allexternaltypesId);
        AllExternalTypes allExternalTypes = allExternalTypesService.delete(allexternaltypesId);

        return allExternalTypes != null;
    }


    /**
     * @deprecated Use {@link #findAllExternalTypes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of AllExternalTypes instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AllExternalTypes> searchAllExternalTypesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering AllExternalTypes list by query filter:{}", (Object) queryFilters);
        return allExternalTypesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of AllExternalTypes instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AllExternalTypes> findAllExternalTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AllExternalTypes list by filter:", query);
        return allExternalTypesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of AllExternalTypes instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AllExternalTypes> filterAllExternalTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AllExternalTypes list by filter", query);
        return allExternalTypesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportAllExternalTypes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return allExternalTypesService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportAllExternalTypesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = AllExternalTypes.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> allExternalTypesService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of AllExternalTypes instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countAllExternalTypes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting AllExternalTypes");
		return allExternalTypesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getAllExternalTypesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return allExternalTypesService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AllExternalTypesService instance
	 */
	protected void setAllExternalTypesService(AllExternalTypesService service) {
		this.allExternalTypesService = service;
	}

}