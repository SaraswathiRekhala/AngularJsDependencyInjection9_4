/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.angularjsdependencyinjection9_4.dbscenarios.TUcOne2oneP;
import com.angularjsdependencyinjection9_4.dbscenarios.service.TUcOne2onePService;


/**
 * Controller object for domain model class TUcOne2oneP.
 * @see TUcOne2oneP
 */
@RestController("dbscenarios.TUcOne2onePController")
@Api(value = "TUcOne2onePController", description = "Exposes APIs to work with TUcOne2oneP resource.")
@RequestMapping("/dbscenarios/TUcOne2oneP")
public class TUcOne2onePController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TUcOne2onePController.class);

    @Autowired
	@Qualifier("dbscenarios.TUcOne2onePService")
	private TUcOne2onePService tUcOne2onePService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TUcOne2oneP instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TUcOne2oneP createTUcOne2oneP(@RequestBody TUcOne2oneP tucOne2oneP) {
		LOGGER.debug("Create TUcOne2oneP with information: {}" , tucOne2oneP);

		tucOne2oneP = tUcOne2onePService.create(tucOne2oneP);
		LOGGER.debug("Created TUcOne2oneP with information: {}" , tucOne2oneP);

	    return tucOne2oneP;
	}

    @ApiOperation(value = "Returns the TUcOne2oneP instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TUcOne2oneP getTUcOne2oneP(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting TUcOne2oneP with id: {}" , id);

        TUcOne2oneP foundTUcOne2oneP = tUcOne2onePService.getById(id);
        LOGGER.debug("TUcOne2oneP details with id: {}" , foundTUcOne2oneP);

        return foundTUcOne2oneP;
    }

    @ApiOperation(value = "Updates the TUcOne2oneP instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TUcOne2oneP editTUcOne2oneP(@PathVariable("id") Integer id, @RequestBody TUcOne2oneP tucOne2oneP) {
        LOGGER.debug("Editing TUcOne2oneP with id: {}" , tucOne2oneP.getId());

        tucOne2oneP.setId(id);
        tucOne2oneP = tUcOne2onePService.update(tucOne2oneP);
        LOGGER.debug("TUcOne2oneP details with id: {}" , tucOne2oneP);

        return tucOne2oneP;
    }

    @ApiOperation(value = "Deletes the TUcOne2oneP instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTUcOne2oneP(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting TUcOne2oneP with id: {}" , id);

        TUcOne2oneP deletedTUcOne2oneP = tUcOne2onePService.delete(id);

        return deletedTUcOne2oneP != null;
    }

    @RequestMapping(value = "/stringCol/{stringCol}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching TUcOne2oneP with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TUcOne2oneP getByStringCol(@PathVariable("stringCol") String stringCol) {
        LOGGER.debug("Getting TUcOne2oneP with uniques key StringCol");
        return tUcOne2onePService.getByStringCol(stringCol);
    }

    /**
     * @deprecated Use {@link #findTUcOne2onePs(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TUcOne2oneP instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TUcOne2oneP> searchTUcOne2onePsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TUcOne2onePs list by query filter:{}", (Object) queryFilters);
        return tUcOne2onePService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TUcOne2oneP instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TUcOne2oneP> findTUcOne2onePs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TUcOne2onePs list by filter:", query);
        return tUcOne2onePService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TUcOne2oneP instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TUcOne2oneP> filterTUcOne2onePs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TUcOne2onePs list by filter", query);
        return tUcOne2onePService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTUcOne2onePs(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tUcOne2onePService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTUcOne2onePsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TUcOne2oneP.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tUcOne2onePService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TUcOne2oneP instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTUcOne2onePs( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TUcOne2onePs");
		return tUcOne2onePService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTUcOne2onePAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tUcOne2onePService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TUcOne2onePService instance
	 */
	protected void setTUcOne2onePService(TUcOne2onePService service) {
		this.tUcOne2onePService = service;
	}

}