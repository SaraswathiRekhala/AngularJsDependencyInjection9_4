/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.angularjsdependencyinjection9_4.dbscenarios.VirtualMany2one;
import com.angularjsdependencyinjection9_4.dbscenarios.VirtualMany2oneId;
import com.angularjsdependencyinjection9_4.dbscenarios.service.VirtualMany2oneService;


/**
 * Controller object for domain model class VirtualMany2one.
 * @see VirtualMany2one
 */
@RestController("dbscenarios.VirtualMany2oneController")
@Api(value = "VirtualMany2oneController", description = "Exposes APIs to work with VirtualMany2one resource.")
@RequestMapping("/dbscenarios/VirtualMany2one")
public class VirtualMany2oneController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VirtualMany2oneController.class);

    @Autowired
	@Qualifier("dbscenarios.VirtualMany2oneService")
	private VirtualMany2oneService virtualMany2oneService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new VirtualMany2one instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VirtualMany2one createVirtualMany2one(@RequestBody VirtualMany2one virtualMany2one) {
		LOGGER.debug("Create VirtualMany2one with information: {}" , virtualMany2one);

		virtualMany2one = virtualMany2oneService.create(virtualMany2one);
		LOGGER.debug("Created VirtualMany2one with information: {}" , virtualMany2one);

	    return virtualMany2one;
	}

    @ApiOperation(value = "Returns the VirtualMany2one instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VirtualMany2one getVirtualMany2one(@RequestParam("serialType") Integer serialType, @RequestParam("characterType") String characterType, @RequestParam("smallIntType") Short smallIntType) {

        VirtualMany2oneId virtualmany2oneId = new VirtualMany2oneId();
        virtualmany2oneId.setSerialType(serialType);
        virtualmany2oneId.setCharacterType(characterType);
        virtualmany2oneId.setSmallIntType(smallIntType);

        LOGGER.debug("Getting VirtualMany2one with id: {}" , virtualmany2oneId);
        VirtualMany2one virtualMany2one = virtualMany2oneService.getById(virtualmany2oneId);
        LOGGER.debug("VirtualMany2one details with id: {}" , virtualMany2one);

        return virtualMany2one;
    }



    @ApiOperation(value = "Updates the VirtualMany2one instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VirtualMany2one editVirtualMany2one(@RequestParam("serialType") Integer serialType, @RequestParam("characterType") String characterType, @RequestParam("smallIntType") Short smallIntType, @RequestBody VirtualMany2one virtualMany2one) {

        virtualMany2one.setSerialType(serialType);
        virtualMany2one.setCharacterType(characterType);
        virtualMany2one.setSmallIntType(smallIntType);

        LOGGER.debug("VirtualMany2one details with id is updated with: {}" , virtualMany2one);

        return virtualMany2oneService.update(virtualMany2one);
    }


    @ApiOperation(value = "Deletes the VirtualMany2one instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVirtualMany2one(@RequestParam("serialType") Integer serialType, @RequestParam("characterType") String characterType, @RequestParam("smallIntType") Short smallIntType) {

        VirtualMany2oneId virtualmany2oneId = new VirtualMany2oneId();
        virtualmany2oneId.setSerialType(serialType);
        virtualmany2oneId.setCharacterType(characterType);
        virtualmany2oneId.setSmallIntType(smallIntType);

        LOGGER.debug("Deleting VirtualMany2one with id: {}" , virtualmany2oneId);
        VirtualMany2one virtualMany2one = virtualMany2oneService.delete(virtualmany2oneId);

        return virtualMany2one != null;
    }


    /**
     * @deprecated Use {@link #findVirtualMany2ones(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of VirtualMany2one instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VirtualMany2one> searchVirtualMany2onesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering VirtualMany2ones list by query filter:{}", (Object) queryFilters);
        return virtualMany2oneService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VirtualMany2one instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VirtualMany2one> findVirtualMany2ones(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VirtualMany2ones list by filter:", query);
        return virtualMany2oneService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VirtualMany2one instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VirtualMany2one> filterVirtualMany2ones(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VirtualMany2ones list by filter", query);
        return virtualMany2oneService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVirtualMany2ones(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return virtualMany2oneService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportVirtualMany2onesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = VirtualMany2one.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> virtualMany2oneService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of VirtualMany2one instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVirtualMany2ones( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting VirtualMany2ones");
		return virtualMany2oneService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVirtualMany2oneAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return virtualMany2oneService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VirtualMany2oneService instance
	 */
	protected void setVirtualMany2oneService(VirtualMany2oneService service) {
		this.virtualMany2oneService = service;
	}

}