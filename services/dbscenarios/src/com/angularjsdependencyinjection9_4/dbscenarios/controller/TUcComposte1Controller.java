/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.angularjsdependencyinjection9_4.dbscenarios.TUcComposte1;
import com.angularjsdependencyinjection9_4.dbscenarios.service.TUcComposte1Service;


/**
 * Controller object for domain model class TUcComposte1.
 * @see TUcComposte1
 */
@RestController("dbscenarios.TUcComposte1Controller")
@Api(value = "TUcComposte1Controller", description = "Exposes APIs to work with TUcComposte1 resource.")
@RequestMapping("/dbscenarios/TUcComposte1")
public class TUcComposte1Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(TUcComposte1Controller.class);

    @Autowired
	@Qualifier("dbscenarios.TUcComposte1Service")
	private TUcComposte1Service tUcComposte1Service;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TUcComposte1 instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TUcComposte1 createTUcComposte1(@RequestBody TUcComposte1 tucComposte1) {
		LOGGER.debug("Create TUcComposte1 with information: {}" , tucComposte1);

		tucComposte1 = tUcComposte1Service.create(tucComposte1);
		LOGGER.debug("Created TUcComposte1 with information: {}" , tucComposte1);

	    return tucComposte1;
	}

    @ApiOperation(value = "Returns the TUcComposte1 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TUcComposte1 getTUcComposte1(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting TUcComposte1 with id: {}" , id);

        TUcComposte1 foundTUcComposte1 = tUcComposte1Service.getById(id);
        LOGGER.debug("TUcComposte1 details with id: {}" , foundTUcComposte1);

        return foundTUcComposte1;
    }

    @ApiOperation(value = "Updates the TUcComposte1 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TUcComposte1 editTUcComposte1(@PathVariable("id") Integer id, @RequestBody TUcComposte1 tucComposte1) {
        LOGGER.debug("Editing TUcComposte1 with id: {}" , tucComposte1.getShortId());

        tucComposte1.setShortId(id);
        tucComposte1 = tUcComposte1Service.update(tucComposte1);
        LOGGER.debug("TUcComposte1 details with id: {}" , tucComposte1);

        return tucComposte1;
    }

    @ApiOperation(value = "Deletes the TUcComposte1 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTUcComposte1(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting TUcComposte1 with id: {}" , id);

        TUcComposte1 deletedTUcComposte1 = tUcComposte1Service.delete(id);

        return deletedTUcComposte1 != null;
    }

    @RequestMapping(value = "/byteCol-stringCol", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching TUcComposte1 with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TUcComposte1 getByByteColAndStringCol(@RequestParam("byteCol") Short byteCol, @RequestParam("stringCol") String stringCol) {
        LOGGER.debug("Getting TUcComposte1 with uniques key ByteColAndStringCol");
        return tUcComposte1Service.getByByteColAndStringCol(byteCol, stringCol);
    }

    @RequestMapping(value = "/longCol-bigintCol-charCol", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching TUcComposte1 with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TUcComposte1 getByLongColAndBigintColAndCharCol(@RequestParam("longCol") Long longCol, @RequestParam("bigintCol") Long bigintCol, @RequestParam("charCol") String charCol) {
        LOGGER.debug("Getting TUcComposte1 with uniques key LongColAndBigintColAndCharCol");
        return tUcComposte1Service.getByLongColAndBigintColAndCharCol(longCol, bigintCol, charCol);
    }

    /**
     * @deprecated Use {@link #findTUcComposte1s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TUcComposte1 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TUcComposte1> searchTUcComposte1sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TUcComposte1s list by query filter:{}", (Object) queryFilters);
        return tUcComposte1Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TUcComposte1 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TUcComposte1> findTUcComposte1s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TUcComposte1s list by filter:", query);
        return tUcComposte1Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TUcComposte1 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TUcComposte1> filterTUcComposte1s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TUcComposte1s list by filter", query);
        return tUcComposte1Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTUcComposte1s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tUcComposte1Service.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTUcComposte1sAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TUcComposte1.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tUcComposte1Service.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TUcComposte1 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTUcComposte1s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TUcComposte1s");
		return tUcComposte1Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTUcComposte1AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tUcComposte1Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TUcComposte1Service instance
	 */
	protected void setTUcComposte1Service(TUcComposte1Service service) {
		this.tUcComposte1Service = service;
	}

}