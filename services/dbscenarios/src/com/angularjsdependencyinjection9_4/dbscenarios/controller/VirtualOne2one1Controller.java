/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigDecimal;
import java.sql.Time;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.angularjsdependencyinjection9_4.dbscenarios.VirtualOne2one1;
import com.angularjsdependencyinjection9_4.dbscenarios.VirtualOne2one1Id;
import com.angularjsdependencyinjection9_4.dbscenarios.service.VirtualOne2one1Service;


/**
 * Controller object for domain model class VirtualOne2one1.
 * @see VirtualOne2one1
 */
@RestController("dbscenarios.VirtualOne2one1Controller")
@Api(value = "VirtualOne2one1Controller", description = "Exposes APIs to work with VirtualOne2one1 resource.")
@RequestMapping("/dbscenarios/VirtualOne2one1")
public class VirtualOne2one1Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(VirtualOne2one1Controller.class);

    @Autowired
	@Qualifier("dbscenarios.VirtualOne2one1Service")
	private VirtualOne2one1Service virtualOne2one1Service;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new VirtualOne2one1 instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VirtualOne2one1 createVirtualOne2one1(@RequestBody VirtualOne2one1 virtualOne2one1) {
		LOGGER.debug("Create VirtualOne2one1 with information: {}" , virtualOne2one1);

		virtualOne2one1 = virtualOne2one1Service.create(virtualOne2one1);
		LOGGER.debug("Created VirtualOne2one1 with information: {}" , virtualOne2one1);

	    return virtualOne2one1;
	}

    @ApiOperation(value = "Returns the VirtualOne2one1 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VirtualOne2one1 getVirtualOne2one1(@RequestParam("serialId") Integer serialId, @RequestParam("characterColumn") String characterColumn, @RequestParam("numericColumn") BigDecimal numericColumn, @RequestParam("timeWithTimeZone") Time timeWithTimeZone, @RequestParam("timeWithoutTimeZone") Time timeWithoutTimeZone) {

        VirtualOne2one1Id virtualone2one1Id = new VirtualOne2one1Id();
        virtualone2one1Id.setSerialId(serialId);
        virtualone2one1Id.setCharacterColumn(characterColumn);
        virtualone2one1Id.setNumericColumn(numericColumn);
        virtualone2one1Id.setTimeWithTimeZone(timeWithTimeZone);
        virtualone2one1Id.setTimeWithoutTimeZone(timeWithoutTimeZone);

        LOGGER.debug("Getting VirtualOne2one1 with id: {}" , virtualone2one1Id);
        VirtualOne2one1 virtualOne2one1 = virtualOne2one1Service.getById(virtualone2one1Id);
        LOGGER.debug("VirtualOne2one1 details with id: {}" , virtualOne2one1);

        return virtualOne2one1;
    }



    @ApiOperation(value = "Updates the VirtualOne2one1 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VirtualOne2one1 editVirtualOne2one1(@RequestParam("serialId") Integer serialId, @RequestParam("characterColumn") String characterColumn, @RequestParam("numericColumn") BigDecimal numericColumn, @RequestParam("timeWithTimeZone") Time timeWithTimeZone, @RequestParam("timeWithoutTimeZone") Time timeWithoutTimeZone, @RequestBody VirtualOne2one1 virtualOne2one1) {

        virtualOne2one1.setSerialId(serialId);
        virtualOne2one1.setCharacterColumn(characterColumn);
        virtualOne2one1.setNumericColumn(numericColumn);
        virtualOne2one1.setTimeWithTimeZone(timeWithTimeZone);
        virtualOne2one1.setTimeWithoutTimeZone(timeWithoutTimeZone);

        LOGGER.debug("VirtualOne2one1 details with id is updated with: {}" , virtualOne2one1);

        return virtualOne2one1Service.update(virtualOne2one1);
    }


    @ApiOperation(value = "Deletes the VirtualOne2one1 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVirtualOne2one1(@RequestParam("serialId") Integer serialId, @RequestParam("characterColumn") String characterColumn, @RequestParam("numericColumn") BigDecimal numericColumn, @RequestParam("timeWithTimeZone") Time timeWithTimeZone, @RequestParam("timeWithoutTimeZone") Time timeWithoutTimeZone) {

        VirtualOne2one1Id virtualone2one1Id = new VirtualOne2one1Id();
        virtualone2one1Id.setSerialId(serialId);
        virtualone2one1Id.setCharacterColumn(characterColumn);
        virtualone2one1Id.setNumericColumn(numericColumn);
        virtualone2one1Id.setTimeWithTimeZone(timeWithTimeZone);
        virtualone2one1Id.setTimeWithoutTimeZone(timeWithoutTimeZone);

        LOGGER.debug("Deleting VirtualOne2one1 with id: {}" , virtualone2one1Id);
        VirtualOne2one1 virtualOne2one1 = virtualOne2one1Service.delete(virtualone2one1Id);

        return virtualOne2one1 != null;
    }


    @RequestMapping(value = "/serialId/{serialId}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching VirtualOne2one1 with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VirtualOne2one1 getBySerialId(@PathVariable("serialId") int serialId) {
        LOGGER.debug("Getting VirtualOne2one1 with uniques key SerialId");
        return virtualOne2one1Service.getBySerialId(serialId);
    }

    /**
     * @deprecated Use {@link #findVirtualOne2one1s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of VirtualOne2one1 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VirtualOne2one1> searchVirtualOne2one1sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering VirtualOne2one1s list by query filter:{}", (Object) queryFilters);
        return virtualOne2one1Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VirtualOne2one1 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VirtualOne2one1> findVirtualOne2one1s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VirtualOne2one1s list by filter:", query);
        return virtualOne2one1Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VirtualOne2one1 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VirtualOne2one1> filterVirtualOne2one1s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VirtualOne2one1s list by filter", query);
        return virtualOne2one1Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVirtualOne2one1s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return virtualOne2one1Service.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportVirtualOne2one1sAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = VirtualOne2one1.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> virtualOne2one1Service.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of VirtualOne2one1 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVirtualOne2one1s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting VirtualOne2one1s");
		return virtualOne2one1Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVirtualOne2one1AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return virtualOne2one1Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VirtualOne2one1Service instance
	 */
	protected void setVirtualOne2one1Service(VirtualOne2one1Service service) {
		this.virtualOne2one1Service = service;
	}

}