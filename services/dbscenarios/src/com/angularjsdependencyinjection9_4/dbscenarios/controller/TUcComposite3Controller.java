/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.angularjsdependencyinjection9_4.dbscenarios.TUcComposite3;
import com.angularjsdependencyinjection9_4.dbscenarios.TUcComposite3Id;
import com.angularjsdependencyinjection9_4.dbscenarios.service.TUcComposite3Service;


/**
 * Controller object for domain model class TUcComposite3.
 * @see TUcComposite3
 */
@RestController("dbscenarios.TUcComposite3Controller")
@Api(value = "TUcComposite3Controller", description = "Exposes APIs to work with TUcComposite3 resource.")
@RequestMapping("/dbscenarios/TUcComposite3")
public class TUcComposite3Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(TUcComposite3Controller.class);

    @Autowired
	@Qualifier("dbscenarios.TUcComposite3Service")
	private TUcComposite3Service tUcComposite3Service;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TUcComposite3 instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TUcComposite3 createTUcComposite3(@RequestBody TUcComposite3 tucComposite3) {
		LOGGER.debug("Create TUcComposite3 with information: {}" , tucComposite3);

		tucComposite3 = tUcComposite3Service.create(tucComposite3);
		LOGGER.debug("Created TUcComposite3 with information: {}" , tucComposite3);

	    return tucComposite3;
	}

    @ApiOperation(value = "Returns the TUcComposite3 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TUcComposite3 getTUcComposite3(@RequestParam("byteId") Short byteId, @RequestParam("stringCol") String stringCol) {

        TUcComposite3Id tuccomposite3Id = new TUcComposite3Id();
        tuccomposite3Id.setByteId(byteId);
        tuccomposite3Id.setStringCol(stringCol);

        LOGGER.debug("Getting TUcComposite3 with id: {}" , tuccomposite3Id);
        TUcComposite3 tucComposite3 = tUcComposite3Service.getById(tuccomposite3Id);
        LOGGER.debug("TUcComposite3 details with id: {}" , tucComposite3);

        return tucComposite3;
    }



    @ApiOperation(value = "Updates the TUcComposite3 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TUcComposite3 editTUcComposite3(@RequestParam("byteId") Short byteId, @RequestParam("stringCol") String stringCol, @RequestBody TUcComposite3 tucComposite3) {

        tucComposite3.setByteId(byteId);
        tucComposite3.setStringCol(stringCol);

        LOGGER.debug("TUcComposite3 details with id is updated with: {}" , tucComposite3);

        return tUcComposite3Service.update(tucComposite3);
    }


    @ApiOperation(value = "Deletes the TUcComposite3 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTUcComposite3(@RequestParam("byteId") Short byteId, @RequestParam("stringCol") String stringCol) {

        TUcComposite3Id tuccomposite3Id = new TUcComposite3Id();
        tuccomposite3Id.setByteId(byteId);
        tuccomposite3Id.setStringCol(stringCol);

        LOGGER.debug("Deleting TUcComposite3 with id: {}" , tuccomposite3Id);
        TUcComposite3 tucComposite3 = tUcComposite3Service.delete(tuccomposite3Id);

        return tucComposite3 != null;
    }


    /**
     * @deprecated Use {@link #findTUcComposite3s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TUcComposite3 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TUcComposite3> searchTUcComposite3sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TUcComposite3s list by query filter:{}", (Object) queryFilters);
        return tUcComposite3Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TUcComposite3 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TUcComposite3> findTUcComposite3s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TUcComposite3s list by filter:", query);
        return tUcComposite3Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TUcComposite3 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TUcComposite3> filterTUcComposite3s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TUcComposite3s list by filter", query);
        return tUcComposite3Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTUcComposite3s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tUcComposite3Service.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTUcComposite3sAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TUcComposite3.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tUcComposite3Service.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TUcComposite3 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTUcComposite3s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TUcComposite3s");
		return tUcComposite3Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTUcComposite3AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tUcComposite3Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TUcComposite3Service instance
	 */
	protected void setTUcComposite3Service(TUcComposite3Service service) {
		this.tUcComposite3Service = service;
	}

}