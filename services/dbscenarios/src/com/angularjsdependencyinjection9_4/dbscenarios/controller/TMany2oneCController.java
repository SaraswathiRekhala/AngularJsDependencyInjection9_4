/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.angularjsdependencyinjection9_4.dbscenarios.TMany2oneC;
import com.angularjsdependencyinjection9_4.dbscenarios.TMany2oneP;
import com.angularjsdependencyinjection9_4.dbscenarios.service.TMany2oneCService;


/**
 * Controller object for domain model class TMany2oneC.
 * @see TMany2oneC
 */
@RestController("dbscenarios.TMany2oneCController")
@Api(value = "TMany2oneCController", description = "Exposes APIs to work with TMany2oneC resource.")
@RequestMapping("/dbscenarios/TMany2oneC")
public class TMany2oneCController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TMany2oneCController.class);

    @Autowired
	@Qualifier("dbscenarios.TMany2oneCService")
	private TMany2oneCService tMany2oneCService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TMany2oneC instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TMany2oneC createTMany2oneC(@RequestBody TMany2oneC tmany2oneC) {
		LOGGER.debug("Create TMany2oneC with information: {}" , tmany2oneC);

		tmany2oneC = tMany2oneCService.create(tmany2oneC);
		LOGGER.debug("Created TMany2oneC with information: {}" , tmany2oneC);

	    return tmany2oneC;
	}

    @ApiOperation(value = "Returns the TMany2oneC instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TMany2oneC getTMany2oneC(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting TMany2oneC with id: {}" , id);

        TMany2oneC foundTMany2oneC = tMany2oneCService.getById(id);
        LOGGER.debug("TMany2oneC details with id: {}" , foundTMany2oneC);

        return foundTMany2oneC;
    }

    @ApiOperation(value = "Updates the TMany2oneC instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TMany2oneC editTMany2oneC(@PathVariable("id") Integer id, @RequestBody TMany2oneC tmany2oneC) {
        LOGGER.debug("Editing TMany2oneC with id: {}" , tmany2oneC.getBigintId());

        tmany2oneC.setBigintId(id);
        tmany2oneC = tMany2oneCService.update(tmany2oneC);
        LOGGER.debug("TMany2oneC details with id: {}" , tmany2oneC);

        return tmany2oneC;
    }

    @ApiOperation(value = "Deletes the TMany2oneC instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTMany2oneC(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting TMany2oneC with id: {}" , id);

        TMany2oneC deletedTMany2oneC = tMany2oneCService.delete(id);

        return deletedTMany2oneC != null;
    }

    /**
     * @deprecated Use {@link #findTMany2oneCs(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TMany2oneC instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TMany2oneC> searchTMany2oneCsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TMany2oneCs list by query filter:{}", (Object) queryFilters);
        return tMany2oneCService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TMany2oneC instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TMany2oneC> findTMany2oneCs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TMany2oneCs list by filter:", query);
        return tMany2oneCService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TMany2oneC instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TMany2oneC> filterTMany2oneCs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TMany2oneCs list by filter", query);
        return tMany2oneCService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTMany2oneCs(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tMany2oneCService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTMany2oneCsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TMany2oneC.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tMany2oneCService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TMany2oneC instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTMany2oneCs( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TMany2oneCs");
		return tMany2oneCService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTMany2oneCAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tMany2oneCService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/tmany2onePs", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the tmany2onePs instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TMany2oneP> findAssociatedTmany2onePs(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated tmany2onePs");
        return tMany2oneCService.findAssociatedTmany2onePs(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TMany2oneCService instance
	 */
	protected void setTMany2oneCService(TMany2oneCService service) {
		this.tMany2oneCService = service;
	}

}