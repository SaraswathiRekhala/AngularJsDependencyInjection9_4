/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigDecimal;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.angularjsdependencyinjection9_4.dbscenarios.TCrOne2one1;
import com.angularjsdependencyinjection9_4.dbscenarios.TCrOne2one2;
import com.angularjsdependencyinjection9_4.dbscenarios.TCrOne2one2Id;
import com.angularjsdependencyinjection9_4.dbscenarios.service.TCrOne2one2Service;


/**
 * Controller object for domain model class TCrOne2one2.
 * @see TCrOne2one2
 */
@RestController("dbscenarios.TCrOne2one2Controller")
@Api(value = "TCrOne2one2Controller", description = "Exposes APIs to work with TCrOne2one2 resource.")
@RequestMapping("/dbscenarios/TCrOne2one2")
public class TCrOne2one2Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(TCrOne2one2Controller.class);

    @Autowired
	@Qualifier("dbscenarios.TCrOne2one2Service")
	private TCrOne2one2Service tCrOne2one2Service;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TCrOne2one2 instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TCrOne2one2 createTCrOne2one2(@RequestBody TCrOne2one2 tcrOne2one2) {
		LOGGER.debug("Create TCrOne2one2 with information: {}" , tcrOne2one2);

		tcrOne2one2 = tCrOne2one2Service.create(tcrOne2one2);
		LOGGER.debug("Created TCrOne2one2 with information: {}" , tcrOne2one2);

	    return tcrOne2one2;
	}

    @ApiOperation(value = "Returns the TCrOne2one2 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TCrOne2one2 getTCrOne2one2(@RequestParam("bigdecCol") BigDecimal bigdecCol, @RequestParam("stringCol") String stringCol, @RequestParam("intId") Integer intId, @RequestParam("charCol") String charCol) {

        TCrOne2one2Id tcrone2one2Id = new TCrOne2one2Id();
        tcrone2one2Id.setBigdecCol(bigdecCol);
        tcrone2one2Id.setStringCol(stringCol);
        tcrone2one2Id.setIntId(intId);
        tcrone2one2Id.setCharCol(charCol);

        LOGGER.debug("Getting TCrOne2one2 with id: {}" , tcrone2one2Id);
        TCrOne2one2 tcrOne2one2 = tCrOne2one2Service.getById(tcrone2one2Id);
        LOGGER.debug("TCrOne2one2 details with id: {}" , tcrOne2one2);

        return tcrOne2one2;
    }



    @ApiOperation(value = "Updates the TCrOne2one2 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TCrOne2one2 editTCrOne2one2(@RequestParam("bigdecCol") BigDecimal bigdecCol, @RequestParam("stringCol") String stringCol, @RequestParam("intId") Integer intId, @RequestParam("charCol") String charCol, @RequestBody TCrOne2one2 tcrOne2one2) {

        tcrOne2one2.setBigdecCol(bigdecCol);
        tcrOne2one2.setStringCol(stringCol);
        tcrOne2one2.setIntId(intId);
        tcrOne2one2.setCharCol(charCol);

        LOGGER.debug("TCrOne2one2 details with id is updated with: {}" , tcrOne2one2);

        return tCrOne2one2Service.update(tcrOne2one2);
    }


    @ApiOperation(value = "Deletes the TCrOne2one2 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTCrOne2one2(@RequestParam("bigdecCol") BigDecimal bigdecCol, @RequestParam("stringCol") String stringCol, @RequestParam("intId") Integer intId, @RequestParam("charCol") String charCol) {

        TCrOne2one2Id tcrone2one2Id = new TCrOne2one2Id();
        tcrone2one2Id.setBigdecCol(bigdecCol);
        tcrone2one2Id.setStringCol(stringCol);
        tcrone2one2Id.setIntId(intId);
        tcrone2one2Id.setCharCol(charCol);

        LOGGER.debug("Deleting TCrOne2one2 with id: {}" , tcrone2one2Id);
        TCrOne2one2 tcrOne2one2 = tCrOne2one2Service.delete(tcrone2one2Id);

        return tcrOne2one2 != null;
    }


    /**
     * @deprecated Use {@link #findTCrOne2one2s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TCrOne2one2 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TCrOne2one2> searchTCrOne2one2sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TCrOne2one2s list by query filter:{}", (Object) queryFilters);
        return tCrOne2one2Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TCrOne2one2 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TCrOne2one2> findTCrOne2one2s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TCrOne2one2s list by filter:", query);
        return tCrOne2one2Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TCrOne2one2 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TCrOne2one2> filterTCrOne2one2s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TCrOne2one2s list by filter", query);
        return tCrOne2one2Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTCrOne2one2s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tCrOne2one2Service.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTCrOne2one2sAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TCrOne2one2.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tCrOne2one2Service.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TCrOne2one2 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTCrOne2one2s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TCrOne2one2s");
		return tCrOne2one2Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTCrOne2one2AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tCrOne2one2Service.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/composite-id/tcrOne2one1s", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the tcrOne2one1s instance associated with the given composite-id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TCrOne2one1> findAssociatedTcrOne2one1s(@RequestParam("bigdecCol") BigDecimal bigdecCol, @RequestParam("stringCol") String stringCol, @RequestParam("intId") Integer intId, @RequestParam("charCol") String charCol, Pageable pageable) {

        LOGGER.debug("Fetching all associated tcrOne2one1s");
        return tCrOne2one2Service.findAssociatedTcrOne2one1s(bigdecCol, stringCol, intId, charCol, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TCrOne2one2Service instance
	 */
	protected void setTCrOne2one2Service(TCrOne2one2Service service) {
		this.tCrOne2one2Service = service;
	}

}