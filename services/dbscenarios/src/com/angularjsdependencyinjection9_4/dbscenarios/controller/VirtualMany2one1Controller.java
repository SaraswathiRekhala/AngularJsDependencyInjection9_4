/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.sql.Time;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.angularjsdependencyinjection9_4.dbscenarios.VirtualMany2one1;
import com.angularjsdependencyinjection9_4.dbscenarios.VirtualMany2one1Id;
import com.angularjsdependencyinjection9_4.dbscenarios.service.VirtualMany2one1Service;


/**
 * Controller object for domain model class VirtualMany2one1.
 * @see VirtualMany2one1
 */
@RestController("dbscenarios.VirtualMany2one1Controller")
@Api(value = "VirtualMany2one1Controller", description = "Exposes APIs to work with VirtualMany2one1 resource.")
@RequestMapping("/dbscenarios/VirtualMany2one1")
public class VirtualMany2one1Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(VirtualMany2one1Controller.class);

    @Autowired
	@Qualifier("dbscenarios.VirtualMany2one1Service")
	private VirtualMany2one1Service virtualMany2one1Service;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new VirtualMany2one1 instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VirtualMany2one1 createVirtualMany2one1(@RequestBody VirtualMany2one1 virtualMany2one1) {
		LOGGER.debug("Create VirtualMany2one1 with information: {}" , virtualMany2one1);

		virtualMany2one1 = virtualMany2one1Service.create(virtualMany2one1);
		LOGGER.debug("Created VirtualMany2one1 with information: {}" , virtualMany2one1);

	    return virtualMany2one1;
	}

    @ApiOperation(value = "Returns the VirtualMany2one1 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VirtualMany2one1 getVirtualMany2one1(@RequestParam("characterType") String characterType, @RequestParam("timeType") Time timeType, @RequestParam("booleanType") Boolean booleanType) {

        VirtualMany2one1Id virtualmany2one1Id = new VirtualMany2one1Id();
        virtualmany2one1Id.setCharacterType(characterType);
        virtualmany2one1Id.setTimeType(timeType);
        virtualmany2one1Id.setBooleanType(booleanType);

        LOGGER.debug("Getting VirtualMany2one1 with id: {}" , virtualmany2one1Id);
        VirtualMany2one1 virtualMany2one1 = virtualMany2one1Service.getById(virtualmany2one1Id);
        LOGGER.debug("VirtualMany2one1 details with id: {}" , virtualMany2one1);

        return virtualMany2one1;
    }



    @ApiOperation(value = "Updates the VirtualMany2one1 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VirtualMany2one1 editVirtualMany2one1(@RequestParam("characterType") String characterType, @RequestParam("timeType") Time timeType, @RequestParam("booleanType") Boolean booleanType, @RequestBody VirtualMany2one1 virtualMany2one1) {

        virtualMany2one1.setCharacterType(characterType);
        virtualMany2one1.setTimeType(timeType);
        virtualMany2one1.setBooleanType(booleanType);

        LOGGER.debug("VirtualMany2one1 details with id is updated with: {}" , virtualMany2one1);

        return virtualMany2one1Service.update(virtualMany2one1);
    }


    @ApiOperation(value = "Deletes the VirtualMany2one1 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVirtualMany2one1(@RequestParam("characterType") String characterType, @RequestParam("timeType") Time timeType, @RequestParam("booleanType") Boolean booleanType) {

        VirtualMany2one1Id virtualmany2one1Id = new VirtualMany2one1Id();
        virtualmany2one1Id.setCharacterType(characterType);
        virtualmany2one1Id.setTimeType(timeType);
        virtualmany2one1Id.setBooleanType(booleanType);

        LOGGER.debug("Deleting VirtualMany2one1 with id: {}" , virtualmany2one1Id);
        VirtualMany2one1 virtualMany2one1 = virtualMany2one1Service.delete(virtualmany2one1Id);

        return virtualMany2one1 != null;
    }


    /**
     * @deprecated Use {@link #findVirtualMany2one1s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of VirtualMany2one1 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VirtualMany2one1> searchVirtualMany2one1sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering VirtualMany2one1s list by query filter:{}", (Object) queryFilters);
        return virtualMany2one1Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VirtualMany2one1 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VirtualMany2one1> findVirtualMany2one1s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VirtualMany2one1s list by filter:", query);
        return virtualMany2one1Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VirtualMany2one1 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VirtualMany2one1> filterVirtualMany2one1s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VirtualMany2one1s list by filter", query);
        return virtualMany2one1Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVirtualMany2one1s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return virtualMany2one1Service.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportVirtualMany2one1sAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = VirtualMany2one1.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> virtualMany2one1Service.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of VirtualMany2one1 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVirtualMany2one1s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting VirtualMany2one1s");
		return virtualMany2one1Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVirtualMany2one1AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return virtualMany2one1Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VirtualMany2one1Service instance
	 */
	protected void setVirtualMany2one1Service(VirtualMany2one1Service service) {
		this.virtualMany2one1Service = service;
	}

}