/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.angularjsdependencyinjection9_4.dbscenarios.SpCharInSeq;
import com.angularjsdependencyinjection9_4.dbscenarios.service.SpCharInSeqService;


/**
 * Controller object for domain model class SpCharInSeq.
 * @see SpCharInSeq
 */
@RestController("dbscenarios.SpCharInSeqController")
@Api(value = "SpCharInSeqController", description = "Exposes APIs to work with SpCharInSeq resource.")
@RequestMapping("/dbscenarios/SpCharInSeq")
public class SpCharInSeqController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SpCharInSeqController.class);

    @Autowired
	@Qualifier("dbscenarios.SpCharInSeqService")
	private SpCharInSeqService spCharInSeqService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new SpCharInSeq instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SpCharInSeq createSpCharInSeq(@RequestBody SpCharInSeq spCharInSeq) {
		LOGGER.debug("Create SpCharInSeq with information: {}" , spCharInSeq);

		spCharInSeq = spCharInSeqService.create(spCharInSeq);
		LOGGER.debug("Created SpCharInSeq with information: {}" , spCharInSeq);

	    return spCharInSeq;
	}

    @ApiOperation(value = "Returns the SpCharInSeq instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SpCharInSeq getSpCharInSeq(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting SpCharInSeq with id: {}" , id);

        SpCharInSeq foundSpCharInSeq = spCharInSeqService.getById(id);
        LOGGER.debug("SpCharInSeq details with id: {}" , foundSpCharInSeq);

        return foundSpCharInSeq;
    }

    @ApiOperation(value = "Updates the SpCharInSeq instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SpCharInSeq editSpCharInSeq(@PathVariable("id") Integer id, @RequestBody SpCharInSeq spCharInSeq) {
        LOGGER.debug("Editing SpCharInSeq with id: {}" , spCharInSeq.getId());

        spCharInSeq.setId(id);
        spCharInSeq = spCharInSeqService.update(spCharInSeq);
        LOGGER.debug("SpCharInSeq details with id: {}" , spCharInSeq);

        return spCharInSeq;
    }

    @ApiOperation(value = "Deletes the SpCharInSeq instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteSpCharInSeq(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting SpCharInSeq with id: {}" , id);

        SpCharInSeq deletedSpCharInSeq = spCharInSeqService.delete(id);

        return deletedSpCharInSeq != null;
    }

    /**
     * @deprecated Use {@link #findSpCharInSeqs(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of SpCharInSeq instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SpCharInSeq> searchSpCharInSeqsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering SpCharInSeqs list by query filter:{}", (Object) queryFilters);
        return spCharInSeqService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SpCharInSeq instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SpCharInSeq> findSpCharInSeqs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SpCharInSeqs list by filter:", query);
        return spCharInSeqService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SpCharInSeq instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SpCharInSeq> filterSpCharInSeqs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SpCharInSeqs list by filter", query);
        return spCharInSeqService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportSpCharInSeqs(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return spCharInSeqService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportSpCharInSeqsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = SpCharInSeq.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> spCharInSeqService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of SpCharInSeq instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countSpCharInSeqs( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting SpCharInSeqs");
		return spCharInSeqService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getSpCharInSeqAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return spCharInSeqService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SpCharInSeqService instance
	 */
	protected void setSpCharInSeqService(SpCharInSeqService service) {
		this.spCharInSeqService = service;
	}

}