/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.angularjsdependencyinjection9_4.dbscenarios.Table448;
import com.angularjsdependencyinjection9_4.dbscenarios.service.Table448Service;


/**
 * Controller object for domain model class Table448.
 * @see Table448
 */
@RestController("dbscenarios.Table448Controller")
@Api(value = "Table448Controller", description = "Exposes APIs to work with Table448 resource.")
@RequestMapping("/dbscenarios/Table448")
public class Table448Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table448Controller.class);

    @Autowired
	@Qualifier("dbscenarios.Table448Service")
	private Table448Service table448Service;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Table448 instance.")
    @RequestMapping(method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table448 createTable448(@RequestPart("wm_data_json") Table448 table448, @RequestPart(value = "column5", required = false) MultipartFile _column5) {
		LOGGER.debug("Create Table448 with information: {}" , table448);

    table448.setColumn5(WMMultipartUtils.toByteArray(_column5));
		table448 = table448Service.create(table448);
		LOGGER.debug("Created Table448 with information: {}" , table448);

	    return table448;
	}

    @ApiOperation(value = "Returns the Table448 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table448 getTable448(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Table448 with id: {}" , id);

        Table448 foundTable448 = table448Service.getById(id);
        LOGGER.debug("Table448 details with id: {}" , foundTable448);

        return foundTable448;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in Table448 instance" )
    @RequestMapping(value = "/{id}/content/{fieldName}", method = RequestMethod.GET, produces="application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DownloadResponse getTable448BLOBContent(@PathVariable("id") Integer id, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, @RequestParam(value="download", defaultValue = "false") boolean download) {

        LOGGER.debug("Retrieves content for the given BLOB field {} in Table448 instance" , fieldName);

        if(!WMRuntimeUtils.isLob(Table448.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName + " is not a valid BLOB type");
        }
        Table448 table448 = table448Service.getById(id);

        return WMMultipartUtils.buildDownloadResponseForBlob(table448, fieldName, httpServletRequest, download);
    }

    @ApiOperation(value = "Updates the Table448 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table448 editTable448(@PathVariable("id") Integer id, @RequestBody Table448 table448) {
        LOGGER.debug("Editing Table448 with id: {}" , table448.getId());

        table448.setId(id);
        table448 = table448Service.update(table448);
        LOGGER.debug("Table448 details with id: {}" , table448);

        return table448;
    }

    @ApiOperation(value = "Updates the Table448 instance associated with the given id.This API should be used when Table448 instance fields that require multipart data.") 
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.POST, consumes = {"multipart/form-data"})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table448 editTable448(@PathVariable("id") Integer id, MultipartHttpServletRequest multipartHttpServletRequest) {
        Table448 newTable448 = WMMultipartUtils.toObject(multipartHttpServletRequest, Table448.class, "dbscenarios");
        newTable448.setId(id);

        Table448 oldTable448 = table448Service.getById(id);
        WMMultipartUtils.updateLobsContent(oldTable448, newTable448);
        LOGGER.debug("Updating Table448 with information: {}" , newTable448);

        return table448Service.update(newTable448);
    }

    @ApiOperation(value = "Deletes the Table448 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTable448(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Table448 with id: {}" , id);

        Table448 deletedTable448 = table448Service.delete(id);

        return deletedTable448 != null;
    }

    @RequestMapping(value = "/column5-column6", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Table448 with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table448 getByColumn5AndColumn6(@RequestParam("column5") byte[] column5, @RequestParam("column6") String column6) {
        LOGGER.debug("Getting Table448 with uniques key Column5AndColumn6");
        return table448Service.getByColumn5AndColumn6(column5, column6);
    }

    /**
     * @deprecated Use {@link #findTable448s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Table448 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table448> searchTable448sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Table448s list by query filter:{}", (Object) queryFilters);
        return table448Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Table448 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table448> findTable448s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table448s list by filter:", query);
        return table448Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Table448 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table448> filterTable448s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table448s list by filter", query);
        return table448Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTable448s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return table448Service.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTable448sAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Table448.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> table448Service.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Table448 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTable448s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Table448s");
		return table448Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTable448AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return table448Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table448Service instance
	 */
	protected void setTable448Service(Table448Service service) {
		this.table448Service = service;
	}

}