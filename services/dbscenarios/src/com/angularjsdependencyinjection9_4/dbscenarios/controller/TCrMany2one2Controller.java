/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.angularjsdependencyinjection9_4.dbscenarios.TCrMany2one2;
import com.angularjsdependencyinjection9_4.dbscenarios.TCrMany2one2Id;
import com.angularjsdependencyinjection9_4.dbscenarios.service.TCrMany2one2Service;


/**
 * Controller object for domain model class TCrMany2one2.
 * @see TCrMany2one2
 */
@RestController("dbscenarios.TCrMany2one2Controller")
@Api(value = "TCrMany2one2Controller", description = "Exposes APIs to work with TCrMany2one2 resource.")
@RequestMapping("/dbscenarios/TCrMany2one2")
public class TCrMany2one2Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(TCrMany2one2Controller.class);

    @Autowired
	@Qualifier("dbscenarios.TCrMany2one2Service")
	private TCrMany2one2Service tCrMany2one2Service;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TCrMany2one2 instance.")
    @RequestMapping(method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TCrMany2one2 createTCrMany2one2(@RequestPart("wm_data_json") TCrMany2one2 tcrMany2one2, @RequestPart(value = "blobCol", required = false) MultipartFile _blobCol) {
		LOGGER.debug("Create TCrMany2one2 with information: {}" , tcrMany2one2);

    tcrMany2one2.setBlobCol(WMMultipartUtils.toByteArray(_blobCol));
		tcrMany2one2 = tCrMany2one2Service.create(tcrMany2one2);
		LOGGER.debug("Created TCrMany2one2 with information: {}" , tcrMany2one2);

	    return tcrMany2one2;
	}

    @ApiOperation(value = "Returns the TCrMany2one2 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TCrMany2one2 getTCrMany2one2(@RequestParam("stringCol") String stringCol, @RequestParam("byteId") Short byteId, @RequestParam("longCol") Long longCol) {

        TCrMany2one2Id tcrmany2one2Id = new TCrMany2one2Id();
        tcrmany2one2Id.setStringCol(stringCol);
        tcrmany2one2Id.setByteId(byteId);
        tcrmany2one2Id.setLongCol(longCol);

        LOGGER.debug("Getting TCrMany2one2 with id: {}" , tcrmany2one2Id);
        TCrMany2one2 tcrMany2one2 = tCrMany2one2Service.getById(tcrmany2one2Id);
        LOGGER.debug("TCrMany2one2 details with id: {}" , tcrMany2one2);

        return tcrMany2one2;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in TCrMany2one2 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id/content/{fieldName}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public void getTCrMany2one2BLOBContent(@RequestParam("stringCol") String stringCol, @RequestParam("byteId") Short byteId, @RequestParam("longCol") Long longCol, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) {

        LOGGER.debug("Retrieves content for the given BLOB field {} in TCrMany2one2 instance" , fieldName);

        if(!WMRuntimeUtils.isLob(TCrMany2one2.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName +  " is not a valid BLOB type");
        }

        TCrMany2one2Id tcrmany2one2Id = new TCrMany2one2Id();
        tcrmany2one2Id.setStringCol(stringCol);
        tcrmany2one2Id.setByteId(byteId);
        tcrmany2one2Id.setLongCol(longCol);

        TCrMany2one2 tcrMany2one2 = tCrMany2one2Service.getById(tcrmany2one2Id);
        WMMultipartUtils.buildHttpResponseForBlob(tcrMany2one2, fieldName, httpServletRequest, httpServletResponse);
    }



    @ApiOperation(value = "Updates the TCrMany2one2 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TCrMany2one2 editTCrMany2one2(@RequestParam("stringCol") String stringCol, @RequestParam("byteId") Short byteId, @RequestParam("longCol") Long longCol, @RequestBody TCrMany2one2 tcrMany2one2) {

        tcrMany2one2.setStringCol(stringCol);
        tcrMany2one2.setByteId(byteId);
        tcrMany2one2.setLongCol(longCol);

        LOGGER.debug("TCrMany2one2 details with id is updated with: {}" , tcrMany2one2);

        return tCrMany2one2Service.update(tcrMany2one2);
    }

    @ApiOperation(value = "Updates the TCrMany2one2 instance associated with the given composite-id.This API should be used when TCrMany2one2 instance fields that require multipart data.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TCrMany2one2 editTCrMany2one2(@RequestParam("stringCol") String stringCol, @RequestParam("byteId") Short byteId, @RequestParam("longCol") Long longCol, MultipartHttpServletRequest multipartHttpServletRequest) {
        return this.editTCrMany2one2AndMultiparts(stringCol, byteId, longCol, multipartHttpServletRequest);
    }

    @ApiOperation(value = "Updates the TCrMany2one2 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT,  consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TCrMany2one2 editTCrMany2one2AndMultiparts(@RequestParam("stringCol") String stringCol, @RequestParam("byteId") Short byteId, @RequestParam("longCol") Long longCol, MultipartHttpServletRequest multipartHttpServletRequest) { 

        TCrMany2one2Id tcrmany2one2Id = new TCrMany2one2Id();
        tcrmany2one2Id.setStringCol(stringCol);
        tcrmany2one2Id.setByteId(byteId);
        tcrmany2one2Id.setLongCol(longCol);

        TCrMany2one2 newTCrMany2one2 = WMMultipartUtils.toObject(multipartHttpServletRequest, TCrMany2one2.class, "dbscenarios");
        TCrMany2one2 oldTCrMany2one2 = tCrMany2one2Service.getById(tcrmany2one2Id);

        WMMultipartUtils.updateLobsContent(oldTCrMany2one2, newTCrMany2one2);

        newTCrMany2one2.setStringCol(stringCol);
        newTCrMany2one2.setByteId(byteId);
        newTCrMany2one2.setLongCol(longCol);

        LOGGER.debug("TCrMany2one2 details with id is updated with: {}" , newTCrMany2one2);

        return tCrMany2one2Service.update(newTCrMany2one2);
    }


    @ApiOperation(value = "Deletes the TCrMany2one2 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTCrMany2one2(@RequestParam("stringCol") String stringCol, @RequestParam("byteId") Short byteId, @RequestParam("longCol") Long longCol) {

        TCrMany2one2Id tcrmany2one2Id = new TCrMany2one2Id();
        tcrmany2one2Id.setStringCol(stringCol);
        tcrmany2one2Id.setByteId(byteId);
        tcrmany2one2Id.setLongCol(longCol);

        LOGGER.debug("Deleting TCrMany2one2 with id: {}" , tcrmany2one2Id);
        TCrMany2one2 tcrMany2one2 = tCrMany2one2Service.delete(tcrmany2one2Id);

        return tcrMany2one2 != null;
    }


    /**
     * @deprecated Use {@link #findTCrMany2one2s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TCrMany2one2 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TCrMany2one2> searchTCrMany2one2sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TCrMany2one2s list by query filter:{}", (Object) queryFilters);
        return tCrMany2one2Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TCrMany2one2 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TCrMany2one2> findTCrMany2one2s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TCrMany2one2s list by filter:", query);
        return tCrMany2one2Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TCrMany2one2 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TCrMany2one2> filterTCrMany2one2s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TCrMany2one2s list by filter", query);
        return tCrMany2one2Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTCrMany2one2s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tCrMany2one2Service.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTCrMany2one2sAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TCrMany2one2.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tCrMany2one2Service.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TCrMany2one2 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTCrMany2one2s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TCrMany2one2s");
		return tCrMany2one2Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTCrMany2one2AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tCrMany2one2Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TCrMany2one2Service instance
	 */
	protected void setTCrMany2one2Service(TCrMany2one2Service service) {
		this.tCrMany2one2Service = service;
	}

}