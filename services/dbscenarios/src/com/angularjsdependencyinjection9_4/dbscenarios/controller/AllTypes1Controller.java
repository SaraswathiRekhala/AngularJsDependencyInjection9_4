/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.sql.Date;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.angularjsdependencyinjection9_4.dbscenarios.AllTypes1;
import com.angularjsdependencyinjection9_4.dbscenarios.AllTypes1Id;
import com.angularjsdependencyinjection9_4.dbscenarios.service.AllTypes1Service;


/**
 * Controller object for domain model class AllTypes1.
 * @see AllTypes1
 */
@RestController("dbscenarios.AllTypes1Controller")
@Api(value = "AllTypes1Controller", description = "Exposes APIs to work with AllTypes1 resource.")
@RequestMapping("/dbscenarios/AllTypes1")
public class AllTypes1Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(AllTypes1Controller.class);

    @Autowired
	@Qualifier("dbscenarios.AllTypes1Service")
	private AllTypes1Service allTypes1Service;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new AllTypes1 instance.")
    @RequestMapping(method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AllTypes1 createAllTypes1(@RequestPart("wm_data_json") AllTypes1 allTypes1, @RequestPart(value = "byteaColumn", required = false) MultipartFile _byteaColumn) {
		LOGGER.debug("Create AllTypes1 with information: {}" , allTypes1);

    allTypes1.setByteaColumn(WMMultipartUtils.toByteArray(_byteaColumn));
		allTypes1 = allTypes1Service.create(allTypes1);
		LOGGER.debug("Created AllTypes1 with information: {}" , allTypes1);

	    return allTypes1;
	}

    @ApiOperation(value = "Returns the AllTypes1 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AllTypes1 getAllTypes1(@RequestParam("serialTypesColumn") Integer serialTypesColumn, @RequestParam("dateColumn") Date dateColumn, @RequestParam("byteaColumn") byte[] byteaColumn) {

        AllTypes1Id alltypes1Id = new AllTypes1Id();
        alltypes1Id.setSerialTypesColumn(serialTypesColumn);
        alltypes1Id.setDateColumn(dateColumn);
        alltypes1Id.setByteaColumn(byteaColumn);

        LOGGER.debug("Getting AllTypes1 with id: {}" , alltypes1Id);
        AllTypes1 allTypes1 = allTypes1Service.getById(alltypes1Id);
        LOGGER.debug("AllTypes1 details with id: {}" , allTypes1);

        return allTypes1;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in AllTypes1 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id/content/{fieldName}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public void getAllTypes1BLOBContent(@RequestParam("serialTypesColumn") Integer serialTypesColumn, @RequestParam("dateColumn") Date dateColumn, @RequestParam("byteaColumn") byte[] byteaColumn, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) {

        LOGGER.debug("Retrieves content for the given BLOB field {} in AllTypes1 instance" , fieldName);

        if(!WMRuntimeUtils.isLob(AllTypes1.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName +  " is not a valid BLOB type");
        }

        AllTypes1Id alltypes1Id = new AllTypes1Id();
        alltypes1Id.setSerialTypesColumn(serialTypesColumn);
        alltypes1Id.setDateColumn(dateColumn);
        alltypes1Id.setByteaColumn(byteaColumn);

        AllTypes1 allTypes1 = allTypes1Service.getById(alltypes1Id);
        WMMultipartUtils.buildHttpResponseForBlob(allTypes1, fieldName, httpServletRequest, httpServletResponse);
    }



    @ApiOperation(value = "Updates the AllTypes1 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AllTypes1 editAllTypes1(@RequestParam("serialTypesColumn") Integer serialTypesColumn, @RequestParam("dateColumn") Date dateColumn, @RequestParam("byteaColumn") byte[] byteaColumn, @RequestBody AllTypes1 allTypes1) {

        allTypes1.setSerialTypesColumn(serialTypesColumn);
        allTypes1.setDateColumn(dateColumn);
        allTypes1.setByteaColumn(byteaColumn);

        LOGGER.debug("AllTypes1 details with id is updated with: {}" , allTypes1);

        return allTypes1Service.update(allTypes1);
    }

    @ApiOperation(value = "Updates the AllTypes1 instance associated with the given composite-id.This API should be used when AllTypes1 instance fields that require multipart data.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AllTypes1 editAllTypes1(@RequestParam("serialTypesColumn") Integer serialTypesColumn, @RequestParam("dateColumn") Date dateColumn, @RequestParam("byteaColumn") byte[] byteaColumn, MultipartHttpServletRequest multipartHttpServletRequest) {
        return this.editAllTypes1AndMultiparts(serialTypesColumn, dateColumn, byteaColumn, multipartHttpServletRequest);
    }

    @ApiOperation(value = "Updates the AllTypes1 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT,  consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AllTypes1 editAllTypes1AndMultiparts(@RequestParam("serialTypesColumn") Integer serialTypesColumn, @RequestParam("dateColumn") Date dateColumn, @RequestParam("byteaColumn") byte[] byteaColumn, MultipartHttpServletRequest multipartHttpServletRequest) { 

        AllTypes1Id alltypes1Id = new AllTypes1Id();
        alltypes1Id.setSerialTypesColumn(serialTypesColumn);
        alltypes1Id.setDateColumn(dateColumn);
        alltypes1Id.setByteaColumn(byteaColumn);

        AllTypes1 newAllTypes1 = WMMultipartUtils.toObject(multipartHttpServletRequest, AllTypes1.class, "dbscenarios");
        AllTypes1 oldAllTypes1 = allTypes1Service.getById(alltypes1Id);

        WMMultipartUtils.updateLobsContent(oldAllTypes1, newAllTypes1);

        newAllTypes1.setSerialTypesColumn(serialTypesColumn);
        newAllTypes1.setDateColumn(dateColumn);
        newAllTypes1.setByteaColumn(byteaColumn);

        LOGGER.debug("AllTypes1 details with id is updated with: {}" , newAllTypes1);

        return allTypes1Service.update(newAllTypes1);
    }


    @ApiOperation(value = "Deletes the AllTypes1 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteAllTypes1(@RequestParam("serialTypesColumn") Integer serialTypesColumn, @RequestParam("dateColumn") Date dateColumn, @RequestParam("byteaColumn") byte[] byteaColumn) {

        AllTypes1Id alltypes1Id = new AllTypes1Id();
        alltypes1Id.setSerialTypesColumn(serialTypesColumn);
        alltypes1Id.setDateColumn(dateColumn);
        alltypes1Id.setByteaColumn(byteaColumn);

        LOGGER.debug("Deleting AllTypes1 with id: {}" , alltypes1Id);
        AllTypes1 allTypes1 = allTypes1Service.delete(alltypes1Id);

        return allTypes1 != null;
    }


    /**
     * @deprecated Use {@link #findAllTypes1s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of AllTypes1 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AllTypes1> searchAllTypes1sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering AllTypes1s list by query filter:{}", (Object) queryFilters);
        return allTypes1Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of AllTypes1 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AllTypes1> findAllTypes1s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AllTypes1s list by filter:", query);
        return allTypes1Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of AllTypes1 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AllTypes1> filterAllTypes1s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AllTypes1s list by filter", query);
        return allTypes1Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportAllTypes1s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return allTypes1Service.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportAllTypes1sAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = AllTypes1.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> allTypes1Service.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of AllTypes1 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countAllTypes1s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting AllTypes1s");
		return allTypes1Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getAllTypes1AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return allTypes1Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AllTypes1Service instance
	 */
	protected void setAllTypes1Service(AllTypes1Service service) {
		this.allTypes1Service = service;
	}

}