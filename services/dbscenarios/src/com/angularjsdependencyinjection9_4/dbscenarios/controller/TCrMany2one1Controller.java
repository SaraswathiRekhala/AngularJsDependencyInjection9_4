/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.angularjsdependencyinjection9_4.dbscenarios.TCrMany2one1;
import com.angularjsdependencyinjection9_4.dbscenarios.TCrMany2one1Id;
import com.angularjsdependencyinjection9_4.dbscenarios.TCrMany2one2;
import com.angularjsdependencyinjection9_4.dbscenarios.service.TCrMany2one1Service;


/**
 * Controller object for domain model class TCrMany2one1.
 * @see TCrMany2one1
 */
@RestController("dbscenarios.TCrMany2one1Controller")
@Api(value = "TCrMany2one1Controller", description = "Exposes APIs to work with TCrMany2one1 resource.")
@RequestMapping("/dbscenarios/TCrMany2one1")
public class TCrMany2one1Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(TCrMany2one1Controller.class);

    @Autowired
	@Qualifier("dbscenarios.TCrMany2one1Service")
	private TCrMany2one1Service tCrMany2one1Service;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TCrMany2one1 instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TCrMany2one1 createTCrMany2one1(@RequestBody TCrMany2one1 tcrMany2one1) {
		LOGGER.debug("Create TCrMany2one1 with information: {}" , tcrMany2one1);

		tcrMany2one1 = tCrMany2one1Service.create(tcrMany2one1);
		LOGGER.debug("Created TCrMany2one1 with information: {}" , tcrMany2one1);

	    return tcrMany2one1;
	}

    @ApiOperation(value = "Returns the TCrMany2one1 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TCrMany2one1 getTCrMany2one1(@RequestParam("longCol") Long longCol, @RequestParam("booleanCol") Boolean booleanCol, @RequestParam("stringCol") String stringCol, @RequestParam("byteId") Short byteId) {

        TCrMany2one1Id tcrmany2one1Id = new TCrMany2one1Id();
        tcrmany2one1Id.setLongCol(longCol);
        tcrmany2one1Id.setBooleanCol(booleanCol);
        tcrmany2one1Id.setStringCol(stringCol);
        tcrmany2one1Id.setByteId(byteId);

        LOGGER.debug("Getting TCrMany2one1 with id: {}" , tcrmany2one1Id);
        TCrMany2one1 tcrMany2one1 = tCrMany2one1Service.getById(tcrmany2one1Id);
        LOGGER.debug("TCrMany2one1 details with id: {}" , tcrMany2one1);

        return tcrMany2one1;
    }



    @ApiOperation(value = "Updates the TCrMany2one1 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TCrMany2one1 editTCrMany2one1(@RequestParam("longCol") Long longCol, @RequestParam("booleanCol") Boolean booleanCol, @RequestParam("stringCol") String stringCol, @RequestParam("byteId") Short byteId, @RequestBody TCrMany2one1 tcrMany2one1) {

        tcrMany2one1.setLongCol(longCol);
        tcrMany2one1.setBooleanCol(booleanCol);
        tcrMany2one1.setStringCol(stringCol);
        tcrMany2one1.setByteId(byteId);

        LOGGER.debug("TCrMany2one1 details with id is updated with: {}" , tcrMany2one1);

        return tCrMany2one1Service.update(tcrMany2one1);
    }


    @ApiOperation(value = "Deletes the TCrMany2one1 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTCrMany2one1(@RequestParam("longCol") Long longCol, @RequestParam("booleanCol") Boolean booleanCol, @RequestParam("stringCol") String stringCol, @RequestParam("byteId") Short byteId) {

        TCrMany2one1Id tcrmany2one1Id = new TCrMany2one1Id();
        tcrmany2one1Id.setLongCol(longCol);
        tcrmany2one1Id.setBooleanCol(booleanCol);
        tcrmany2one1Id.setStringCol(stringCol);
        tcrmany2one1Id.setByteId(byteId);

        LOGGER.debug("Deleting TCrMany2one1 with id: {}" , tcrmany2one1Id);
        TCrMany2one1 tcrMany2one1 = tCrMany2one1Service.delete(tcrmany2one1Id);

        return tcrMany2one1 != null;
    }


    /**
     * @deprecated Use {@link #findTCrMany2one1s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TCrMany2one1 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TCrMany2one1> searchTCrMany2one1sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TCrMany2one1s list by query filter:{}", (Object) queryFilters);
        return tCrMany2one1Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TCrMany2one1 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TCrMany2one1> findTCrMany2one1s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TCrMany2one1s list by filter:", query);
        return tCrMany2one1Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TCrMany2one1 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TCrMany2one1> filterTCrMany2one1s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TCrMany2one1s list by filter", query);
        return tCrMany2one1Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTCrMany2one1s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tCrMany2one1Service.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTCrMany2one1sAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TCrMany2one1.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tCrMany2one1Service.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TCrMany2one1 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTCrMany2one1s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TCrMany2one1s");
		return tCrMany2one1Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTCrMany2one1AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tCrMany2one1Service.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/composite-id/tcrMany2one2s", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the tcrMany2one2s instance associated with the given composite-id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TCrMany2one2> findAssociatedTcrMany2one2s(@RequestParam("longCol") Long longCol, @RequestParam("booleanCol") Boolean booleanCol, @RequestParam("stringCol") String stringCol, @RequestParam("byteId") Short byteId, Pageable pageable) {

        LOGGER.debug("Fetching all associated tcrMany2one2s");
        return tCrMany2one1Service.findAssociatedTcrMany2one2s(longCol, booleanCol, stringCol, byteId, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TCrMany2one1Service instance
	 */
	protected void setTCrMany2one1Service(TCrMany2one1Service service) {
		this.tCrMany2one1Service = service;
	}

}