/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.angularjsdependencyinjection9_4.dbscenarios.BlobTableEntity;
import com.angularjsdependencyinjection9_4.dbscenarios.service.BlobTableEntityService;


/**
 * Controller object for domain model class BlobTableEntity.
 * @see BlobTableEntity
 */
@RestController("dbscenarios.BlobTableEntityController")
@Api(value = "BlobTableEntityController", description = "Exposes APIs to work with BlobTableEntity resource.")
@RequestMapping("/dbscenarios/BlobTableEntity")
public class BlobTableEntityController {

    private static final Logger LOGGER = LoggerFactory.getLogger(BlobTableEntityController.class);

    @Autowired
	@Qualifier("dbscenarios.BlobTableEntityService")
	private BlobTableEntityService blobTableEntityService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new BlobTableEntity instance.")
    @RequestMapping(method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public BlobTableEntity createBlobTableEntity(@RequestPart("wm_data_json") BlobTableEntity blobTableEntity, @RequestPart(value = "blobcol", required = false) MultipartFile _blobcol) {
		LOGGER.debug("Create BlobTableEntity with information: {}" , blobTableEntity);

    blobTableEntity.setBlobcol(WMMultipartUtils.toByteArray(_blobcol));
		blobTableEntity = blobTableEntityService.create(blobTableEntity);
		LOGGER.debug("Created BlobTableEntity with information: {}" , blobTableEntity);

	    return blobTableEntity;
	}

    @ApiOperation(value = "Returns the BlobTableEntity instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public BlobTableEntity getBlobTableEntity(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting BlobTableEntity with id: {}" , id);

        BlobTableEntity foundBlobTableEntity = blobTableEntityService.getById(id);
        LOGGER.debug("BlobTableEntity details with id: {}" , foundBlobTableEntity);

        return foundBlobTableEntity;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in BlobTableEntity instance" )
    @RequestMapping(value = "/{id}/content/{fieldName}", method = RequestMethod.GET, produces="application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DownloadResponse getBlobTableEntityBLOBContent(@PathVariable("id") Integer id, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, @RequestParam(value="download", defaultValue = "false") boolean download) {

        LOGGER.debug("Retrieves content for the given BLOB field {} in BlobTableEntity instance" , fieldName);

        if(!WMRuntimeUtils.isLob(BlobTableEntity.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName + " is not a valid BLOB type");
        }
        BlobTableEntity blobTableEntity = blobTableEntityService.getById(id);

        return WMMultipartUtils.buildDownloadResponseForBlob(blobTableEntity, fieldName, httpServletRequest, download);
    }

    @ApiOperation(value = "Updates the BlobTableEntity instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public BlobTableEntity editBlobTableEntity(@PathVariable("id") Integer id, @RequestBody BlobTableEntity blobTableEntity) {
        LOGGER.debug("Editing BlobTableEntity with id: {}" , blobTableEntity.getId());

        blobTableEntity.setId(id);
        blobTableEntity = blobTableEntityService.update(blobTableEntity);
        LOGGER.debug("BlobTableEntity details with id: {}" , blobTableEntity);

        return blobTableEntity;
    }

    @ApiOperation(value = "Updates the BlobTableEntity instance associated with the given id.This API should be used when BlobTableEntity instance fields that require multipart data.") 
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.POST, consumes = {"multipart/form-data"})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public BlobTableEntity editBlobTableEntity(@PathVariable("id") Integer id, MultipartHttpServletRequest multipartHttpServletRequest) {
        BlobTableEntity newBlobTableEntity = WMMultipartUtils.toObject(multipartHttpServletRequest, BlobTableEntity.class, "dbscenarios");
        newBlobTableEntity.setId(id);

        BlobTableEntity oldBlobTableEntity = blobTableEntityService.getById(id);
        WMMultipartUtils.updateLobsContent(oldBlobTableEntity, newBlobTableEntity);
        LOGGER.debug("Updating BlobTableEntity with information: {}" , newBlobTableEntity);

        return blobTableEntityService.update(newBlobTableEntity);
    }

    @ApiOperation(value = "Deletes the BlobTableEntity instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteBlobTableEntity(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting BlobTableEntity with id: {}" , id);

        BlobTableEntity deletedBlobTableEntity = blobTableEntityService.delete(id);

        return deletedBlobTableEntity != null;
    }

    /**
     * @deprecated Use {@link #findBlobTableEntities(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of BlobTableEntity instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<BlobTableEntity> searchBlobTableEntitiesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering BlobTableEntities list by query filter:{}", (Object) queryFilters);
        return blobTableEntityService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of BlobTableEntity instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<BlobTableEntity> findBlobTableEntities(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering BlobTableEntities list by filter:", query);
        return blobTableEntityService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of BlobTableEntity instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<BlobTableEntity> filterBlobTableEntities(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering BlobTableEntities list by filter", query);
        return blobTableEntityService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportBlobTableEntities(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return blobTableEntityService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportBlobTableEntitiesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = BlobTableEntity.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> blobTableEntityService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of BlobTableEntity instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countBlobTableEntities( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting BlobTableEntities");
		return blobTableEntityService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getBlobTableEntityAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return blobTableEntityService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service BlobTableEntityService instance
	 */
	protected void setBlobTableEntityService(BlobTableEntityService service) {
		this.blobTableEntityService = service;
	}

}