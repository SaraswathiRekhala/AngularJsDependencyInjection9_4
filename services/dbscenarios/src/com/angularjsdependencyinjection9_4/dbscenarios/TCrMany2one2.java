/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.sql.Timestamp;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.Id;
import javax.persistence.IdClass;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonProperty.Access;

/**
 * TCrMany2one2 generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`T_CR_MANY2ONE2`")
@IdClass(TCrMany2one2Id.class)
public class TCrMany2one2 implements Serializable {

    private String stringCol;
    private Short byteId;
    private Long longCol;
    private Boolean booleanCol;
    @JsonProperty(access = Access.READ_ONLY)
    private byte[] blobCol;
    private Timestamp timestampCol;
    private TCrMany2one1 tcrMany2one1;

    @Id
    @Column(name = "`STRING_COL`", nullable = false, length = 255)
    public String getStringCol() {
        return this.stringCol;
    }

    public void setStringCol(String stringCol) {
        this.stringCol = stringCol;
    }

    @Id
    @Column(name = "`BYTE_ID`", nullable = false, scale = 0, precision = 5)
    public Short getByteId() {
        return this.byteId;
    }

    public void setByteId(Short byteId) {
        this.byteId = byteId;
    }

    @Id
    @Column(name = "`LONG_COL`", nullable = false, scale = 0, precision = 19)
    public Long getLongCol() {
        return this.longCol;
    }

    public void setLongCol(Long longCol) {
        this.longCol = longCol;
    }

    @Column(name = "`BOOLEAN COL`", nullable = true)
    public Boolean getBooleanCol() {
        return this.booleanCol;
    }

    public void setBooleanCol(Boolean booleanCol) {
        this.booleanCol = booleanCol;
    }

    @Column(name = "`BLOB COL`", nullable = true)
    public byte[] getBlobCol() {
        return this.blobCol;
    }

    public void setBlobCol(byte[] blobCol) {
        this.blobCol = blobCol;
    }

    @Column(name = "`TIMESTAMP COL`", nullable = true)
    public Timestamp getTimestampCol() {
        return this.timestampCol;
    }

    public void setTimestampCol(Timestamp timestampCol) {
        this.timestampCol = timestampCol;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumns(value = {
            @JoinColumn(name = "`BYTE_ID`", referencedColumnName = "`BYTE-ID`", insertable = false, updatable = false),
            @JoinColumn(name = "`STRING_COL`", referencedColumnName = "`STRING-COL`", insertable = false, updatable = false),
            @JoinColumn(name = "`LONG_COL`", referencedColumnName = "`LONG-COL`", insertable = false, updatable = false),
            @JoinColumn(name = "`BOOLEAN COL`", referencedColumnName = "`BOOLEAN COL`", insertable = false, updatable = false)},
        foreignKey = @ForeignKey(name = "`FK_T_CR_MANY2ONE1_TO_T_ChTJ86`"))
    @Fetch(FetchMode.JOIN)
    public TCrMany2one1 getTcrMany2one1() {
        return this.tcrMany2one1;
    }

    public void setTcrMany2one1(TCrMany2one1 tcrMany2one1) {
        if(tcrMany2one1 != null) {
            this.byteId = tcrMany2one1.getByteId();
            this.stringCol = tcrMany2one1.getStringCol();
            this.longCol = tcrMany2one1.getLongCol();
            this.booleanCol = tcrMany2one1.getBooleanCol();
        }

        this.tcrMany2one1 = tcrMany2one1;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof TCrMany2one2)) return false;
        final TCrMany2one2 tcrMany2one2 = (TCrMany2one2) o;
        return Objects.equals(getStringCol(), tcrMany2one2.getStringCol()) &&
                Objects.equals(getByteId(), tcrMany2one2.getByteId()) &&
                Objects.equals(getLongCol(), tcrMany2one2.getLongCol());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getStringCol(),
                getByteId(),
                getLongCol());
    }
}