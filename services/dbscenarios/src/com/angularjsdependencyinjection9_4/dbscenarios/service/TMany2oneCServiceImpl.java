/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.angularjsdependencyinjection9_4.dbscenarios.TMany2oneC;
import com.angularjsdependencyinjection9_4.dbscenarios.TMany2oneP;


/**
 * ServiceImpl object for domain model class TMany2oneC.
 *
 * @see TMany2oneC
 */
@Service("dbscenarios.TMany2oneCService")
@Validated
public class TMany2oneCServiceImpl implements TMany2oneCService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TMany2oneCServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("dbscenarios.TMany2onePService")
    private TMany2onePService tMany2onePService;

    @Autowired
    @Qualifier("dbscenarios.TMany2oneCDao")
    private WMGenericDao<TMany2oneC, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TMany2oneC, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public TMany2oneC create(TMany2oneC tmany2oneC) {
        LOGGER.debug("Creating a new TMany2oneC with information: {}", tmany2oneC);

        TMany2oneC tmany2oneCCreated = this.wmGenericDao.create(tmany2oneC);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tmany2oneCCreated);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public TMany2oneC getById(Integer tmany2onecId) {
        LOGGER.debug("Finding TMany2oneC by id: {}", tmany2onecId);
        return this.wmGenericDao.findById(tmany2onecId);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public TMany2oneC findById(Integer tmany2onecId) {
        LOGGER.debug("Finding TMany2oneC by id: {}", tmany2onecId);
        try {
            return this.wmGenericDao.findById(tmany2onecId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TMany2oneC found with id: {}", tmany2onecId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public List<TMany2oneC> findByMultipleIds(List<Integer> tmany2onecIds, boolean orderedReturn) {
        LOGGER.debug("Finding TMany2oneCs by ids: {}", tmany2onecIds);

        return this.wmGenericDao.findByMultipleIds(tmany2onecIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dbscenariosTransactionManager")
    @Override
    public TMany2oneC update(TMany2oneC tmany2oneC) {
        LOGGER.debug("Updating TMany2oneC with information: {}", tmany2oneC);

        this.wmGenericDao.update(tmany2oneC);
        this.wmGenericDao.refresh(tmany2oneC);

        return tmany2oneC;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public TMany2oneC delete(Integer tmany2onecId) {
        LOGGER.debug("Deleting TMany2oneC with id: {}", tmany2onecId);
        TMany2oneC deleted = this.wmGenericDao.findById(tmany2onecId);
        if (deleted == null) {
            LOGGER.debug("No TMany2oneC found with id: {}", tmany2onecId);
            throw new EntityNotFoundException(String.valueOf(tmany2onecId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public void delete(TMany2oneC tmany2oneC) {
        LOGGER.debug("Deleting TMany2oneC with {}", tmany2oneC);
        this.wmGenericDao.delete(tmany2oneC);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<TMany2oneC> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TMany2oneCs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<TMany2oneC> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TMany2oneCs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbscenarios for table TMany2oneC to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service dbscenarios for table TMany2oneC to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<TMany2oneP> findAssociatedTmany2onePs(Integer bigintId, Pageable pageable) {
        LOGGER.debug("Fetching all associated tmany2onePs");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tmany2oneC.bigintId = '" + bigintId + "'");

        return tMany2onePService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service TMany2onePService instance
     */
    protected void setTMany2onePService(TMany2onePService service) {
        this.tMany2onePService = service;
    }

}