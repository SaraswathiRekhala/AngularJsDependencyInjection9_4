/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.math.BigDecimal;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.angularjsdependencyinjection9_4.dbscenarios.TCrOne2one1;
import com.angularjsdependencyinjection9_4.dbscenarios.TCrOne2one2;
import com.angularjsdependencyinjection9_4.dbscenarios.TCrOne2one2Id;


/**
 * ServiceImpl object for domain model class TCrOne2one2.
 *
 * @see TCrOne2one2
 */
@Service("dbscenarios.TCrOne2one2Service")
@Validated
public class TCrOne2one2ServiceImpl implements TCrOne2one2Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(TCrOne2one2ServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("dbscenarios.TCrOne2one1Service")
    private TCrOne2one1Service tCrOne2one1Service;

    @Autowired
    @Qualifier("dbscenarios.TCrOne2one2Dao")
    private WMGenericDao<TCrOne2one2, TCrOne2one2Id> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TCrOne2one2, TCrOne2one2Id> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public TCrOne2one2 create(TCrOne2one2 tcrOne2one2) {
        LOGGER.debug("Creating a new TCrOne2one2 with information: {}", tcrOne2one2);

        TCrOne2one2 tcrOne2one2Created = this.wmGenericDao.create(tcrOne2one2);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tcrOne2one2Created);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public TCrOne2one2 getById(TCrOne2one2Id tcrone2one2Id) {
        LOGGER.debug("Finding TCrOne2one2 by id: {}", tcrone2one2Id);
        return this.wmGenericDao.findById(tcrone2one2Id);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public TCrOne2one2 findById(TCrOne2one2Id tcrone2one2Id) {
        LOGGER.debug("Finding TCrOne2one2 by id: {}", tcrone2one2Id);
        try {
            return this.wmGenericDao.findById(tcrone2one2Id);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TCrOne2one2 found with id: {}", tcrone2one2Id, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public List<TCrOne2one2> findByMultipleIds(List<TCrOne2one2Id> tcrone2one2Ids, boolean orderedReturn) {
        LOGGER.debug("Finding TCrOne2one2s by ids: {}", tcrone2one2Ids);

        return this.wmGenericDao.findByMultipleIds(tcrone2one2Ids, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dbscenariosTransactionManager")
    @Override
    public TCrOne2one2 update(TCrOne2one2 tcrOne2one2) {
        LOGGER.debug("Updating TCrOne2one2 with information: {}", tcrOne2one2);

        this.wmGenericDao.update(tcrOne2one2);
        this.wmGenericDao.refresh(tcrOne2one2);

        return tcrOne2one2;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public TCrOne2one2 delete(TCrOne2one2Id tcrone2one2Id) {
        LOGGER.debug("Deleting TCrOne2one2 with id: {}", tcrone2one2Id);
        TCrOne2one2 deleted = this.wmGenericDao.findById(tcrone2one2Id);
        if (deleted == null) {
            LOGGER.debug("No TCrOne2one2 found with id: {}", tcrone2one2Id);
            throw new EntityNotFoundException(String.valueOf(tcrone2one2Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public void delete(TCrOne2one2 tcrOne2one2) {
        LOGGER.debug("Deleting TCrOne2one2 with {}", tcrOne2one2);
        this.wmGenericDao.delete(tcrOne2one2);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<TCrOne2one2> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TCrOne2one2s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<TCrOne2one2> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TCrOne2one2s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbscenarios for table TCrOne2one2 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service dbscenarios for table TCrOne2one2 to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<TCrOne2one1> findAssociatedTcrOne2one1s(BigDecimal bigdecCol, String stringCol, Integer intId, String charCol, Pageable pageable) {
        LOGGER.debug("Fetching all associated tcrOne2one1s");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tcrOne2one2.bigdecCol = '" + bigdecCol + "'");
        queryBuilder.append(" and ");
        queryBuilder.append("tcrOne2one2.stringCol = '" + stringCol + "'");
        queryBuilder.append(" and ");
        queryBuilder.append("tcrOne2one2.intId = '" + intId + "'");
        queryBuilder.append(" and ");
        queryBuilder.append("tcrOne2one2.charCol = '" + charCol + "'");

        return tCrOne2one1Service.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service TCrOne2one1Service instance
     */
    protected void setTCrOne2one1Service(TCrOne2one1Service service) {
        this.tCrOne2one1Service = service;
    }

}