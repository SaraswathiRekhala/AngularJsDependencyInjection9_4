/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.angularjsdependencyinjection9_4.dbscenarios.TMany2oneP;


/**
 * ServiceImpl object for domain model class TMany2oneP.
 *
 * @see TMany2oneP
 */
@Service("dbscenarios.TMany2onePService")
@Validated
public class TMany2onePServiceImpl implements TMany2onePService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TMany2onePServiceImpl.class);


    @Autowired
    @Qualifier("dbscenarios.TMany2onePDao")
    private WMGenericDao<TMany2oneP, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TMany2oneP, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public TMany2oneP create(TMany2oneP tmany2oneP) {
        LOGGER.debug("Creating a new TMany2oneP with information: {}", tmany2oneP);

        TMany2oneP tmany2onePCreated = this.wmGenericDao.create(tmany2oneP);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tmany2onePCreated);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public TMany2oneP getById(Integer tmany2onepId) {
        LOGGER.debug("Finding TMany2oneP by id: {}", tmany2onepId);
        return this.wmGenericDao.findById(tmany2onepId);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public TMany2oneP findById(Integer tmany2onepId) {
        LOGGER.debug("Finding TMany2oneP by id: {}", tmany2onepId);
        try {
            return this.wmGenericDao.findById(tmany2onepId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TMany2oneP found with id: {}", tmany2onepId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public List<TMany2oneP> findByMultipleIds(List<Integer> tmany2onepIds, boolean orderedReturn) {
        LOGGER.debug("Finding TMany2onePs by ids: {}", tmany2onepIds);

        return this.wmGenericDao.findByMultipleIds(tmany2onepIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dbscenariosTransactionManager")
    @Override
    public TMany2oneP update(TMany2oneP tmany2oneP) {
        LOGGER.debug("Updating TMany2oneP with information: {}", tmany2oneP);

        this.wmGenericDao.update(tmany2oneP);
        this.wmGenericDao.refresh(tmany2oneP);

        return tmany2oneP;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public TMany2oneP delete(Integer tmany2onepId) {
        LOGGER.debug("Deleting TMany2oneP with id: {}", tmany2onepId);
        TMany2oneP deleted = this.wmGenericDao.findById(tmany2onepId);
        if (deleted == null) {
            LOGGER.debug("No TMany2oneP found with id: {}", tmany2onepId);
            throw new EntityNotFoundException(String.valueOf(tmany2onepId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public void delete(TMany2oneP tmany2oneP) {
        LOGGER.debug("Deleting TMany2oneP with {}", tmany2oneP);
        this.wmGenericDao.delete(tmany2oneP);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<TMany2oneP> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TMany2onePs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<TMany2oneP> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TMany2onePs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbscenarios for table TMany2oneP to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service dbscenarios for table TMany2oneP to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}