/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.angularjsdependencyinjection9_4.dbscenarios.TUcComposte1;


/**
 * ServiceImpl object for domain model class TUcComposte1.
 *
 * @see TUcComposte1
 */
@Service("dbscenarios.TUcComposte1Service")
@Validated
public class TUcComposte1ServiceImpl implements TUcComposte1Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(TUcComposte1ServiceImpl.class);


    @Autowired
    @Qualifier("dbscenarios.TUcComposte1Dao")
    private WMGenericDao<TUcComposte1, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TUcComposte1, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public TUcComposte1 create(TUcComposte1 tucComposte1) {
        LOGGER.debug("Creating a new TUcComposte1 with information: {}", tucComposte1);

        TUcComposte1 tucComposte1Created = this.wmGenericDao.create(tucComposte1);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tucComposte1Created);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public TUcComposte1 getById(Integer tuccomposte1Id) {
        LOGGER.debug("Finding TUcComposte1 by id: {}", tuccomposte1Id);
        return this.wmGenericDao.findById(tuccomposte1Id);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public TUcComposte1 findById(Integer tuccomposte1Id) {
        LOGGER.debug("Finding TUcComposte1 by id: {}", tuccomposte1Id);
        try {
            return this.wmGenericDao.findById(tuccomposte1Id);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TUcComposte1 found with id: {}", tuccomposte1Id, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public List<TUcComposte1> findByMultipleIds(List<Integer> tuccomposte1Ids, boolean orderedReturn) {
        LOGGER.debug("Finding TUcComposte1s by ids: {}", tuccomposte1Ids);

        return this.wmGenericDao.findByMultipleIds(tuccomposte1Ids, orderedReturn);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public TUcComposte1 getByByteColAndStringCol(Short byteCol, String stringCol) {
        Map<String, Object> byteColAndStringColMap = new HashMap<>();
        byteColAndStringColMap.put("byteCol", byteCol);
        byteColAndStringColMap.put("stringCol", stringCol);

        LOGGER.debug("Finding TUcComposte1 by unique keys: {}", byteColAndStringColMap);
        return this.wmGenericDao.findByUniqueKey(byteColAndStringColMap);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public TUcComposte1 getByLongColAndBigintColAndCharCol(Long longCol, Long bigintCol, String charCol) {
        Map<String, Object> longColAndBigintColAndCharColMap = new HashMap<>();
        longColAndBigintColAndCharColMap.put("longCol", longCol);
        longColAndBigintColAndCharColMap.put("bigintCol", bigintCol);
        longColAndBigintColAndCharColMap.put("charCol", charCol);

        LOGGER.debug("Finding TUcComposte1 by unique keys: {}", longColAndBigintColAndCharColMap);
        return this.wmGenericDao.findByUniqueKey(longColAndBigintColAndCharColMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dbscenariosTransactionManager")
    @Override
    public TUcComposte1 update(TUcComposte1 tucComposte1) {
        LOGGER.debug("Updating TUcComposte1 with information: {}", tucComposte1);

        this.wmGenericDao.update(tucComposte1);
        this.wmGenericDao.refresh(tucComposte1);

        return tucComposte1;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public TUcComposte1 delete(Integer tuccomposte1Id) {
        LOGGER.debug("Deleting TUcComposte1 with id: {}", tuccomposte1Id);
        TUcComposte1 deleted = this.wmGenericDao.findById(tuccomposte1Id);
        if (deleted == null) {
            LOGGER.debug("No TUcComposte1 found with id: {}", tuccomposte1Id);
            throw new EntityNotFoundException(String.valueOf(tuccomposte1Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public void delete(TUcComposte1 tucComposte1) {
        LOGGER.debug("Deleting TUcComposte1 with {}", tucComposte1);
        this.wmGenericDao.delete(tucComposte1);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<TUcComposte1> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TUcComposte1s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<TUcComposte1> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TUcComposte1s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbscenarios for table TUcComposte1 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service dbscenarios for table TUcComposte1 to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}