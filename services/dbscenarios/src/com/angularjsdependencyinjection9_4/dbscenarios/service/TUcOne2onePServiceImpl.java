/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.angularjsdependencyinjection9_4.dbscenarios.TUcOne2oneP;


/**
 * ServiceImpl object for domain model class TUcOne2oneP.
 *
 * @see TUcOne2oneP
 */
@Service("dbscenarios.TUcOne2onePService")
@Validated
public class TUcOne2onePServiceImpl implements TUcOne2onePService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TUcOne2onePServiceImpl.class);


    @Autowired
    @Qualifier("dbscenarios.TUcOne2onePDao")
    private WMGenericDao<TUcOne2oneP, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TUcOne2oneP, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public TUcOne2oneP create(TUcOne2oneP tucOne2oneP) {
        LOGGER.debug("Creating a new TUcOne2oneP with information: {}", tucOne2oneP);

        TUcOne2oneP tucOne2onePCreated = this.wmGenericDao.create(tucOne2oneP);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tucOne2onePCreated);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public TUcOne2oneP getById(Integer tucone2onepId) {
        LOGGER.debug("Finding TUcOne2oneP by id: {}", tucone2onepId);
        return this.wmGenericDao.findById(tucone2onepId);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public TUcOne2oneP findById(Integer tucone2onepId) {
        LOGGER.debug("Finding TUcOne2oneP by id: {}", tucone2onepId);
        try {
            return this.wmGenericDao.findById(tucone2onepId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TUcOne2oneP found with id: {}", tucone2onepId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public List<TUcOne2oneP> findByMultipleIds(List<Integer> tucone2onepIds, boolean orderedReturn) {
        LOGGER.debug("Finding TUcOne2onePs by ids: {}", tucone2onepIds);

        return this.wmGenericDao.findByMultipleIds(tucone2onepIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public TUcOne2oneP getByStringCol(String stringCol) {
        Map<String, Object> stringColMap = new HashMap<>();
        stringColMap.put("stringCol", stringCol);

        LOGGER.debug("Finding TUcOne2oneP by unique keys: {}", stringColMap);
        return this.wmGenericDao.findByUniqueKey(stringColMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dbscenariosTransactionManager")
    @Override
    public TUcOne2oneP update(TUcOne2oneP tucOne2oneP) {
        LOGGER.debug("Updating TUcOne2oneP with information: {}", tucOne2oneP);

        this.wmGenericDao.update(tucOne2oneP);
        this.wmGenericDao.refresh(tucOne2oneP);

        return tucOne2oneP;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public TUcOne2oneP delete(Integer tucone2onepId) {
        LOGGER.debug("Deleting TUcOne2oneP with id: {}", tucone2onepId);
        TUcOne2oneP deleted = this.wmGenericDao.findById(tucone2onepId);
        if (deleted == null) {
            LOGGER.debug("No TUcOne2oneP found with id: {}", tucone2onepId);
            throw new EntityNotFoundException(String.valueOf(tucone2onepId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public void delete(TUcOne2oneP tucOne2oneP) {
        LOGGER.debug("Deleting TUcOne2oneP with {}", tucOne2oneP);
        this.wmGenericDao.delete(tucOne2oneP);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<TUcOne2oneP> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TUcOne2onePs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<TUcOne2oneP> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TUcOne2onePs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbscenarios for table TUcOne2oneP to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service dbscenarios for table TUcOne2oneP to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}