/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.angularjsdependencyinjection9_4.dbscenarios.SpCharInSeq;


/**
 * ServiceImpl object for domain model class SpCharInSeq.
 *
 * @see SpCharInSeq
 */
@Service("dbscenarios.SpCharInSeqService")
@Validated
public class SpCharInSeqServiceImpl implements SpCharInSeqService {

    private static final Logger LOGGER = LoggerFactory.getLogger(SpCharInSeqServiceImpl.class);


    @Autowired
    @Qualifier("dbscenarios.SpCharInSeqDao")
    private WMGenericDao<SpCharInSeq, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<SpCharInSeq, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public SpCharInSeq create(SpCharInSeq spCharInSeq) {
        LOGGER.debug("Creating a new SpCharInSeq with information: {}", spCharInSeq);

        SpCharInSeq spCharInSeqCreated = this.wmGenericDao.create(spCharInSeq);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(spCharInSeqCreated);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public SpCharInSeq getById(Integer spcharinseqId) {
        LOGGER.debug("Finding SpCharInSeq by id: {}", spcharinseqId);
        return this.wmGenericDao.findById(spcharinseqId);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public SpCharInSeq findById(Integer spcharinseqId) {
        LOGGER.debug("Finding SpCharInSeq by id: {}", spcharinseqId);
        try {
            return this.wmGenericDao.findById(spcharinseqId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No SpCharInSeq found with id: {}", spcharinseqId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public List<SpCharInSeq> findByMultipleIds(List<Integer> spcharinseqIds, boolean orderedReturn) {
        LOGGER.debug("Finding SpCharInSeqs by ids: {}", spcharinseqIds);

        return this.wmGenericDao.findByMultipleIds(spcharinseqIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dbscenariosTransactionManager")
    @Override
    public SpCharInSeq update(SpCharInSeq spCharInSeq) {
        LOGGER.debug("Updating SpCharInSeq with information: {}", spCharInSeq);

        this.wmGenericDao.update(spCharInSeq);
        this.wmGenericDao.refresh(spCharInSeq);

        return spCharInSeq;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public SpCharInSeq delete(Integer spcharinseqId) {
        LOGGER.debug("Deleting SpCharInSeq with id: {}", spcharinseqId);
        SpCharInSeq deleted = this.wmGenericDao.findById(spcharinseqId);
        if (deleted == null) {
            LOGGER.debug("No SpCharInSeq found with id: {}", spcharinseqId);
            throw new EntityNotFoundException(String.valueOf(spcharinseqId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public void delete(SpCharInSeq spCharInSeq) {
        LOGGER.debug("Deleting SpCharInSeq with {}", spCharInSeq);
        this.wmGenericDao.delete(spCharInSeq);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<SpCharInSeq> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all SpCharInSeqs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<SpCharInSeq> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all SpCharInSeqs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbscenarios for table SpCharInSeq to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service dbscenarios for table SpCharInSeq to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}