/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.math.BigDecimal;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.angularjsdependencyinjection9_4.dbscenarios.TCrOne2one1;
import com.angularjsdependencyinjection9_4.dbscenarios.TCrOne2one2;
import com.angularjsdependencyinjection9_4.dbscenarios.TCrOne2one2Id;

/**
 * Service object for domain model class {@link TCrOne2one2}.
 */
public interface TCrOne2one2Service {

    /**
     * Creates a new TCrOne2one2. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TCrOne2one2 if any.
     *
     * @param tcrOne2one2 Details of the TCrOne2one2 to be created; value cannot be null.
     * @return The newly created TCrOne2one2.
     */
    TCrOne2one2 create(@Valid TCrOne2one2 tcrOne2one2);


	/**
     * Returns TCrOne2one2 by given id if exists.
     *
     * @param tcrone2one2Id The id of the TCrOne2one2 to get; value cannot be null.
     * @return TCrOne2one2 associated with the given tcrone2one2Id.
	 * @throws EntityNotFoundException If no TCrOne2one2 is found.
     */
    TCrOne2one2 getById(TCrOne2one2Id tcrone2one2Id);

    /**
     * Find and return the TCrOne2one2 by given id if exists, returns null otherwise.
     *
     * @param tcrone2one2Id The id of the TCrOne2one2 to get; value cannot be null.
     * @return TCrOne2one2 associated with the given tcrone2one2Id.
     */
    TCrOne2one2 findById(TCrOne2one2Id tcrone2one2Id);

	/**
     * Find and return the list of TCrOne2one2s by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param tcrone2one2Ids The id's of the TCrOne2one2 to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return TCrOne2one2s associated with the given tcrone2one2Ids.
     */
    List<TCrOne2one2> findByMultipleIds(List<TCrOne2one2Id> tcrone2one2Ids, boolean orderedReturn);


    /**
     * Updates the details of an existing TCrOne2one2. It replaces all fields of the existing TCrOne2one2 with the given tcrOne2one2.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TCrOne2one2 if any.
     *
     * @param tcrOne2one2 The details of the TCrOne2one2 to be updated; value cannot be null.
     * @return The updated TCrOne2one2.
     * @throws EntityNotFoundException if no TCrOne2one2 is found with given input.
     */
    TCrOne2one2 update(@Valid TCrOne2one2 tcrOne2one2);

    /**
     * Deletes an existing TCrOne2one2 with the given id.
     *
     * @param tcrone2one2Id The id of the TCrOne2one2 to be deleted; value cannot be null.
     * @return The deleted TCrOne2one2.
     * @throws EntityNotFoundException if no TCrOne2one2 found with the given id.
     */
    TCrOne2one2 delete(TCrOne2one2Id tcrone2one2Id);

    /**
     * Deletes an existing TCrOne2one2 with the given object.
     *
     * @param tcrOne2one2 The instance of the TCrOne2one2 to be deleted; value cannot be null.
     */
    void delete(TCrOne2one2 tcrOne2one2);

    /**
     * Find all TCrOne2one2s matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TCrOne2one2s.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<TCrOne2one2> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all TCrOne2one2s matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TCrOne2one2s.
     *
     * @see Pageable
     * @see Page
     */
    Page<TCrOne2one2> findAll(String query, Pageable pageable);

    /**
     * Exports all TCrOne2one2s matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all TCrOne2one2s matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the TCrOne2one2s in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the TCrOne2one2.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated tcrOne2one1s for given TCrOne2one2 id.
     *
     * @param bigdecCol value of bigdecCol; value cannot be null
     * @param stringCol value of stringCol; value cannot be null
     * @param intId value of intId; value cannot be null
     * @param charCol value of charCol; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated TCrOne2one1 instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<TCrOne2one1> findAssociatedTcrOne2one1s(BigDecimal bigdecCol, String stringCol, Integer intId, String charCol, Pageable pageable);

}