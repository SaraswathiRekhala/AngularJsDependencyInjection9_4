/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.angularjsdependencyinjection9_4.dbscenarios.BigintSequence;

/**
 * Service object for domain model class {@link BigintSequence}.
 */
public interface BigintSequenceService {

    /**
     * Creates a new BigintSequence. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on BigintSequence if any.
     *
     * @param bigintSequence Details of the BigintSequence to be created; value cannot be null.
     * @return The newly created BigintSequence.
     */
    BigintSequence create(@Valid BigintSequence bigintSequence);


	/**
     * Returns BigintSequence by given id if exists.
     *
     * @param bigintsequenceId The id of the BigintSequence to get; value cannot be null.
     * @return BigintSequence associated with the given bigintsequenceId.
	 * @throws EntityNotFoundException If no BigintSequence is found.
     */
    BigintSequence getById(Long bigintsequenceId);

    /**
     * Find and return the BigintSequence by given id if exists, returns null otherwise.
     *
     * @param bigintsequenceId The id of the BigintSequence to get; value cannot be null.
     * @return BigintSequence associated with the given bigintsequenceId.
     */
    BigintSequence findById(Long bigintsequenceId);

	/**
     * Find and return the list of BigintSequences by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param bigintsequenceIds The id's of the BigintSequence to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return BigintSequences associated with the given bigintsequenceIds.
     */
    List<BigintSequence> findByMultipleIds(List<Long> bigintsequenceIds, boolean orderedReturn);


    /**
     * Updates the details of an existing BigintSequence. It replaces all fields of the existing BigintSequence with the given bigintSequence.
     *
     * This method overrides the input field values using Server side or database managed properties defined on BigintSequence if any.
     *
     * @param bigintSequence The details of the BigintSequence to be updated; value cannot be null.
     * @return The updated BigintSequence.
     * @throws EntityNotFoundException if no BigintSequence is found with given input.
     */
    BigintSequence update(@Valid BigintSequence bigintSequence);

    /**
     * Deletes an existing BigintSequence with the given id.
     *
     * @param bigintsequenceId The id of the BigintSequence to be deleted; value cannot be null.
     * @return The deleted BigintSequence.
     * @throws EntityNotFoundException if no BigintSequence found with the given id.
     */
    BigintSequence delete(Long bigintsequenceId);

    /**
     * Deletes an existing BigintSequence with the given object.
     *
     * @param bigintSequence The instance of the BigintSequence to be deleted; value cannot be null.
     */
    void delete(BigintSequence bigintSequence);

    /**
     * Find all BigintSequences matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching BigintSequences.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<BigintSequence> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all BigintSequences matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching BigintSequences.
     *
     * @see Pageable
     * @see Page
     */
    Page<BigintSequence> findAll(String query, Pageable pageable);

    /**
     * Exports all BigintSequences matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all BigintSequences matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the BigintSequences in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the BigintSequence.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}