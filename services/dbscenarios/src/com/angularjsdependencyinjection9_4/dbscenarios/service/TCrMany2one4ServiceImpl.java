/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.sql.Date;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.angularjsdependencyinjection9_4.dbscenarios.TCrMany2one4;


/**
 * ServiceImpl object for domain model class TCrMany2one4.
 *
 * @see TCrMany2one4
 */
@Service("dbscenarios.TCrMany2one4Service")
@Validated
public class TCrMany2one4ServiceImpl implements TCrMany2one4Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(TCrMany2one4ServiceImpl.class);


    @Autowired
    @Qualifier("dbscenarios.TCrMany2one4Dao")
    private WMGenericDao<TCrMany2one4, Date> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TCrMany2one4, Date> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public TCrMany2one4 create(TCrMany2one4 tcrMany2one4) {
        LOGGER.debug("Creating a new TCrMany2one4 with information: {}", tcrMany2one4);

        TCrMany2one4 tcrMany2one4Created = this.wmGenericDao.create(tcrMany2one4);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tcrMany2one4Created);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public TCrMany2one4 getById(Date tcrmany2one4Id) {
        LOGGER.debug("Finding TCrMany2one4 by id: {}", tcrmany2one4Id);
        return this.wmGenericDao.findById(tcrmany2one4Id);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public TCrMany2one4 findById(Date tcrmany2one4Id) {
        LOGGER.debug("Finding TCrMany2one4 by id: {}", tcrmany2one4Id);
        try {
            return this.wmGenericDao.findById(tcrmany2one4Id);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TCrMany2one4 found with id: {}", tcrmany2one4Id, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public List<TCrMany2one4> findByMultipleIds(List<Date> tcrmany2one4Ids, boolean orderedReturn) {
        LOGGER.debug("Finding TCrMany2one4s by ids: {}", tcrmany2one4Ids);

        return this.wmGenericDao.findByMultipleIds(tcrmany2one4Ids, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dbscenariosTransactionManager")
    @Override
    public TCrMany2one4 update(TCrMany2one4 tcrMany2one4) {
        LOGGER.debug("Updating TCrMany2one4 with information: {}", tcrMany2one4);

        this.wmGenericDao.update(tcrMany2one4);
        this.wmGenericDao.refresh(tcrMany2one4);

        return tcrMany2one4;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public TCrMany2one4 delete(Date tcrmany2one4Id) {
        LOGGER.debug("Deleting TCrMany2one4 with id: {}", tcrmany2one4Id);
        TCrMany2one4 deleted = this.wmGenericDao.findById(tcrmany2one4Id);
        if (deleted == null) {
            LOGGER.debug("No TCrMany2one4 found with id: {}", tcrmany2one4Id);
            throw new EntityNotFoundException(String.valueOf(tcrmany2one4Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public void delete(TCrMany2one4 tcrMany2one4) {
        LOGGER.debug("Deleting TCrMany2one4 with {}", tcrMany2one4);
        this.wmGenericDao.delete(tcrMany2one4);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<TCrMany2one4> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TCrMany2one4s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<TCrMany2one4> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TCrMany2one4s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbscenarios for table TCrMany2one4 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service dbscenarios for table TCrMany2one4 to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}