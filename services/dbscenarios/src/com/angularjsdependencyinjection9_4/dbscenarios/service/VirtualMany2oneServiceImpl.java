/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.angularjsdependencyinjection9_4.dbscenarios.VirtualMany2one;
import com.angularjsdependencyinjection9_4.dbscenarios.VirtualMany2oneId;


/**
 * ServiceImpl object for domain model class VirtualMany2one.
 *
 * @see VirtualMany2one
 */
@Service("dbscenarios.VirtualMany2oneService")
@Validated
public class VirtualMany2oneServiceImpl implements VirtualMany2oneService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VirtualMany2oneServiceImpl.class);


    @Autowired
    @Qualifier("dbscenarios.VirtualMany2oneDao")
    private WMGenericDao<VirtualMany2one, VirtualMany2oneId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<VirtualMany2one, VirtualMany2oneId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public VirtualMany2one create(VirtualMany2one virtualMany2one) {
        LOGGER.debug("Creating a new VirtualMany2one with information: {}", virtualMany2one);

        VirtualMany2one virtualMany2oneCreated = this.wmGenericDao.create(virtualMany2one);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(virtualMany2oneCreated);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public VirtualMany2one getById(VirtualMany2oneId virtualmany2oneId) {
        LOGGER.debug("Finding VirtualMany2one by id: {}", virtualmany2oneId);
        return this.wmGenericDao.findById(virtualmany2oneId);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public VirtualMany2one findById(VirtualMany2oneId virtualmany2oneId) {
        LOGGER.debug("Finding VirtualMany2one by id: {}", virtualmany2oneId);
        try {
            return this.wmGenericDao.findById(virtualmany2oneId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VirtualMany2one found with id: {}", virtualmany2oneId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public List<VirtualMany2one> findByMultipleIds(List<VirtualMany2oneId> virtualmany2oneIds, boolean orderedReturn) {
        LOGGER.debug("Finding VirtualMany2ones by ids: {}", virtualmany2oneIds);

        return this.wmGenericDao.findByMultipleIds(virtualmany2oneIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dbscenariosTransactionManager")
    @Override
    public VirtualMany2one update(VirtualMany2one virtualMany2one) {
        LOGGER.debug("Updating VirtualMany2one with information: {}", virtualMany2one);

        this.wmGenericDao.update(virtualMany2one);
        this.wmGenericDao.refresh(virtualMany2one);

        return virtualMany2one;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public VirtualMany2one delete(VirtualMany2oneId virtualmany2oneId) {
        LOGGER.debug("Deleting VirtualMany2one with id: {}", virtualmany2oneId);
        VirtualMany2one deleted = this.wmGenericDao.findById(virtualmany2oneId);
        if (deleted == null) {
            LOGGER.debug("No VirtualMany2one found with id: {}", virtualmany2oneId);
            throw new EntityNotFoundException(String.valueOf(virtualmany2oneId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public void delete(VirtualMany2one virtualMany2one) {
        LOGGER.debug("Deleting VirtualMany2one with {}", virtualMany2one);
        this.wmGenericDao.delete(virtualMany2one);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<VirtualMany2one> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VirtualMany2ones");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<VirtualMany2one> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VirtualMany2ones");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbscenarios for table VirtualMany2one to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service dbscenarios for table VirtualMany2one to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}