/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.math.BigDecimal;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.angularjsdependencyinjection9_4.dbscenarios.TCrMany2one3;
import com.angularjsdependencyinjection9_4.dbscenarios.TCrMany2one3Id;
import com.angularjsdependencyinjection9_4.dbscenarios.TCrMany2one4;


/**
 * ServiceImpl object for domain model class TCrMany2one3.
 *
 * @see TCrMany2one3
 */
@Service("dbscenarios.TCrMany2one3Service")
@Validated
public class TCrMany2one3ServiceImpl implements TCrMany2one3Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(TCrMany2one3ServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("dbscenarios.TCrMany2one4Service")
    private TCrMany2one4Service tCrMany2one4Service;

    @Autowired
    @Qualifier("dbscenarios.TCrMany2one3Dao")
    private WMGenericDao<TCrMany2one3, TCrMany2one3Id> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TCrMany2one3, TCrMany2one3Id> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public TCrMany2one3 create(TCrMany2one3 tcrMany2one3) {
        LOGGER.debug("Creating a new TCrMany2one3 with information: {}", tcrMany2one3);

        TCrMany2one3 tcrMany2one3Created = this.wmGenericDao.create(tcrMany2one3);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tcrMany2one3Created);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public TCrMany2one3 getById(TCrMany2one3Id tcrmany2one3Id) {
        LOGGER.debug("Finding TCrMany2one3 by id: {}", tcrmany2one3Id);
        return this.wmGenericDao.findById(tcrmany2one3Id);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public TCrMany2one3 findById(TCrMany2one3Id tcrmany2one3Id) {
        LOGGER.debug("Finding TCrMany2one3 by id: {}", tcrmany2one3Id);
        try {
            return this.wmGenericDao.findById(tcrmany2one3Id);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TCrMany2one3 found with id: {}", tcrmany2one3Id, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public List<TCrMany2one3> findByMultipleIds(List<TCrMany2one3Id> tcrmany2one3Ids, boolean orderedReturn) {
        LOGGER.debug("Finding TCrMany2one3s by ids: {}", tcrmany2one3Ids);

        return this.wmGenericDao.findByMultipleIds(tcrmany2one3Ids, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dbscenariosTransactionManager")
    @Override
    public TCrMany2one3 update(TCrMany2one3 tcrMany2one3) {
        LOGGER.debug("Updating TCrMany2one3 with information: {}", tcrMany2one3);

        this.wmGenericDao.update(tcrMany2one3);
        this.wmGenericDao.refresh(tcrMany2one3);

        return tcrMany2one3;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public TCrMany2one3 delete(TCrMany2one3Id tcrmany2one3Id) {
        LOGGER.debug("Deleting TCrMany2one3 with id: {}", tcrmany2one3Id);
        TCrMany2one3 deleted = this.wmGenericDao.findById(tcrmany2one3Id);
        if (deleted == null) {
            LOGGER.debug("No TCrMany2one3 found with id: {}", tcrmany2one3Id);
            throw new EntityNotFoundException(String.valueOf(tcrmany2one3Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public void delete(TCrMany2one3 tcrMany2one3) {
        LOGGER.debug("Deleting TCrMany2one3 with {}", tcrMany2one3);
        this.wmGenericDao.delete(tcrMany2one3);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<TCrMany2one3> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TCrMany2one3s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<TCrMany2one3> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TCrMany2one3s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbscenarios for table TCrMany2one3 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service dbscenarios for table TCrMany2one3 to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<TCrMany2one4> findAssociatedTcrMany2one4s(BigDecimal doubleCol, Short shortId, String stringCol, BigDecimal bigdecCol, Pageable pageable) {
        LOGGER.debug("Fetching all associated tcrMany2one4s");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tcrMany2one3.doubleCol = '" + doubleCol + "'");
        queryBuilder.append(" and ");
        queryBuilder.append("tcrMany2one3.shortId = '" + shortId + "'");
        queryBuilder.append(" and ");
        queryBuilder.append("tcrMany2one3.stringCol = '" + stringCol + "'");
        queryBuilder.append(" and ");
        queryBuilder.append("tcrMany2one3.bigdecCol = '" + bigdecCol + "'");

        return tCrMany2one4Service.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service TCrMany2one4Service instance
     */
    protected void setTCrMany2one4Service(TCrMany2one4Service service) {
        this.tCrMany2one4Service = service;
    }

}