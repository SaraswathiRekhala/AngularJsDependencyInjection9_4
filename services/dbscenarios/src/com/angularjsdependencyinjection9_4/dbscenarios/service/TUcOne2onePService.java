/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.angularjsdependencyinjection9_4.dbscenarios.TUcOne2oneP;

/**
 * Service object for domain model class {@link TUcOne2oneP}.
 */
public interface TUcOne2onePService {

    /**
     * Creates a new TUcOne2oneP. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TUcOne2oneP if any.
     *
     * @param tucOne2oneP Details of the TUcOne2oneP to be created; value cannot be null.
     * @return The newly created TUcOne2oneP.
     */
    TUcOne2oneP create(@Valid TUcOne2oneP tucOne2oneP);


	/**
     * Returns TUcOne2oneP by given id if exists.
     *
     * @param tucone2onepId The id of the TUcOne2oneP to get; value cannot be null.
     * @return TUcOne2oneP associated with the given tucone2onepId.
	 * @throws EntityNotFoundException If no TUcOne2oneP is found.
     */
    TUcOne2oneP getById(Integer tucone2onepId);

    /**
     * Find and return the TUcOne2oneP by given id if exists, returns null otherwise.
     *
     * @param tucone2onepId The id of the TUcOne2oneP to get; value cannot be null.
     * @return TUcOne2oneP associated with the given tucone2onepId.
     */
    TUcOne2oneP findById(Integer tucone2onepId);

	/**
     * Find and return the list of TUcOne2onePs by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param tucone2onepIds The id's of the TUcOne2oneP to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return TUcOne2onePs associated with the given tucone2onepIds.
     */
    List<TUcOne2oneP> findByMultipleIds(List<Integer> tucone2onepIds, boolean orderedReturn);

    /**
     * Find and return the TUcOne2oneP for given stringCol  if exists.
     *
     * @param stringCol value of stringCol; value cannot be null.
     * @return TUcOne2oneP associated with the given inputs.
     * @throws EntityNotFoundException if no matching TUcOne2oneP found.
     */
    TUcOne2oneP getByStringCol(String stringCol);

    /**
     * Updates the details of an existing TUcOne2oneP. It replaces all fields of the existing TUcOne2oneP with the given tucOne2oneP.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TUcOne2oneP if any.
     *
     * @param tucOne2oneP The details of the TUcOne2oneP to be updated; value cannot be null.
     * @return The updated TUcOne2oneP.
     * @throws EntityNotFoundException if no TUcOne2oneP is found with given input.
     */
    TUcOne2oneP update(@Valid TUcOne2oneP tucOne2oneP);

    /**
     * Deletes an existing TUcOne2oneP with the given id.
     *
     * @param tucone2onepId The id of the TUcOne2oneP to be deleted; value cannot be null.
     * @return The deleted TUcOne2oneP.
     * @throws EntityNotFoundException if no TUcOne2oneP found with the given id.
     */
    TUcOne2oneP delete(Integer tucone2onepId);

    /**
     * Deletes an existing TUcOne2oneP with the given object.
     *
     * @param tucOne2oneP The instance of the TUcOne2oneP to be deleted; value cannot be null.
     */
    void delete(TUcOne2oneP tucOne2oneP);

    /**
     * Find all TUcOne2onePs matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TUcOne2onePs.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<TUcOne2oneP> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all TUcOne2onePs matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TUcOne2onePs.
     *
     * @see Pageable
     * @see Page
     */
    Page<TUcOne2oneP> findAll(String query, Pageable pageable);

    /**
     * Exports all TUcOne2onePs matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all TUcOne2onePs matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the TUcOne2onePs in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the TUcOne2oneP.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}