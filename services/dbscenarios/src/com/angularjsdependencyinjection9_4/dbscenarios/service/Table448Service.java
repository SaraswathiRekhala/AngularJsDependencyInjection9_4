/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.angularjsdependencyinjection9_4.dbscenarios.Table448;

/**
 * Service object for domain model class {@link Table448}.
 */
public interface Table448Service {

    /**
     * Creates a new Table448. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Table448 if any.
     *
     * @param table448 Details of the Table448 to be created; value cannot be null.
     * @return The newly created Table448.
     */
    Table448 create(@Valid Table448 table448);


	/**
     * Returns Table448 by given id if exists.
     *
     * @param table448Id The id of the Table448 to get; value cannot be null.
     * @return Table448 associated with the given table448Id.
	 * @throws EntityNotFoundException If no Table448 is found.
     */
    Table448 getById(Integer table448Id);

    /**
     * Find and return the Table448 by given id if exists, returns null otherwise.
     *
     * @param table448Id The id of the Table448 to get; value cannot be null.
     * @return Table448 associated with the given table448Id.
     */
    Table448 findById(Integer table448Id);

	/**
     * Find and return the list of Table448s by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param table448Ids The id's of the Table448 to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Table448s associated with the given table448Ids.
     */
    List<Table448> findByMultipleIds(List<Integer> table448Ids, boolean orderedReturn);

    /**
     * Find and return the Table448 for given column5  andcolumn6  if exists.
     *
     * @param column5 value of column5; value cannot be null.
     * @param column6 value of column6; value cannot be null.
     * @return Table448 associated with the given inputs.
     * @throws EntityNotFoundException if no matching Table448 found.
     */
    Table448 getByColumn5AndColumn6(byte[] column5, String column6);

    /**
     * Updates the details of an existing Table448. It replaces all fields of the existing Table448 with the given table448.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Table448 if any.
     *
     * @param table448 The details of the Table448 to be updated; value cannot be null.
     * @return The updated Table448.
     * @throws EntityNotFoundException if no Table448 is found with given input.
     */
    Table448 update(@Valid Table448 table448);

    /**
     * Deletes an existing Table448 with the given id.
     *
     * @param table448Id The id of the Table448 to be deleted; value cannot be null.
     * @return The deleted Table448.
     * @throws EntityNotFoundException if no Table448 found with the given id.
     */
    Table448 delete(Integer table448Id);

    /**
     * Deletes an existing Table448 with the given object.
     *
     * @param table448 The instance of the Table448 to be deleted; value cannot be null.
     */
    void delete(Table448 table448);

    /**
     * Find all Table448s matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Table448s.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Table448> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Table448s matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Table448s.
     *
     * @see Pageable
     * @see Page
     */
    Page<Table448> findAll(String query, Pageable pageable);

    /**
     * Exports all Table448s matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Table448s matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Table448s in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Table448.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}