/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.angularjsdependencyinjection9_4.dbscenarios.VirtualOne2one;
import com.angularjsdependencyinjection9_4.dbscenarios.VirtualOne2oneId;


/**
 * ServiceImpl object for domain model class VirtualOne2one.
 *
 * @see VirtualOne2one
 */
@Service("dbscenarios.VirtualOne2oneService")
@Validated
public class VirtualOne2oneServiceImpl implements VirtualOne2oneService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VirtualOne2oneServiceImpl.class);


    @Autowired
    @Qualifier("dbscenarios.VirtualOne2oneDao")
    private WMGenericDao<VirtualOne2one, VirtualOne2oneId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<VirtualOne2one, VirtualOne2oneId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public VirtualOne2one create(VirtualOne2one virtualOne2one) {
        LOGGER.debug("Creating a new VirtualOne2one with information: {}", virtualOne2one);

        VirtualOne2one virtualOne2oneCreated = this.wmGenericDao.create(virtualOne2one);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(virtualOne2oneCreated);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public VirtualOne2one getById(VirtualOne2oneId virtualone2oneId) {
        LOGGER.debug("Finding VirtualOne2one by id: {}", virtualone2oneId);
        return this.wmGenericDao.findById(virtualone2oneId);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public VirtualOne2one findById(VirtualOne2oneId virtualone2oneId) {
        LOGGER.debug("Finding VirtualOne2one by id: {}", virtualone2oneId);
        try {
            return this.wmGenericDao.findById(virtualone2oneId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VirtualOne2one found with id: {}", virtualone2oneId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public List<VirtualOne2one> findByMultipleIds(List<VirtualOne2oneId> virtualone2oneIds, boolean orderedReturn) {
        LOGGER.debug("Finding VirtualOne2ones by ids: {}", virtualone2oneIds);

        return this.wmGenericDao.findByMultipleIds(virtualone2oneIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dbscenariosTransactionManager")
    @Override
    public VirtualOne2one update(VirtualOne2one virtualOne2one) {
        LOGGER.debug("Updating VirtualOne2one with information: {}", virtualOne2one);

        this.wmGenericDao.update(virtualOne2one);
        this.wmGenericDao.refresh(virtualOne2one);

        return virtualOne2one;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public VirtualOne2one delete(VirtualOne2oneId virtualone2oneId) {
        LOGGER.debug("Deleting VirtualOne2one with id: {}", virtualone2oneId);
        VirtualOne2one deleted = this.wmGenericDao.findById(virtualone2oneId);
        if (deleted == null) {
            LOGGER.debug("No VirtualOne2one found with id: {}", virtualone2oneId);
            throw new EntityNotFoundException(String.valueOf(virtualone2oneId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public void delete(VirtualOne2one virtualOne2one) {
        LOGGER.debug("Deleting VirtualOne2one with {}", virtualOne2one);
        this.wmGenericDao.delete(virtualOne2one);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<VirtualOne2one> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VirtualOne2ones");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<VirtualOne2one> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VirtualOne2ones");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbscenarios for table VirtualOne2one to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service dbscenarios for table VirtualOne2one to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}