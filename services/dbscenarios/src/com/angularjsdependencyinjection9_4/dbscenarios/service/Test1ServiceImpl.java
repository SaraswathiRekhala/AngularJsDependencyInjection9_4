/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.angularjsdependencyinjection9_4.dbscenarios.Test1;


/**
 * ServiceImpl object for domain model class Test1.
 *
 * @see Test1
 */
@Service("dbscenarios.Test1Service")
@Validated
public class Test1ServiceImpl implements Test1Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Test1ServiceImpl.class);


    @Autowired
    @Qualifier("dbscenarios.Test1Dao")
    private WMGenericDao<Test1, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Test1, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public Test1 create(Test1 test1) {
        LOGGER.debug("Creating a new Test1 with information: {}", test1);

        Test1 test1Created = this.wmGenericDao.create(test1);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(test1Created);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Test1 getById(Integer test1Id) {
        LOGGER.debug("Finding Test1 by id: {}", test1Id);
        return this.wmGenericDao.findById(test1Id);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Test1 findById(Integer test1Id) {
        LOGGER.debug("Finding Test1 by id: {}", test1Id);
        try {
            return this.wmGenericDao.findById(test1Id);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Test1 found with id: {}", test1Id, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public List<Test1> findByMultipleIds(List<Integer> test1Ids, boolean orderedReturn) {
        LOGGER.debug("Finding Test1s by ids: {}", test1Ids);

        return this.wmGenericDao.findByMultipleIds(test1Ids, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dbscenariosTransactionManager")
    @Override
    public Test1 update(Test1 test1) {
        LOGGER.debug("Updating Test1 with information: {}", test1);

        this.wmGenericDao.update(test1);
        this.wmGenericDao.refresh(test1);

        return test1;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public Test1 delete(Integer test1Id) {
        LOGGER.debug("Deleting Test1 with id: {}", test1Id);
        Test1 deleted = this.wmGenericDao.findById(test1Id);
        if (deleted == null) {
            LOGGER.debug("No Test1 found with id: {}", test1Id);
            throw new EntityNotFoundException(String.valueOf(test1Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public void delete(Test1 test1) {
        LOGGER.debug("Deleting Test1 with {}", test1);
        this.wmGenericDao.delete(test1);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<Test1> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Test1s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<Test1> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Test1s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbscenarios for table Test1 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service dbscenarios for table Test1 to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}