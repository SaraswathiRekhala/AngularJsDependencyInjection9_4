/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.angularjsdependencyinjection9_4.dbscenarios.AllTypes1;
import com.angularjsdependencyinjection9_4.dbscenarios.AllTypes1Id;


/**
 * ServiceImpl object for domain model class AllTypes1.
 *
 * @see AllTypes1
 */
@Service("dbscenarios.AllTypes1Service")
@Validated
public class AllTypes1ServiceImpl implements AllTypes1Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(AllTypes1ServiceImpl.class);


    @Autowired
    @Qualifier("dbscenarios.AllTypes1Dao")
    private WMGenericDao<AllTypes1, AllTypes1Id> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<AllTypes1, AllTypes1Id> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public AllTypes1 create(AllTypes1 allTypes1) {
        LOGGER.debug("Creating a new AllTypes1 with information: {}", allTypes1);

        AllTypes1 allTypes1Created = this.wmGenericDao.create(allTypes1);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(allTypes1Created);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public AllTypes1 getById(AllTypes1Id alltypes1Id) {
        LOGGER.debug("Finding AllTypes1 by id: {}", alltypes1Id);
        return this.wmGenericDao.findById(alltypes1Id);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public AllTypes1 findById(AllTypes1Id alltypes1Id) {
        LOGGER.debug("Finding AllTypes1 by id: {}", alltypes1Id);
        try {
            return this.wmGenericDao.findById(alltypes1Id);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No AllTypes1 found with id: {}", alltypes1Id, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public List<AllTypes1> findByMultipleIds(List<AllTypes1Id> alltypes1Ids, boolean orderedReturn) {
        LOGGER.debug("Finding AllTypes1s by ids: {}", alltypes1Ids);

        return this.wmGenericDao.findByMultipleIds(alltypes1Ids, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dbscenariosTransactionManager")
    @Override
    public AllTypes1 update(AllTypes1 allTypes1) {
        LOGGER.debug("Updating AllTypes1 with information: {}", allTypes1);

        this.wmGenericDao.update(allTypes1);
        this.wmGenericDao.refresh(allTypes1);

        return allTypes1;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public AllTypes1 delete(AllTypes1Id alltypes1Id) {
        LOGGER.debug("Deleting AllTypes1 with id: {}", alltypes1Id);
        AllTypes1 deleted = this.wmGenericDao.findById(alltypes1Id);
        if (deleted == null) {
            LOGGER.debug("No AllTypes1 found with id: {}", alltypes1Id);
            throw new EntityNotFoundException(String.valueOf(alltypes1Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public void delete(AllTypes1 allTypes1) {
        LOGGER.debug("Deleting AllTypes1 with {}", allTypes1);
        this.wmGenericDao.delete(allTypes1);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<AllTypes1> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all AllTypes1s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<AllTypes1> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all AllTypes1s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbscenarios for table AllTypes1 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service dbscenarios for table AllTypes1 to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}