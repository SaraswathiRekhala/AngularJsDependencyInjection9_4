/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.angularjsdependencyinjection9_4.dbscenarios.TUcComposite2;
import com.angularjsdependencyinjection9_4.dbscenarios.TUcComposite2Id;


/**
 * ServiceImpl object for domain model class TUcComposite2.
 *
 * @see TUcComposite2
 */
@Service("dbscenarios.TUcComposite2Service")
@Validated
public class TUcComposite2ServiceImpl implements TUcComposite2Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(TUcComposite2ServiceImpl.class);


    @Autowired
    @Qualifier("dbscenarios.TUcComposite2Dao")
    private WMGenericDao<TUcComposite2, TUcComposite2Id> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TUcComposite2, TUcComposite2Id> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public TUcComposite2 create(TUcComposite2 tucComposite2) {
        LOGGER.debug("Creating a new TUcComposite2 with information: {}", tucComposite2);

        TUcComposite2 tucComposite2Created = this.wmGenericDao.create(tucComposite2);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tucComposite2Created);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public TUcComposite2 getById(TUcComposite2Id tuccomposite2Id) {
        LOGGER.debug("Finding TUcComposite2 by id: {}", tuccomposite2Id);
        return this.wmGenericDao.findById(tuccomposite2Id);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public TUcComposite2 findById(TUcComposite2Id tuccomposite2Id) {
        LOGGER.debug("Finding TUcComposite2 by id: {}", tuccomposite2Id);
        try {
            return this.wmGenericDao.findById(tuccomposite2Id);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TUcComposite2 found with id: {}", tuccomposite2Id, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public List<TUcComposite2> findByMultipleIds(List<TUcComposite2Id> tuccomposite2Ids, boolean orderedReturn) {
        LOGGER.debug("Finding TUcComposite2s by ids: {}", tuccomposite2Ids);

        return this.wmGenericDao.findByMultipleIds(tuccomposite2Ids, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dbscenariosTransactionManager")
    @Override
    public TUcComposite2 update(TUcComposite2 tucComposite2) {
        LOGGER.debug("Updating TUcComposite2 with information: {}", tucComposite2);

        this.wmGenericDao.update(tucComposite2);
        this.wmGenericDao.refresh(tucComposite2);

        return tucComposite2;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public TUcComposite2 delete(TUcComposite2Id tuccomposite2Id) {
        LOGGER.debug("Deleting TUcComposite2 with id: {}", tuccomposite2Id);
        TUcComposite2 deleted = this.wmGenericDao.findById(tuccomposite2Id);
        if (deleted == null) {
            LOGGER.debug("No TUcComposite2 found with id: {}", tuccomposite2Id);
            throw new EntityNotFoundException(String.valueOf(tuccomposite2Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public void delete(TUcComposite2 tucComposite2) {
        LOGGER.debug("Deleting TUcComposite2 with {}", tucComposite2);
        this.wmGenericDao.delete(tucComposite2);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<TUcComposite2> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TUcComposite2s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<TUcComposite2> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TUcComposite2s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbscenarios for table TUcComposite2 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service dbscenarios for table TUcComposite2 to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}