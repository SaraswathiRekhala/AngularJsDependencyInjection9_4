/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.angularjsdependencyinjection9_4.dbscenarios.BlobTableEntity;


/**
 * ServiceImpl object for domain model class BlobTableEntity.
 *
 * @see BlobTableEntity
 */
@Service("dbscenarios.BlobTableEntityService")
@Validated
public class BlobTableEntityServiceImpl implements BlobTableEntityService {

    private static final Logger LOGGER = LoggerFactory.getLogger(BlobTableEntityServiceImpl.class);


    @Autowired
    @Qualifier("dbscenarios.BlobTableEntityDao")
    private WMGenericDao<BlobTableEntity, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<BlobTableEntity, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public BlobTableEntity create(BlobTableEntity blobTableEntity) {
        LOGGER.debug("Creating a new BlobTableEntity with information: {}", blobTableEntity);

        BlobTableEntity blobTableEntityCreated = this.wmGenericDao.create(blobTableEntity);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(blobTableEntityCreated);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public BlobTableEntity getById(Integer blobtableentityId) {
        LOGGER.debug("Finding BlobTableEntity by id: {}", blobtableentityId);
        return this.wmGenericDao.findById(blobtableentityId);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public BlobTableEntity findById(Integer blobtableentityId) {
        LOGGER.debug("Finding BlobTableEntity by id: {}", blobtableentityId);
        try {
            return this.wmGenericDao.findById(blobtableentityId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No BlobTableEntity found with id: {}", blobtableentityId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public List<BlobTableEntity> findByMultipleIds(List<Integer> blobtableentityIds, boolean orderedReturn) {
        LOGGER.debug("Finding BlobTableEntities by ids: {}", blobtableentityIds);

        return this.wmGenericDao.findByMultipleIds(blobtableentityIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dbscenariosTransactionManager")
    @Override
    public BlobTableEntity update(BlobTableEntity blobTableEntity) {
        LOGGER.debug("Updating BlobTableEntity with information: {}", blobTableEntity);

        this.wmGenericDao.update(blobTableEntity);
        this.wmGenericDao.refresh(blobTableEntity);

        return blobTableEntity;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public BlobTableEntity delete(Integer blobtableentityId) {
        LOGGER.debug("Deleting BlobTableEntity with id: {}", blobtableentityId);
        BlobTableEntity deleted = this.wmGenericDao.findById(blobtableentityId);
        if (deleted == null) {
            LOGGER.debug("No BlobTableEntity found with id: {}", blobtableentityId);
            throw new EntityNotFoundException(String.valueOf(blobtableentityId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public void delete(BlobTableEntity blobTableEntity) {
        LOGGER.debug("Deleting BlobTableEntity with {}", blobTableEntity);
        this.wmGenericDao.delete(blobTableEntity);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<BlobTableEntity> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all BlobTableEntities");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<BlobTableEntity> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all BlobTableEntities");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbscenarios for table BlobTableEntity to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service dbscenarios for table BlobTableEntity to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}