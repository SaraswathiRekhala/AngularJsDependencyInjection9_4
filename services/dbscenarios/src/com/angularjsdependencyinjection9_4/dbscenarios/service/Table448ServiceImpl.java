/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.angularjsdependencyinjection9_4.dbscenarios.Table448;


/**
 * ServiceImpl object for domain model class Table448.
 *
 * @see Table448
 */
@Service("dbscenarios.Table448Service")
@Validated
public class Table448ServiceImpl implements Table448Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table448ServiceImpl.class);


    @Autowired
    @Qualifier("dbscenarios.Table448Dao")
    private WMGenericDao<Table448, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table448, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public Table448 create(Table448 table448) {
        LOGGER.debug("Creating a new Table448 with information: {}", table448);

        Table448 table448Created = this.wmGenericDao.create(table448);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(table448Created);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Table448 getById(Integer table448Id) {
        LOGGER.debug("Finding Table448 by id: {}", table448Id);
        return this.wmGenericDao.findById(table448Id);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Table448 findById(Integer table448Id) {
        LOGGER.debug("Finding Table448 by id: {}", table448Id);
        try {
            return this.wmGenericDao.findById(table448Id);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Table448 found with id: {}", table448Id, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public List<Table448> findByMultipleIds(List<Integer> table448Ids, boolean orderedReturn) {
        LOGGER.debug("Finding Table448s by ids: {}", table448Ids);

        return this.wmGenericDao.findByMultipleIds(table448Ids, orderedReturn);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Table448 getByColumn5AndColumn6(byte[] column5, String column6) {
        Map<String, Object> column5AndColumn6Map = new HashMap<>();
        column5AndColumn6Map.put("column5", column5);
        column5AndColumn6Map.put("column6", column6);

        LOGGER.debug("Finding Table448 by unique keys: {}", column5AndColumn6Map);
        return this.wmGenericDao.findByUniqueKey(column5AndColumn6Map);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dbscenariosTransactionManager")
    @Override
    public Table448 update(Table448 table448) {
        LOGGER.debug("Updating Table448 with information: {}", table448);

        this.wmGenericDao.update(table448);
        this.wmGenericDao.refresh(table448);

        return table448;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public Table448 delete(Integer table448Id) {
        LOGGER.debug("Deleting Table448 with id: {}", table448Id);
        Table448 deleted = this.wmGenericDao.findById(table448Id);
        if (deleted == null) {
            LOGGER.debug("No Table448 found with id: {}", table448Id);
            throw new EntityNotFoundException(String.valueOf(table448Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public void delete(Table448 table448) {
        LOGGER.debug("Deleting Table448 with {}", table448);
        this.wmGenericDao.delete(table448);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<Table448> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Table448s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<Table448> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Table448s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbscenarios for table Table448 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service dbscenarios for table Table448 to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}