/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.angularjsdependencyinjection9_4.dbscenarios.TCrMany2one1;
import com.angularjsdependencyinjection9_4.dbscenarios.TCrMany2one1Id;
import com.angularjsdependencyinjection9_4.dbscenarios.TCrMany2one2;


/**
 * ServiceImpl object for domain model class TCrMany2one1.
 *
 * @see TCrMany2one1
 */
@Service("dbscenarios.TCrMany2one1Service")
@Validated
public class TCrMany2one1ServiceImpl implements TCrMany2one1Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(TCrMany2one1ServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("dbscenarios.TCrMany2one2Service")
    private TCrMany2one2Service tCrMany2one2Service;

    @Autowired
    @Qualifier("dbscenarios.TCrMany2one1Dao")
    private WMGenericDao<TCrMany2one1, TCrMany2one1Id> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TCrMany2one1, TCrMany2one1Id> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public TCrMany2one1 create(TCrMany2one1 tcrMany2one1) {
        LOGGER.debug("Creating a new TCrMany2one1 with information: {}", tcrMany2one1);

        TCrMany2one1 tcrMany2one1Created = this.wmGenericDao.create(tcrMany2one1);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tcrMany2one1Created);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public TCrMany2one1 getById(TCrMany2one1Id tcrmany2one1Id) {
        LOGGER.debug("Finding TCrMany2one1 by id: {}", tcrmany2one1Id);
        return this.wmGenericDao.findById(tcrmany2one1Id);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public TCrMany2one1 findById(TCrMany2one1Id tcrmany2one1Id) {
        LOGGER.debug("Finding TCrMany2one1 by id: {}", tcrmany2one1Id);
        try {
            return this.wmGenericDao.findById(tcrmany2one1Id);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TCrMany2one1 found with id: {}", tcrmany2one1Id, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public List<TCrMany2one1> findByMultipleIds(List<TCrMany2one1Id> tcrmany2one1Ids, boolean orderedReturn) {
        LOGGER.debug("Finding TCrMany2one1s by ids: {}", tcrmany2one1Ids);

        return this.wmGenericDao.findByMultipleIds(tcrmany2one1Ids, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dbscenariosTransactionManager")
    @Override
    public TCrMany2one1 update(TCrMany2one1 tcrMany2one1) {
        LOGGER.debug("Updating TCrMany2one1 with information: {}", tcrMany2one1);

        this.wmGenericDao.update(tcrMany2one1);
        this.wmGenericDao.refresh(tcrMany2one1);

        return tcrMany2one1;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public TCrMany2one1 delete(TCrMany2one1Id tcrmany2one1Id) {
        LOGGER.debug("Deleting TCrMany2one1 with id: {}", tcrmany2one1Id);
        TCrMany2one1 deleted = this.wmGenericDao.findById(tcrmany2one1Id);
        if (deleted == null) {
            LOGGER.debug("No TCrMany2one1 found with id: {}", tcrmany2one1Id);
            throw new EntityNotFoundException(String.valueOf(tcrmany2one1Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public void delete(TCrMany2one1 tcrMany2one1) {
        LOGGER.debug("Deleting TCrMany2one1 with {}", tcrMany2one1);
        this.wmGenericDao.delete(tcrMany2one1);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<TCrMany2one1> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TCrMany2one1s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<TCrMany2one1> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TCrMany2one1s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbscenarios for table TCrMany2one1 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service dbscenarios for table TCrMany2one1 to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<TCrMany2one2> findAssociatedTcrMany2one2s(Long longCol, Boolean booleanCol, String stringCol, Short byteId, Pageable pageable) {
        LOGGER.debug("Fetching all associated tcrMany2one2s");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tcrMany2one1.longCol = '" + longCol + "'");
        queryBuilder.append(" and ");
        queryBuilder.append("tcrMany2one1.booleanCol = '" + booleanCol + "'");
        queryBuilder.append(" and ");
        queryBuilder.append("tcrMany2one1.stringCol = '" + stringCol + "'");
        queryBuilder.append(" and ");
        queryBuilder.append("tcrMany2one1.byteId = '" + byteId + "'");

        return tCrMany2one2Service.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service TCrMany2one2Service instance
     */
    protected void setTCrMany2one2Service(TCrMany2one2Service service) {
        this.tCrMany2one2Service = service;
    }

}