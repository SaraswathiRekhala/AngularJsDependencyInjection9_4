/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.angularjsdependencyinjection9_4.dbscenarios.UserTable;


/**
 * ServiceImpl object for domain model class UserTable.
 *
 * @see UserTable
 */
@Service("dbscenarios.UserTableService")
@Validated
public class UserTableServiceImpl implements UserTableService {

    private static final Logger LOGGER = LoggerFactory.getLogger(UserTableServiceImpl.class);


    @Autowired
    @Qualifier("dbscenarios.UserTableDao")
    private WMGenericDao<UserTable, Short> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<UserTable, Short> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public UserTable create(UserTable userTable) {
        LOGGER.debug("Creating a new UserTable with information: {}", userTable);

        UserTable userTableCreated = this.wmGenericDao.create(userTable);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(userTableCreated);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public UserTable getById(Short usertableId) {
        LOGGER.debug("Finding UserTable by id: {}", usertableId);
        return this.wmGenericDao.findById(usertableId);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public UserTable findById(Short usertableId) {
        LOGGER.debug("Finding UserTable by id: {}", usertableId);
        try {
            return this.wmGenericDao.findById(usertableId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No UserTable found with id: {}", usertableId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public List<UserTable> findByMultipleIds(List<Short> usertableIds, boolean orderedReturn) {
        LOGGER.debug("Finding UserTables by ids: {}", usertableIds);

        return this.wmGenericDao.findByMultipleIds(usertableIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dbscenariosTransactionManager")
    @Override
    public UserTable update(UserTable userTable) {
        LOGGER.debug("Updating UserTable with information: {}", userTable);

        this.wmGenericDao.update(userTable);
        this.wmGenericDao.refresh(userTable);

        return userTable;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public UserTable delete(Short usertableId) {
        LOGGER.debug("Deleting UserTable with id: {}", usertableId);
        UserTable deleted = this.wmGenericDao.findById(usertableId);
        if (deleted == null) {
            LOGGER.debug("No UserTable found with id: {}", usertableId);
            throw new EntityNotFoundException(String.valueOf(usertableId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public void delete(UserTable userTable) {
        LOGGER.debug("Deleting UserTable with {}", userTable);
        this.wmGenericDao.delete(userTable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<UserTable> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all UserTables");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<UserTable> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all UserTables");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbscenarios for table UserTable to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service dbscenarios for table UserTable to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}