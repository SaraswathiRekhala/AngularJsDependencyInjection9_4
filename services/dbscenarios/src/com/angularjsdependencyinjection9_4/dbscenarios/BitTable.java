/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

/**
 * BitTable generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`BIT TAble`")
public class BitTable implements Serializable {

    private Integer id;
    private String charCol;
    private Boolean bitColumn;

    @Id
    @SequenceGenerator(name = "generator", sequenceName = "`BIT TAble_ID_seq`" , allocationSize = 1)
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "generator")
    @Column(name = "`ID`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`Char COl`", nullable = true, length = 1)
    public String getCharCol() {
        return this.charCol;
    }

    public void setCharCol(String charCol) {
        this.charCol = charCol;
    }

    @Column(name = "`BIT COlumn`", nullable = true)
    public Boolean getBitColumn() {
        return this.bitColumn;
    }

    public void setBitColumn(Boolean bitColumn) {
        this.bitColumn = bitColumn;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof BitTable)) return false;
        final BitTable bitTable = (BitTable) o;
        return Objects.equals(getId(), bitTable.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}