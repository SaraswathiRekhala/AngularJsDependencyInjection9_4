/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.sql.Time;
import java.time.LocalDateTime;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonProperty.Access;

/**
 * TMany2oneP generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`T-MANY2ONE-P`")
public class TMany2oneP implements Serializable {

    private Integer intId;
    private String charCol;
    private int bigintCol;
    private Time timeCol;
    private LocalDateTime datetimeCol;
    @JsonProperty(access = Access.READ_ONLY)
    private byte[] blobCol;
    private TMany2oneC tmany2oneC;

    @Id
    @Column(name = "`INT-ID`", nullable = false, scale = 0, precision = 10)
    public Integer getIntId() {
        return this.intId;
    }

    public void setIntId(Integer intId) {
        this.intId = intId;
    }

    @Column(name = "`CHAR COL`", nullable = true, length = 1)
    public String getCharCol() {
        return this.charCol;
    }

    public void setCharCol(String charCol) {
        this.charCol = charCol;
    }

    @Column(name = "`BIGINT COL`", nullable = false, scale = 0, precision = 19)
    public int getBigintCol() {
        return this.bigintCol;
    }

    public void setBigintCol(int bigintCol) {
        this.bigintCol = bigintCol;
    }

    @Column(name = "`TIME COL`", nullable = false)
    public Time getTimeCol() {
        return this.timeCol;
    }

    public void setTimeCol(Time timeCol) {
        this.timeCol = timeCol;
    }

    @Column(name = "`DATETIME COL`", nullable = false)
    public LocalDateTime getDatetimeCol() {
        return this.datetimeCol;
    }

    public void setDatetimeCol(LocalDateTime datetimeCol) {
        this.datetimeCol = datetimeCol;
    }

    @Column(name = "`BLOB COL`", nullable = true)
    public byte[] getBlobCol() {
        return this.blobCol;
    }

    public void setBlobCol(byte[] blobCol) {
        this.blobCol = blobCol;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`BIGINT COL`", referencedColumnName = "`BIGINT-ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_T-MANY2ONE-P_TO_T-MANT4nFu`"))
    @Fetch(FetchMode.JOIN)
    public TMany2oneC getTmany2oneC() {
        return this.tmany2oneC;
    }

    public void setTmany2oneC(TMany2oneC tmany2oneC) {
        if(tmany2oneC != null) {
            this.bigintCol = tmany2oneC.getBigintId();
        }

        this.tmany2oneC = tmany2oneC;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof TMany2oneP)) return false;
        final TMany2oneP tmany2oneP = (TMany2oneP) o;
        return Objects.equals(getIntId(), tmany2oneP.getIntId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getIntId());
    }
}