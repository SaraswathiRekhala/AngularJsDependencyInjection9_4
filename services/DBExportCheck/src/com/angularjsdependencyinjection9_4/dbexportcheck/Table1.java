/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbexportcheck;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * Table1 generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`TABLE1`")
public class Table1 implements Serializable {

    private Integer id;
    private Integer column2;
    private Integer column3;
    private Integer column4;
    private Integer column5;
    private Table4 table4;
    private Table3 table3;
    private Table5 table5;
    private Table2 table2;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`ID`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`COLUMN2`", nullable = true, scale = 0, precision = 10)
    public Integer getColumn2() {
        return this.column2;
    }

    public void setColumn2(Integer column2) {
        this.column2 = column2;
    }

    @Column(name = "`COLUMN3`", nullable = true, scale = 0, precision = 10)
    public Integer getColumn3() {
        return this.column3;
    }

    public void setColumn3(Integer column3) {
        this.column3 = column3;
    }

    @Column(name = "`COLUMN4`", nullable = true, scale = 0, precision = 10)
    public Integer getColumn4() {
        return this.column4;
    }

    public void setColumn4(Integer column4) {
        this.column4 = column4;
    }

    @Column(name = "`COLUMN5`", nullable = true, scale = 0, precision = 10)
    public Integer getColumn5() {
        return this.column5;
    }

    public void setColumn5(Integer column5) {
        this.column5 = column5;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`COLUMN3`", referencedColumnName = "`ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_TABLE1_TO_TABLE4_COLUEyLoi`"))
    @Fetch(FetchMode.JOIN)
    public Table4 getTable4() {
        return this.table4;
    }

    public void setTable4(Table4 table4) {
        if(table4 != null) {
            this.column3 = table4.getId();
        }

        this.table4 = table4;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`COLUMN2`", referencedColumnName = "`ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_TABLE1_TO_TABLE3_COLU6gEFN`"))
    @Fetch(FetchMode.JOIN)
    public Table3 getTable3() {
        return this.table3;
    }

    public void setTable3(Table3 table3) {
        if(table3 != null) {
            this.column2 = table3.getId();
        }

        this.table3 = table3;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`COLUMN5`", referencedColumnName = "`ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_TABLE1_TO_TABLE5_COLUi9ZYL`"))
    @Fetch(FetchMode.JOIN)
    public Table5 getTable5() {
        return this.table5;
    }

    public void setTable5(Table5 table5) {
        if(table5 != null) {
            this.column5 = table5.getId();
        }

        this.table5 = table5;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`COLUMN4`", referencedColumnName = "`ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_TABLE1_TO_TABLE2_COLUNHIZa`"))
    @Fetch(FetchMode.JOIN)
    public Table2 getTable2() {
        return this.table2;
    }

    public void setTable2(Table2 table2) {
        if(table2 != null) {
            this.column4 = table2.getId();
        }

        this.table2 = table2;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Table1)) return false;
        final Table1 table1 = (Table1) o;
        return Objects.equals(getId(), table1.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}