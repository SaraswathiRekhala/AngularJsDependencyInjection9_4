/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbexportcheck.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.angularjsdependencyinjection9_4.dbexportcheck.Table1;
import com.angularjsdependencyinjection9_4.dbexportcheck.Table4;


/**
 * ServiceImpl object for domain model class Table4.
 *
 * @see Table4
 */
@Service("DBExportCheck.Table4Service")
@Validated
public class Table4ServiceImpl implements Table4Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table4ServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("DBExportCheck.Table1Service")
    private Table1Service table1Service;

    @Autowired
    @Qualifier("DBExportCheck.Table4Dao")
    private WMGenericDao<Table4, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table4, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "DBExportCheckTransactionManager")
    @Override
    public Table4 create(Table4 table4) {
        LOGGER.debug("Creating a new Table4 with information: {}", table4);

        Table4 table4Created = this.wmGenericDao.create(table4);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(table4Created);
    }

    @Transactional(readOnly = true, value = "DBExportCheckTransactionManager")
    @Override
    public Table4 getById(Integer table4Id) {
        LOGGER.debug("Finding Table4 by id: {}", table4Id);
        return this.wmGenericDao.findById(table4Id);
    }

    @Transactional(readOnly = true, value = "DBExportCheckTransactionManager")
    @Override
    public Table4 findById(Integer table4Id) {
        LOGGER.debug("Finding Table4 by id: {}", table4Id);
        try {
            return this.wmGenericDao.findById(table4Id);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Table4 found with id: {}", table4Id, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "DBExportCheckTransactionManager")
    @Override
    public List<Table4> findByMultipleIds(List<Integer> table4Ids, boolean orderedReturn) {
        LOGGER.debug("Finding Table4s by ids: {}", table4Ids);

        return this.wmGenericDao.findByMultipleIds(table4Ids, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "DBExportCheckTransactionManager")
    @Override
    public Table4 update(Table4 table4) {
        LOGGER.debug("Updating Table4 with information: {}", table4);

        this.wmGenericDao.update(table4);
        this.wmGenericDao.refresh(table4);

        return table4;
    }

    @Transactional(value = "DBExportCheckTransactionManager")
    @Override
    public Table4 delete(Integer table4Id) {
        LOGGER.debug("Deleting Table4 with id: {}", table4Id);
        Table4 deleted = this.wmGenericDao.findById(table4Id);
        if (deleted == null) {
            LOGGER.debug("No Table4 found with id: {}", table4Id);
            throw new EntityNotFoundException(String.valueOf(table4Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "DBExportCheckTransactionManager")
    @Override
    public void delete(Table4 table4) {
        LOGGER.debug("Deleting Table4 with {}", table4);
        this.wmGenericDao.delete(table4);
    }

    @Transactional(readOnly = true, value = "DBExportCheckTransactionManager")
    @Override
    public Page<Table4> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Table4s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "DBExportCheckTransactionManager")
    @Override
    public Page<Table4> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Table4s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "DBExportCheckTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service DBExportCheck for table Table4 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "DBExportCheckTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service DBExportCheck for table Table4 to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "DBExportCheckTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "DBExportCheckTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "DBExportCheckTransactionManager")
    @Override
    public Page<Table1> findAssociatedTable1s(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated table1s");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("table4.id = '" + id + "'");

        return table1Service.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service Table1Service instance
     */
    protected void setTable1Service(Table1Service service) {
        this.table1Service = service;
    }

}