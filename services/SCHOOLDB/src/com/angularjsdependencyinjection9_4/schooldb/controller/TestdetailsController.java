/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.schooldb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.angularjsdependencyinjection9_4.schooldb.Academictestsubjects;
import com.angularjsdependencyinjection9_4.schooldb.Testdetails;
import com.angularjsdependencyinjection9_4.schooldb.service.TestdetailsService;


/**
 * Controller object for domain model class Testdetails.
 * @see Testdetails
 */
@RestController("SCHOOLDB.TestdetailsController")
@Api(value = "TestdetailsController", description = "Exposes APIs to work with Testdetails resource.")
@RequestMapping("/SCHOOLDB/Testdetails")
public class TestdetailsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TestdetailsController.class);

    @Autowired
	@Qualifier("SCHOOLDB.TestdetailsService")
	private TestdetailsService testdetailsService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Testdetails instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Testdetails createTestdetails(@RequestBody Testdetails testdetails) {
		LOGGER.debug("Create Testdetails with information: {}" , testdetails);

		testdetails = testdetailsService.create(testdetails);
		LOGGER.debug("Created Testdetails with information: {}" , testdetails);

	    return testdetails;
	}

    @ApiOperation(value = "Returns the Testdetails instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Testdetails getTestdetails(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Testdetails with id: {}" , id);

        Testdetails foundTestdetails = testdetailsService.getById(id);
        LOGGER.debug("Testdetails details with id: {}" , foundTestdetails);

        return foundTestdetails;
    }

    @ApiOperation(value = "Updates the Testdetails instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Testdetails editTestdetails(@PathVariable("id") Integer id, @RequestBody Testdetails testdetails) {
        LOGGER.debug("Editing Testdetails with id: {}" , testdetails.getTestid());

        testdetails.setTestid(id);
        testdetails = testdetailsService.update(testdetails);
        LOGGER.debug("Testdetails details with id: {}" , testdetails);

        return testdetails;
    }

    @ApiOperation(value = "Deletes the Testdetails instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTestdetails(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Testdetails with id: {}" , id);

        Testdetails deletedTestdetails = testdetailsService.delete(id);

        return deletedTestdetails != null;
    }

    @RequestMapping(value = "/testname/{testname}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Testdetails with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Testdetails getByTestname(@PathVariable("testname") String testname) {
        LOGGER.debug("Getting Testdetails with uniques key Testname");
        return testdetailsService.getByTestname(testname);
    }

    /**
     * @deprecated Use {@link #findTestdetails(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Testdetails instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Testdetails> searchTestdetailsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Testdetails list by query filter:{}", (Object) queryFilters);
        return testdetailsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Testdetails instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Testdetails> findTestdetails(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Testdetails list by filter:", query);
        return testdetailsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Testdetails instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Testdetails> filterTestdetails(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Testdetails list by filter", query);
        return testdetailsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTestdetails(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return testdetailsService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTestdetailsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Testdetails.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> testdetailsService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Testdetails instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTestdetails( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Testdetails");
		return testdetailsService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTestdetailsAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return testdetailsService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/academictestsubjectses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the academictestsubjectses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Academictestsubjects> findAssociatedAcademictestsubjectses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated academictestsubjectses");
        return testdetailsService.findAssociatedAcademictestsubjectses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TestdetailsService instance
	 */
	protected void setTestdetailsService(TestdetailsService service) {
		this.testdetailsService = service;
	}

}