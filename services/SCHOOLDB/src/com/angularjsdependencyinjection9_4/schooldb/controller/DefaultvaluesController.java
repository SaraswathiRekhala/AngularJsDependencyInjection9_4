/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.schooldb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.angularjsdependencyinjection9_4.schooldb.Defaultvalues;
import com.angularjsdependencyinjection9_4.schooldb.service.DefaultvaluesService;


/**
 * Controller object for domain model class Defaultvalues.
 * @see Defaultvalues
 */
@RestController("SCHOOLDB.DefaultvaluesController")
@Api(value = "DefaultvaluesController", description = "Exposes APIs to work with Defaultvalues resource.")
@RequestMapping("/SCHOOLDB/Defaultvalues")
public class DefaultvaluesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(DefaultvaluesController.class);

    @Autowired
	@Qualifier("SCHOOLDB.DefaultvaluesService")
	private DefaultvaluesService defaultvaluesService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Defaultvalues instance.")
    @RequestMapping(method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Defaultvalues createDefaultvalues(@RequestPart("wm_data_json") Defaultvalues defaultvalues, @RequestPart(value = "blobcol", required = false) MultipartFile _blobcol) {
		LOGGER.debug("Create Defaultvalues with information: {}" , defaultvalues);

    defaultvalues.setBlobcol(WMMultipartUtils.toByteArray(_blobcol));
		defaultvalues = defaultvaluesService.create(defaultvalues);
		LOGGER.debug("Created Defaultvalues with information: {}" , defaultvalues);

	    return defaultvalues;
	}

    @ApiOperation(value = "Returns the Defaultvalues instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Defaultvalues getDefaultvalues(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Defaultvalues with id: {}" , id);

        Defaultvalues foundDefaultvalues = defaultvaluesService.getById(id);
        LOGGER.debug("Defaultvalues details with id: {}" , foundDefaultvalues);

        return foundDefaultvalues;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in Defaultvalues instance" )
    @RequestMapping(value = "/{id}/content/{fieldName}", method = RequestMethod.GET, produces="application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DownloadResponse getDefaultvaluesBLOBContent(@PathVariable("id") Integer id, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, @RequestParam(value="download", defaultValue = "false") boolean download) {

        LOGGER.debug("Retrieves content for the given BLOB field {} in Defaultvalues instance" , fieldName);

        if(!WMRuntimeUtils.isLob(Defaultvalues.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName + " is not a valid BLOB type");
        }
        Defaultvalues defaultvalues = defaultvaluesService.getById(id);

        return WMMultipartUtils.buildDownloadResponseForBlob(defaultvalues, fieldName, httpServletRequest, download);
    }

    @ApiOperation(value = "Updates the Defaultvalues instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Defaultvalues editDefaultvalues(@PathVariable("id") Integer id, @RequestBody Defaultvalues defaultvalues) {
        LOGGER.debug("Editing Defaultvalues with id: {}" , defaultvalues.getPkid());

        defaultvalues.setPkid(id);
        defaultvalues = defaultvaluesService.update(defaultvalues);
        LOGGER.debug("Defaultvalues details with id: {}" , defaultvalues);

        return defaultvalues;
    }

    @ApiOperation(value = "Updates the Defaultvalues instance associated with the given id.This API should be used when Defaultvalues instance fields that require multipart data.") 
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.POST, consumes = {"multipart/form-data"})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Defaultvalues editDefaultvalues(@PathVariable("id") Integer id, MultipartHttpServletRequest multipartHttpServletRequest) {
        Defaultvalues newDefaultvalues = WMMultipartUtils.toObject(multipartHttpServletRequest, Defaultvalues.class, "SCHOOLDB");
        newDefaultvalues.setPkid(id);

        Defaultvalues oldDefaultvalues = defaultvaluesService.getById(id);
        WMMultipartUtils.updateLobsContent(oldDefaultvalues, newDefaultvalues);
        LOGGER.debug("Updating Defaultvalues with information: {}" , newDefaultvalues);

        return defaultvaluesService.update(newDefaultvalues);
    }

    @ApiOperation(value = "Deletes the Defaultvalues instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteDefaultvalues(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Defaultvalues with id: {}" , id);

        Defaultvalues deletedDefaultvalues = defaultvaluesService.delete(id);

        return deletedDefaultvalues != null;
    }

    /**
     * @deprecated Use {@link #findDefaultvalues(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Defaultvalues instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Defaultvalues> searchDefaultvaluesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Defaultvalues list by query filter:{}", (Object) queryFilters);
        return defaultvaluesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Defaultvalues instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Defaultvalues> findDefaultvalues(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Defaultvalues list by filter:", query);
        return defaultvaluesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Defaultvalues instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Defaultvalues> filterDefaultvalues(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Defaultvalues list by filter", query);
        return defaultvaluesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportDefaultvalues(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return defaultvaluesService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportDefaultvaluesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Defaultvalues.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> defaultvaluesService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Defaultvalues instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countDefaultvalues( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Defaultvalues");
		return defaultvaluesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getDefaultvaluesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return defaultvaluesService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service DefaultvaluesService instance
	 */
	protected void setDefaultvaluesService(DefaultvaluesService service) {
		this.defaultvaluesService = service;
	}

}