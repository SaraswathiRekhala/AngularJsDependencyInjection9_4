/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.schooldb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.angularjsdependencyinjection9_4.schooldb.ViewAllTypes;
import com.angularjsdependencyinjection9_4.schooldb.ViewAllTypesId;
import com.angularjsdependencyinjection9_4.schooldb.service.ViewAllTypesService;


/**
 * Controller object for domain model class ViewAllTypes.
 * @see ViewAllTypes
 */
@RestController("SCHOOLDB.ViewAllTypesController")
@Api(value = "ViewAllTypesController", description = "Exposes APIs to work with ViewAllTypes resource.")
@RequestMapping("/SCHOOLDB/ViewAllTypes")
public class ViewAllTypesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ViewAllTypesController.class);

    @Autowired
	@Qualifier("SCHOOLDB.ViewAllTypesService")
	private ViewAllTypesService viewAllTypesService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new ViewAllTypes instance.")
    @RequestMapping(method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ViewAllTypes createViewAllTypes(@RequestPart("wm_data_json") ViewAllTypes viewAllTypes, @RequestPart(value = "blobcol", required = false) MultipartFile _blobcol) {
		LOGGER.debug("Create ViewAllTypes with information: {}" , viewAllTypes);

    viewAllTypes.setBlobcol(WMMultipartUtils.toByteArray(_blobcol));
		viewAllTypes = viewAllTypesService.create(viewAllTypes);
		LOGGER.debug("Created ViewAllTypes with information: {}" , viewAllTypes);

	    return viewAllTypes;
	}

    @ApiOperation(value = "Returns the ViewAllTypes instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ViewAllTypes getViewAllTypes(@RequestParam("pkid") Integer pkid, @RequestParam("smallintcol") Short smallintcol, @RequestParam("integercol") Integer integercol, @RequestParam("bigintcol") BigInteger bigintcol, @RequestParam("doublecol") BigDecimal doublecol, @RequestParam("longcol") Long longcol, @RequestParam("floatcol") Double floatcol, @RequestParam("bigdeccol") BigDecimal bigdeccol, @RequestParam("charcol") String charcol, @RequestParam("stringcol") String stringcol, @RequestParam("clobcol") String clobcol, @RequestParam("textcol") String textcol, @RequestParam("datecol") Date datecol, @RequestParam("timecol") Time timecol, @RequestParam("timestampcol") Timestamp timestampcol, @RequestParam("booleancol") Boolean booleancol, @RequestParam("blobcol") byte[] blobcol) {

        ViewAllTypesId viewalltypesId = new ViewAllTypesId();
        viewalltypesId.setPkid(pkid);
        viewalltypesId.setSmallintcol(smallintcol);
        viewalltypesId.setIntegercol(integercol);
        viewalltypesId.setBigintcol(bigintcol);
        viewalltypesId.setDoublecol(doublecol);
        viewalltypesId.setLongcol(longcol);
        viewalltypesId.setFloatcol(floatcol);
        viewalltypesId.setBigdeccol(bigdeccol);
        viewalltypesId.setCharcol(charcol);
        viewalltypesId.setStringcol(stringcol);
        viewalltypesId.setClobcol(clobcol);
        viewalltypesId.setTextcol(textcol);
        viewalltypesId.setDatecol(datecol);
        viewalltypesId.setTimecol(timecol);
        viewalltypesId.setTimestampcol(timestampcol);
        viewalltypesId.setBooleancol(booleancol);
        viewalltypesId.setBlobcol(blobcol);

        LOGGER.debug("Getting ViewAllTypes with id: {}" , viewalltypesId);
        ViewAllTypes viewAllTypes = viewAllTypesService.getById(viewalltypesId);
        LOGGER.debug("ViewAllTypes details with id: {}" , viewAllTypes);

        return viewAllTypes;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in ViewAllTypes instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id/content/{fieldName}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public void getViewAllTypesBLOBContent(@RequestParam("pkid") Integer pkid, @RequestParam("smallintcol") Short smallintcol, @RequestParam("integercol") Integer integercol, @RequestParam("bigintcol") BigInteger bigintcol, @RequestParam("doublecol") BigDecimal doublecol, @RequestParam("longcol") Long longcol, @RequestParam("floatcol") Double floatcol, @RequestParam("bigdeccol") BigDecimal bigdeccol, @RequestParam("charcol") String charcol, @RequestParam("stringcol") String stringcol, @RequestParam("clobcol") String clobcol, @RequestParam("textcol") String textcol, @RequestParam("datecol") Date datecol, @RequestParam("timecol") Time timecol, @RequestParam("timestampcol") Timestamp timestampcol, @RequestParam("booleancol") Boolean booleancol, @RequestParam("blobcol") byte[] blobcol, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) {

        LOGGER.debug("Retrieves content for the given BLOB field {} in ViewAllTypes instance" , fieldName);

        if(!WMRuntimeUtils.isLob(ViewAllTypes.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName +  " is not a valid BLOB type");
        }

        ViewAllTypesId viewalltypesId = new ViewAllTypesId();
        viewalltypesId.setPkid(pkid);
        viewalltypesId.setSmallintcol(smallintcol);
        viewalltypesId.setIntegercol(integercol);
        viewalltypesId.setBigintcol(bigintcol);
        viewalltypesId.setDoublecol(doublecol);
        viewalltypesId.setLongcol(longcol);
        viewalltypesId.setFloatcol(floatcol);
        viewalltypesId.setBigdeccol(bigdeccol);
        viewalltypesId.setCharcol(charcol);
        viewalltypesId.setStringcol(stringcol);
        viewalltypesId.setClobcol(clobcol);
        viewalltypesId.setTextcol(textcol);
        viewalltypesId.setDatecol(datecol);
        viewalltypesId.setTimecol(timecol);
        viewalltypesId.setTimestampcol(timestampcol);
        viewalltypesId.setBooleancol(booleancol);
        viewalltypesId.setBlobcol(blobcol);

        ViewAllTypes viewAllTypes = viewAllTypesService.getById(viewalltypesId);
        WMMultipartUtils.buildHttpResponseForBlob(viewAllTypes, fieldName, httpServletRequest, httpServletResponse);
    }



    @ApiOperation(value = "Updates the ViewAllTypes instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ViewAllTypes editViewAllTypes(@RequestParam("pkid") Integer pkid, @RequestParam("smallintcol") Short smallintcol, @RequestParam("integercol") Integer integercol, @RequestParam("bigintcol") BigInteger bigintcol, @RequestParam("doublecol") BigDecimal doublecol, @RequestParam("longcol") Long longcol, @RequestParam("floatcol") Double floatcol, @RequestParam("bigdeccol") BigDecimal bigdeccol, @RequestParam("charcol") String charcol, @RequestParam("stringcol") String stringcol, @RequestParam("clobcol") String clobcol, @RequestParam("textcol") String textcol, @RequestParam("datecol") Date datecol, @RequestParam("timecol") Time timecol, @RequestParam("timestampcol") Timestamp timestampcol, @RequestParam("booleancol") Boolean booleancol, @RequestParam("blobcol") byte[] blobcol, @RequestBody ViewAllTypes viewAllTypes) {

        viewAllTypes.setPkid(pkid);
        viewAllTypes.setSmallintcol(smallintcol);
        viewAllTypes.setIntegercol(integercol);
        viewAllTypes.setBigintcol(bigintcol);
        viewAllTypes.setDoublecol(doublecol);
        viewAllTypes.setLongcol(longcol);
        viewAllTypes.setFloatcol(floatcol);
        viewAllTypes.setBigdeccol(bigdeccol);
        viewAllTypes.setCharcol(charcol);
        viewAllTypes.setStringcol(stringcol);
        viewAllTypes.setClobcol(clobcol);
        viewAllTypes.setTextcol(textcol);
        viewAllTypes.setDatecol(datecol);
        viewAllTypes.setTimecol(timecol);
        viewAllTypes.setTimestampcol(timestampcol);
        viewAllTypes.setBooleancol(booleancol);
        viewAllTypes.setBlobcol(blobcol);

        LOGGER.debug("ViewAllTypes details with id is updated with: {}" , viewAllTypes);

        return viewAllTypesService.update(viewAllTypes);
    }

    @ApiOperation(value = "Updates the ViewAllTypes instance associated with the given composite-id.This API should be used when ViewAllTypes instance fields that require multipart data.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ViewAllTypes editViewAllTypes(@RequestParam("pkid") Integer pkid, @RequestParam("smallintcol") Short smallintcol, @RequestParam("integercol") Integer integercol, @RequestParam("bigintcol") BigInteger bigintcol, @RequestParam("doublecol") BigDecimal doublecol, @RequestParam("longcol") Long longcol, @RequestParam("floatcol") Double floatcol, @RequestParam("bigdeccol") BigDecimal bigdeccol, @RequestParam("charcol") String charcol, @RequestParam("stringcol") String stringcol, @RequestParam("clobcol") String clobcol, @RequestParam("textcol") String textcol, @RequestParam("datecol") Date datecol, @RequestParam("timecol") Time timecol, @RequestParam("timestampcol") Timestamp timestampcol, @RequestParam("booleancol") Boolean booleancol, @RequestParam("blobcol") byte[] blobcol, MultipartHttpServletRequest multipartHttpServletRequest) {
        return this.editViewAllTypesAndMultiparts(pkid, smallintcol, integercol, bigintcol, doublecol, longcol, floatcol, bigdeccol, charcol, stringcol, clobcol, textcol, datecol, timecol, timestampcol, booleancol, blobcol, multipartHttpServletRequest);
    }

    @ApiOperation(value = "Updates the ViewAllTypes instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT,  consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ViewAllTypes editViewAllTypesAndMultiparts(@RequestParam("pkid") Integer pkid, @RequestParam("smallintcol") Short smallintcol, @RequestParam("integercol") Integer integercol, @RequestParam("bigintcol") BigInteger bigintcol, @RequestParam("doublecol") BigDecimal doublecol, @RequestParam("longcol") Long longcol, @RequestParam("floatcol") Double floatcol, @RequestParam("bigdeccol") BigDecimal bigdeccol, @RequestParam("charcol") String charcol, @RequestParam("stringcol") String stringcol, @RequestParam("clobcol") String clobcol, @RequestParam("textcol") String textcol, @RequestParam("datecol") Date datecol, @RequestParam("timecol") Time timecol, @RequestParam("timestampcol") Timestamp timestampcol, @RequestParam("booleancol") Boolean booleancol, @RequestParam("blobcol") byte[] blobcol, MultipartHttpServletRequest multipartHttpServletRequest) { 

        ViewAllTypesId viewalltypesId = new ViewAllTypesId();
        viewalltypesId.setPkid(pkid);
        viewalltypesId.setSmallintcol(smallintcol);
        viewalltypesId.setIntegercol(integercol);
        viewalltypesId.setBigintcol(bigintcol);
        viewalltypesId.setDoublecol(doublecol);
        viewalltypesId.setLongcol(longcol);
        viewalltypesId.setFloatcol(floatcol);
        viewalltypesId.setBigdeccol(bigdeccol);
        viewalltypesId.setCharcol(charcol);
        viewalltypesId.setStringcol(stringcol);
        viewalltypesId.setClobcol(clobcol);
        viewalltypesId.setTextcol(textcol);
        viewalltypesId.setDatecol(datecol);
        viewalltypesId.setTimecol(timecol);
        viewalltypesId.setTimestampcol(timestampcol);
        viewalltypesId.setBooleancol(booleancol);
        viewalltypesId.setBlobcol(blobcol);

        ViewAllTypes newViewAllTypes = WMMultipartUtils.toObject(multipartHttpServletRequest, ViewAllTypes.class, "SCHOOLDB");
        ViewAllTypes oldViewAllTypes = viewAllTypesService.getById(viewalltypesId);

        WMMultipartUtils.updateLobsContent(oldViewAllTypes, newViewAllTypes);

        newViewAllTypes.setPkid(pkid);
        newViewAllTypes.setSmallintcol(smallintcol);
        newViewAllTypes.setIntegercol(integercol);
        newViewAllTypes.setBigintcol(bigintcol);
        newViewAllTypes.setDoublecol(doublecol);
        newViewAllTypes.setLongcol(longcol);
        newViewAllTypes.setFloatcol(floatcol);
        newViewAllTypes.setBigdeccol(bigdeccol);
        newViewAllTypes.setCharcol(charcol);
        newViewAllTypes.setStringcol(stringcol);
        newViewAllTypes.setClobcol(clobcol);
        newViewAllTypes.setTextcol(textcol);
        newViewAllTypes.setDatecol(datecol);
        newViewAllTypes.setTimecol(timecol);
        newViewAllTypes.setTimestampcol(timestampcol);
        newViewAllTypes.setBooleancol(booleancol);
        newViewAllTypes.setBlobcol(blobcol);

        LOGGER.debug("ViewAllTypes details with id is updated with: {}" , newViewAllTypes);

        return viewAllTypesService.update(newViewAllTypes);
    }


    @ApiOperation(value = "Deletes the ViewAllTypes instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteViewAllTypes(@RequestParam("pkid") Integer pkid, @RequestParam("smallintcol") Short smallintcol, @RequestParam("integercol") Integer integercol, @RequestParam("bigintcol") BigInteger bigintcol, @RequestParam("doublecol") BigDecimal doublecol, @RequestParam("longcol") Long longcol, @RequestParam("floatcol") Double floatcol, @RequestParam("bigdeccol") BigDecimal bigdeccol, @RequestParam("charcol") String charcol, @RequestParam("stringcol") String stringcol, @RequestParam("clobcol") String clobcol, @RequestParam("textcol") String textcol, @RequestParam("datecol") Date datecol, @RequestParam("timecol") Time timecol, @RequestParam("timestampcol") Timestamp timestampcol, @RequestParam("booleancol") Boolean booleancol, @RequestParam("blobcol") byte[] blobcol) {

        ViewAllTypesId viewalltypesId = new ViewAllTypesId();
        viewalltypesId.setPkid(pkid);
        viewalltypesId.setSmallintcol(smallintcol);
        viewalltypesId.setIntegercol(integercol);
        viewalltypesId.setBigintcol(bigintcol);
        viewalltypesId.setDoublecol(doublecol);
        viewalltypesId.setLongcol(longcol);
        viewalltypesId.setFloatcol(floatcol);
        viewalltypesId.setBigdeccol(bigdeccol);
        viewalltypesId.setCharcol(charcol);
        viewalltypesId.setStringcol(stringcol);
        viewalltypesId.setClobcol(clobcol);
        viewalltypesId.setTextcol(textcol);
        viewalltypesId.setDatecol(datecol);
        viewalltypesId.setTimecol(timecol);
        viewalltypesId.setTimestampcol(timestampcol);
        viewalltypesId.setBooleancol(booleancol);
        viewalltypesId.setBlobcol(blobcol);

        LOGGER.debug("Deleting ViewAllTypes with id: {}" , viewalltypesId);
        ViewAllTypes viewAllTypes = viewAllTypesService.delete(viewalltypesId);

        return viewAllTypes != null;
    }


    /**
     * @deprecated Use {@link #findViewAllTypes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of ViewAllTypes instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ViewAllTypes> searchViewAllTypesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ViewAllTypes list by query filter:{}", (Object) queryFilters);
        return viewAllTypesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ViewAllTypes instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ViewAllTypes> findViewAllTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ViewAllTypes list by filter:", query);
        return viewAllTypesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ViewAllTypes instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ViewAllTypes> filterViewAllTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ViewAllTypes list by filter", query);
        return viewAllTypesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportViewAllTypes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return viewAllTypesService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportViewAllTypesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = ViewAllTypes.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> viewAllTypesService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of ViewAllTypes instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countViewAllTypes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting ViewAllTypes");
		return viewAllTypesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getViewAllTypesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return viewAllTypesService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ViewAllTypesService instance
	 */
	protected void setViewAllTypesService(ViewAllTypesService service) {
		this.viewAllTypesService = service;
	}

}