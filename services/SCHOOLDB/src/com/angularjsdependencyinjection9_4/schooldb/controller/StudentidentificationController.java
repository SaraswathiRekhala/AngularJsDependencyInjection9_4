/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.schooldb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.angularjsdependencyinjection9_4.schooldb.Studentidentification;
import com.angularjsdependencyinjection9_4.schooldb.service.StudentidentificationService;


/**
 * Controller object for domain model class Studentidentification.
 * @see Studentidentification
 */
@RestController("SCHOOLDB.StudentidentificationController")
@Api(value = "StudentidentificationController", description = "Exposes APIs to work with Studentidentification resource.")
@RequestMapping("/SCHOOLDB/Studentidentification")
public class StudentidentificationController {

    private static final Logger LOGGER = LoggerFactory.getLogger(StudentidentificationController.class);

    @Autowired
	@Qualifier("SCHOOLDB.StudentidentificationService")
	private StudentidentificationService studentidentificationService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Studentidentification instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Studentidentification createStudentidentification(@RequestBody Studentidentification studentidentification) {
		LOGGER.debug("Create Studentidentification with information: {}" , studentidentification);

		studentidentification = studentidentificationService.create(studentidentification);
		LOGGER.debug("Created Studentidentification with information: {}" , studentidentification);

	    return studentidentification;
	}

    @ApiOperation(value = "Returns the Studentidentification instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Studentidentification getStudentidentification(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Studentidentification with id: {}" , id);

        Studentidentification foundStudentidentification = studentidentificationService.getById(id);
        LOGGER.debug("Studentidentification details with id: {}" , foundStudentidentification);

        return foundStudentidentification;
    }

    @ApiOperation(value = "Updates the Studentidentification instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Studentidentification editStudentidentification(@PathVariable("id") Integer id, @RequestBody Studentidentification studentidentification) {
        LOGGER.debug("Editing Studentidentification with id: {}" , studentidentification.getIdentificationid());

        studentidentification.setIdentificationid(id);
        studentidentification = studentidentificationService.update(studentidentification);
        LOGGER.debug("Studentidentification details with id: {}" , studentidentification);

        return studentidentification;
    }

    @ApiOperation(value = "Deletes the Studentidentification instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteStudentidentification(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Studentidentification with id: {}" , id);

        Studentidentification deletedStudentidentification = studentidentificationService.delete(id);

        return deletedStudentidentification != null;
    }

    @RequestMapping(value = "/identificationnumber/{identificationnumber}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Studentidentification with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Studentidentification getByIdentificationnumber(@PathVariable("identificationnumber") String identificationnumber) {
        LOGGER.debug("Getting Studentidentification with uniques key Identificationnumber");
        return studentidentificationService.getByIdentificationnumber(identificationnumber);
    }

    /**
     * @deprecated Use {@link #findStudentidentifications(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Studentidentification instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Studentidentification> searchStudentidentificationsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Studentidentifications list by query filter:{}", (Object) queryFilters);
        return studentidentificationService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Studentidentification instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Studentidentification> findStudentidentifications(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Studentidentifications list by filter:", query);
        return studentidentificationService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Studentidentification instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Studentidentification> filterStudentidentifications(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Studentidentifications list by filter", query);
        return studentidentificationService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportStudentidentifications(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return studentidentificationService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportStudentidentificationsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Studentidentification.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> studentidentificationService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Studentidentification instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countStudentidentifications( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Studentidentifications");
		return studentidentificationService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getStudentidentificationAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return studentidentificationService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service StudentidentificationService instance
	 */
	protected void setStudentidentificationService(StudentidentificationService service) {
		this.studentidentificationService = service;
	}

}