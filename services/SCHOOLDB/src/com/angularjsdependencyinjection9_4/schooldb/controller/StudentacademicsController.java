/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.schooldb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.angularjsdependencyinjection9_4.schooldb.Studentacademics;
import com.angularjsdependencyinjection9_4.schooldb.StudentacademicsId;
import com.angularjsdependencyinjection9_4.schooldb.service.StudentacademicsService;


/**
 * Controller object for domain model class Studentacademics.
 * @see Studentacademics
 */
@RestController("SCHOOLDB.StudentacademicsController")
@Api(value = "StudentacademicsController", description = "Exposes APIs to work with Studentacademics resource.")
@RequestMapping("/SCHOOLDB/Studentacademics")
public class StudentacademicsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(StudentacademicsController.class);

    @Autowired
	@Qualifier("SCHOOLDB.StudentacademicsService")
	private StudentacademicsService studentacademicsService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Studentacademics instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Studentacademics createStudentacademics(@RequestBody Studentacademics studentacademics) {
		LOGGER.debug("Create Studentacademics with information: {}" , studentacademics);

		studentacademics = studentacademicsService.create(studentacademics);
		LOGGER.debug("Created Studentacademics with information: {}" , studentacademics);

	    return studentacademics;
	}

    @ApiOperation(value = "Returns the Studentacademics instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Studentacademics getStudentacademics(@RequestParam("academicyear") String academicyear, @RequestParam("standardid") Integer standardid, @RequestParam("studentid") Integer studentid) {

        StudentacademicsId studentacademicsId = new StudentacademicsId();
        studentacademicsId.setAcademicyear(academicyear);
        studentacademicsId.setStandardid(standardid);
        studentacademicsId.setStudentid(studentid);

        LOGGER.debug("Getting Studentacademics with id: {}" , studentacademicsId);
        Studentacademics studentacademics = studentacademicsService.getById(studentacademicsId);
        LOGGER.debug("Studentacademics details with id: {}" , studentacademics);

        return studentacademics;
    }



    @ApiOperation(value = "Updates the Studentacademics instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Studentacademics editStudentacademics(@RequestParam("academicyear") String academicyear, @RequestParam("standardid") Integer standardid, @RequestParam("studentid") Integer studentid, @RequestBody Studentacademics studentacademics) {

        studentacademics.setAcademicyear(academicyear);
        studentacademics.setStandardid(standardid);
        studentacademics.setStudentid(studentid);

        LOGGER.debug("Studentacademics details with id is updated with: {}" , studentacademics);

        return studentacademicsService.update(studentacademics);
    }


    @ApiOperation(value = "Deletes the Studentacademics instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteStudentacademics(@RequestParam("academicyear") String academicyear, @RequestParam("standardid") Integer standardid, @RequestParam("studentid") Integer studentid) {

        StudentacademicsId studentacademicsId = new StudentacademicsId();
        studentacademicsId.setAcademicyear(academicyear);
        studentacademicsId.setStandardid(standardid);
        studentacademicsId.setStudentid(studentid);

        LOGGER.debug("Deleting Studentacademics with id: {}" , studentacademicsId);
        Studentacademics studentacademics = studentacademicsService.delete(studentacademicsId);

        return studentacademics != null;
    }


    @RequestMapping(value = "/rollnumber/{rollnumber}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Studentacademics with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Studentacademics getByRollnumber(@PathVariable("rollnumber") int rollnumber) {
        LOGGER.debug("Getting Studentacademics with uniques key Rollnumber");
        return studentacademicsService.getByRollnumber(rollnumber);
    }

    /**
     * @deprecated Use {@link #findStudentacademics(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Studentacademics instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Studentacademics> searchStudentacademicsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Studentacademics list by query filter:{}", (Object) queryFilters);
        return studentacademicsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Studentacademics instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Studentacademics> findStudentacademics(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Studentacademics list by filter:", query);
        return studentacademicsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Studentacademics instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Studentacademics> filterStudentacademics(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Studentacademics list by filter", query);
        return studentacademicsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportStudentacademics(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return studentacademicsService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportStudentacademicsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Studentacademics.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> studentacademicsService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Studentacademics instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countStudentacademics( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Studentacademics");
		return studentacademicsService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getStudentacademicsAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return studentacademicsService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service StudentacademicsService instance
	 */
	protected void setStudentacademicsService(StudentacademicsService service) {
		this.studentacademicsService = service;
	}

}