/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.schooldb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.angularjsdependencyinjection9_4.schooldb.Employeedetails;
import com.angularjsdependencyinjection9_4.schooldb.service.EmployeedetailsService;


/**
 * Controller object for domain model class Employeedetails.
 * @see Employeedetails
 */
@RestController("SCHOOLDB.EmployeedetailsController")
@Api(value = "EmployeedetailsController", description = "Exposes APIs to work with Employeedetails resource.")
@RequestMapping("/SCHOOLDB/Employeedetails")
public class EmployeedetailsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeedetailsController.class);

    @Autowired
	@Qualifier("SCHOOLDB.EmployeedetailsService")
	private EmployeedetailsService employeedetailsService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Employeedetails instance.")
    @RequestMapping(method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Employeedetails createEmployeedetails(@RequestPart("wm_data_json") Employeedetails employeedetails, @RequestPart(value = "picurl", required = false) MultipartFile _picurl) {
		LOGGER.debug("Create Employeedetails with information: {}" , employeedetails);

    employeedetails.setPicurl(WMMultipartUtils.toByteArray(_picurl));
		employeedetails = employeedetailsService.create(employeedetails);
		LOGGER.debug("Created Employeedetails with information: {}" , employeedetails);

	    return employeedetails;
	}

    @ApiOperation(value = "Returns the Employeedetails instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Employeedetails getEmployeedetails(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Employeedetails with id: {}" , id);

        Employeedetails foundEmployeedetails = employeedetailsService.getById(id);
        LOGGER.debug("Employeedetails details with id: {}" , foundEmployeedetails);

        return foundEmployeedetails;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in Employeedetails instance" )
    @RequestMapping(value = "/{id}/content/{fieldName}", method = RequestMethod.GET, produces="application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DownloadResponse getEmployeedetailsBLOBContent(@PathVariable("id") Integer id, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, @RequestParam(value="download", defaultValue = "false") boolean download) {

        LOGGER.debug("Retrieves content for the given BLOB field {} in Employeedetails instance" , fieldName);

        if(!WMRuntimeUtils.isLob(Employeedetails.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName + " is not a valid BLOB type");
        }
        Employeedetails employeedetails = employeedetailsService.getById(id);

        return WMMultipartUtils.buildDownloadResponseForBlob(employeedetails, fieldName, httpServletRequest, download);
    }

    @ApiOperation(value = "Updates the Employeedetails instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Employeedetails editEmployeedetails(@PathVariable("id") Integer id, @RequestBody Employeedetails employeedetails) {
        LOGGER.debug("Editing Employeedetails with id: {}" , employeedetails.getEmpid());

        employeedetails.setEmpid(id);
        employeedetails = employeedetailsService.update(employeedetails);
        LOGGER.debug("Employeedetails details with id: {}" , employeedetails);

        return employeedetails;
    }

    @ApiOperation(value = "Updates the Employeedetails instance associated with the given id.This API should be used when Employeedetails instance fields that require multipart data.") 
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.POST, consumes = {"multipart/form-data"})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Employeedetails editEmployeedetails(@PathVariable("id") Integer id, MultipartHttpServletRequest multipartHttpServletRequest) {
        Employeedetails newEmployeedetails = WMMultipartUtils.toObject(multipartHttpServletRequest, Employeedetails.class, "SCHOOLDB");
        newEmployeedetails.setEmpid(id);

        Employeedetails oldEmployeedetails = employeedetailsService.getById(id);
        WMMultipartUtils.updateLobsContent(oldEmployeedetails, newEmployeedetails);
        LOGGER.debug("Updating Employeedetails with information: {}" , newEmployeedetails);

        return employeedetailsService.update(newEmployeedetails);
    }

    @ApiOperation(value = "Deletes the Employeedetails instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteEmployeedetails(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Employeedetails with id: {}" , id);

        Employeedetails deletedEmployeedetails = employeedetailsService.delete(id);

        return deletedEmployeedetails != null;
    }

    /**
     * @deprecated Use {@link #findEmployeedetails(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Employeedetails instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Employeedetails> searchEmployeedetailsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Employeedetails list by query filter:{}", (Object) queryFilters);
        return employeedetailsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Employeedetails instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Employeedetails> findEmployeedetails(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Employeedetails list by filter:", query);
        return employeedetailsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Employeedetails instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Employeedetails> filterEmployeedetails(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Employeedetails list by filter", query);
        return employeedetailsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportEmployeedetails(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return employeedetailsService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportEmployeedetailsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Employeedetails.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> employeedetailsService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Employeedetails instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countEmployeedetails( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Employeedetails");
		return employeedetailsService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getEmployeedetailsAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return employeedetailsService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/employeedetailsesForManagerid", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the employeedetailsesForManagerid instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Employeedetails> findAssociatedEmployeedetailsesForManagerid(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated employeedetailsesForManagerid");
        return employeedetailsService.findAssociatedEmployeedetailsesForManagerid(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EmployeedetailsService instance
	 */
	protected void setEmployeedetailsService(EmployeedetailsService service) {
		this.employeedetailsService = service;
	}

}