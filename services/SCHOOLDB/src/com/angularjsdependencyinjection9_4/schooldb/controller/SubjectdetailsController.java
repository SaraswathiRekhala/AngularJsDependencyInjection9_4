/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.schooldb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.angularjsdependencyinjection9_4.schooldb.Academicsubjects;
import com.angularjsdependencyinjection9_4.schooldb.Subjectdetails;
import com.angularjsdependencyinjection9_4.schooldb.service.SubjectdetailsService;


/**
 * Controller object for domain model class Subjectdetails.
 * @see Subjectdetails
 */
@RestController("SCHOOLDB.SubjectdetailsController")
@Api(value = "SubjectdetailsController", description = "Exposes APIs to work with Subjectdetails resource.")
@RequestMapping("/SCHOOLDB/Subjectdetails")
public class SubjectdetailsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SubjectdetailsController.class);

    @Autowired
	@Qualifier("SCHOOLDB.SubjectdetailsService")
	private SubjectdetailsService subjectdetailsService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Subjectdetails instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Subjectdetails createSubjectdetails(@RequestBody Subjectdetails subjectdetails) {
		LOGGER.debug("Create Subjectdetails with information: {}" , subjectdetails);

		subjectdetails = subjectdetailsService.create(subjectdetails);
		LOGGER.debug("Created Subjectdetails with information: {}" , subjectdetails);

	    return subjectdetails;
	}

    @ApiOperation(value = "Returns the Subjectdetails instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Subjectdetails getSubjectdetails(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Subjectdetails with id: {}" , id);

        Subjectdetails foundSubjectdetails = subjectdetailsService.getById(id);
        LOGGER.debug("Subjectdetails details with id: {}" , foundSubjectdetails);

        return foundSubjectdetails;
    }

    @ApiOperation(value = "Updates the Subjectdetails instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Subjectdetails editSubjectdetails(@PathVariable("id") Integer id, @RequestBody Subjectdetails subjectdetails) {
        LOGGER.debug("Editing Subjectdetails with id: {}" , subjectdetails.getSubjectid());

        subjectdetails.setSubjectid(id);
        subjectdetails = subjectdetailsService.update(subjectdetails);
        LOGGER.debug("Subjectdetails details with id: {}" , subjectdetails);

        return subjectdetails;
    }

    @ApiOperation(value = "Deletes the Subjectdetails instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteSubjectdetails(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Subjectdetails with id: {}" , id);

        Subjectdetails deletedSubjectdetails = subjectdetailsService.delete(id);

        return deletedSubjectdetails != null;
    }

    @RequestMapping(value = "/subjectname/{subjectname}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Subjectdetails with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Subjectdetails getBySubjectname(@PathVariable("subjectname") String subjectname) {
        LOGGER.debug("Getting Subjectdetails with uniques key Subjectname");
        return subjectdetailsService.getBySubjectname(subjectname);
    }

    /**
     * @deprecated Use {@link #findSubjectdetails(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Subjectdetails instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Subjectdetails> searchSubjectdetailsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Subjectdetails list by query filter:{}", (Object) queryFilters);
        return subjectdetailsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Subjectdetails instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Subjectdetails> findSubjectdetails(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Subjectdetails list by filter:", query);
        return subjectdetailsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Subjectdetails instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Subjectdetails> filterSubjectdetails(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Subjectdetails list by filter", query);
        return subjectdetailsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportSubjectdetails(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return subjectdetailsService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportSubjectdetailsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Subjectdetails.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> subjectdetailsService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Subjectdetails instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countSubjectdetails( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Subjectdetails");
		return subjectdetailsService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getSubjectdetailsAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return subjectdetailsService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/academicsubjectses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the academicsubjectses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Academicsubjects> findAssociatedAcademicsubjectses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated academicsubjectses");
        return subjectdetailsService.findAssociatedAcademicsubjectses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SubjectdetailsService instance
	 */
	protected void setSubjectdetailsService(SubjectdetailsService service) {
		this.subjectdetailsService = service;
	}

}