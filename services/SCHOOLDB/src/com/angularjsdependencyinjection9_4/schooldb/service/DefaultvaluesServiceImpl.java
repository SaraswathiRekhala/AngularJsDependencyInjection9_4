/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.schooldb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.angularjsdependencyinjection9_4.schooldb.Defaultvalues;


/**
 * ServiceImpl object for domain model class Defaultvalues.
 *
 * @see Defaultvalues
 */
@Service("SCHOOLDB.DefaultvaluesService")
@Validated
public class DefaultvaluesServiceImpl implements DefaultvaluesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(DefaultvaluesServiceImpl.class);


    @Autowired
    @Qualifier("SCHOOLDB.DefaultvaluesDao")
    private WMGenericDao<Defaultvalues, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Defaultvalues, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SCHOOLDBTransactionManager")
    @Override
    public Defaultvalues create(Defaultvalues defaultvalues) {
        LOGGER.debug("Creating a new Defaultvalues with information: {}", defaultvalues);

        Defaultvalues defaultvaluesCreated = this.wmGenericDao.create(defaultvalues);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(defaultvaluesCreated);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Defaultvalues getById(Integer defaultvaluesId) {
        LOGGER.debug("Finding Defaultvalues by id: {}", defaultvaluesId);
        return this.wmGenericDao.findById(defaultvaluesId);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Defaultvalues findById(Integer defaultvaluesId) {
        LOGGER.debug("Finding Defaultvalues by id: {}", defaultvaluesId);
        try {
            return this.wmGenericDao.findById(defaultvaluesId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Defaultvalues found with id: {}", defaultvaluesId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public List<Defaultvalues> findByMultipleIds(List<Integer> defaultvaluesIds, boolean orderedReturn) {
        LOGGER.debug("Finding Defaultvalues by ids: {}", defaultvaluesIds);

        return this.wmGenericDao.findByMultipleIds(defaultvaluesIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SCHOOLDBTransactionManager")
    @Override
    public Defaultvalues update(Defaultvalues defaultvalues) {
        LOGGER.debug("Updating Defaultvalues with information: {}", defaultvalues);

        this.wmGenericDao.update(defaultvalues);
        this.wmGenericDao.refresh(defaultvalues);

        return defaultvalues;
    }

    @Transactional(value = "SCHOOLDBTransactionManager")
    @Override
    public Defaultvalues delete(Integer defaultvaluesId) {
        LOGGER.debug("Deleting Defaultvalues with id: {}", defaultvaluesId);
        Defaultvalues deleted = this.wmGenericDao.findById(defaultvaluesId);
        if (deleted == null) {
            LOGGER.debug("No Defaultvalues found with id: {}", defaultvaluesId);
            throw new EntityNotFoundException(String.valueOf(defaultvaluesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "SCHOOLDBTransactionManager")
    @Override
    public void delete(Defaultvalues defaultvalues) {
        LOGGER.debug("Deleting Defaultvalues with {}", defaultvalues);
        this.wmGenericDao.delete(defaultvalues);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Page<Defaultvalues> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Defaultvalues");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Page<Defaultvalues> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Defaultvalues");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SCHOOLDB for table Defaultvalues to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service SCHOOLDB for table Defaultvalues to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}