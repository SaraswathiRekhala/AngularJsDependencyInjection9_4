/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.schooldb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.angularjsdependencyinjection9_4.schooldb.Academicsubjects;
import com.angularjsdependencyinjection9_4.schooldb.AcademicsubjectsId;
import com.angularjsdependencyinjection9_4.schooldb.Academictestsubjects;

/**
 * Service object for domain model class {@link Academicsubjects}.
 */
public interface AcademicsubjectsService {

    /**
     * Creates a new Academicsubjects. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Academicsubjects if any.
     *
     * @param academicsubjects Details of the Academicsubjects to be created; value cannot be null.
     * @return The newly created Academicsubjects.
     */
    Academicsubjects create(@Valid Academicsubjects academicsubjects);


	/**
     * Returns Academicsubjects by given id if exists.
     *
     * @param academicsubjectsId The id of the Academicsubjects to get; value cannot be null.
     * @return Academicsubjects associated with the given academicsubjectsId.
	 * @throws EntityNotFoundException If no Academicsubjects is found.
     */
    Academicsubjects getById(AcademicsubjectsId academicsubjectsId);

    /**
     * Find and return the Academicsubjects by given id if exists, returns null otherwise.
     *
     * @param academicsubjectsId The id of the Academicsubjects to get; value cannot be null.
     * @return Academicsubjects associated with the given academicsubjectsId.
     */
    Academicsubjects findById(AcademicsubjectsId academicsubjectsId);

	/**
     * Find and return the list of Academicsubjects by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param academicsubjectsIds The id's of the Academicsubjects to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Academicsubjects associated with the given academicsubjectsIds.
     */
    List<Academicsubjects> findByMultipleIds(List<AcademicsubjectsId> academicsubjectsIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Academicsubjects. It replaces all fields of the existing Academicsubjects with the given academicsubjects.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Academicsubjects if any.
     *
     * @param academicsubjects The details of the Academicsubjects to be updated; value cannot be null.
     * @return The updated Academicsubjects.
     * @throws EntityNotFoundException if no Academicsubjects is found with given input.
     */
    Academicsubjects update(@Valid Academicsubjects academicsubjects);

    /**
     * Deletes an existing Academicsubjects with the given id.
     *
     * @param academicsubjectsId The id of the Academicsubjects to be deleted; value cannot be null.
     * @return The deleted Academicsubjects.
     * @throws EntityNotFoundException if no Academicsubjects found with the given id.
     */
    Academicsubjects delete(AcademicsubjectsId academicsubjectsId);

    /**
     * Deletes an existing Academicsubjects with the given object.
     *
     * @param academicsubjects The instance of the Academicsubjects to be deleted; value cannot be null.
     */
    void delete(Academicsubjects academicsubjects);

    /**
     * Find all Academicsubjects matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Academicsubjects.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Academicsubjects> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Academicsubjects matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Academicsubjects.
     *
     * @see Pageable
     * @see Page
     */
    Page<Academicsubjects> findAll(String query, Pageable pageable);

    /**
     * Exports all Academicsubjects matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Academicsubjects matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Academicsubjects in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Academicsubjects.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated academictestsubjectses for given Academicsubjects id.
     *
     * @param academicyear value of academicyear; value cannot be null
     * @param standardid value of standardid; value cannot be null
     * @param subjectid value of subjectid; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Academictestsubjects instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Academictestsubjects> findAssociatedAcademictestsubjectses(String academicyear, Integer standardid, Integer subjectid, Pageable pageable);

}