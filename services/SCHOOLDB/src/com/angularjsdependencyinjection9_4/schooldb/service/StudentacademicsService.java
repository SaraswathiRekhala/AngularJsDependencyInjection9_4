/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.schooldb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.angularjsdependencyinjection9_4.schooldb.Studentacademics;
import com.angularjsdependencyinjection9_4.schooldb.StudentacademicsId;

/**
 * Service object for domain model class {@link Studentacademics}.
 */
public interface StudentacademicsService {

    /**
     * Creates a new Studentacademics. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Studentacademics if any.
     *
     * @param studentacademics Details of the Studentacademics to be created; value cannot be null.
     * @return The newly created Studentacademics.
     */
    Studentacademics create(@Valid Studentacademics studentacademics);


	/**
     * Returns Studentacademics by given id if exists.
     *
     * @param studentacademicsId The id of the Studentacademics to get; value cannot be null.
     * @return Studentacademics associated with the given studentacademicsId.
	 * @throws EntityNotFoundException If no Studentacademics is found.
     */
    Studentacademics getById(StudentacademicsId studentacademicsId);

    /**
     * Find and return the Studentacademics by given id if exists, returns null otherwise.
     *
     * @param studentacademicsId The id of the Studentacademics to get; value cannot be null.
     * @return Studentacademics associated with the given studentacademicsId.
     */
    Studentacademics findById(StudentacademicsId studentacademicsId);

	/**
     * Find and return the list of Studentacademics by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param studentacademicsIds The id's of the Studentacademics to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Studentacademics associated with the given studentacademicsIds.
     */
    List<Studentacademics> findByMultipleIds(List<StudentacademicsId> studentacademicsIds, boolean orderedReturn);

    /**
     * Find and return the Studentacademics for given rollnumber  if exists.
     *
     * @param rollnumber value of rollnumber; value cannot be null.
     * @return Studentacademics associated with the given inputs.
     * @throws EntityNotFoundException if no matching Studentacademics found.
     */
    Studentacademics getByRollnumber(int rollnumber);

    /**
     * Updates the details of an existing Studentacademics. It replaces all fields of the existing Studentacademics with the given studentacademics.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Studentacademics if any.
     *
     * @param studentacademics The details of the Studentacademics to be updated; value cannot be null.
     * @return The updated Studentacademics.
     * @throws EntityNotFoundException if no Studentacademics is found with given input.
     */
    Studentacademics update(@Valid Studentacademics studentacademics);

    /**
     * Deletes an existing Studentacademics with the given id.
     *
     * @param studentacademicsId The id of the Studentacademics to be deleted; value cannot be null.
     * @return The deleted Studentacademics.
     * @throws EntityNotFoundException if no Studentacademics found with the given id.
     */
    Studentacademics delete(StudentacademicsId studentacademicsId);

    /**
     * Deletes an existing Studentacademics with the given object.
     *
     * @param studentacademics The instance of the Studentacademics to be deleted; value cannot be null.
     */
    void delete(Studentacademics studentacademics);

    /**
     * Find all Studentacademics matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Studentacademics.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Studentacademics> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Studentacademics matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Studentacademics.
     *
     * @see Pageable
     * @see Page
     */
    Page<Studentacademics> findAll(String query, Pageable pageable);

    /**
     * Exports all Studentacademics matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Studentacademics matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Studentacademics in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Studentacademics.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}