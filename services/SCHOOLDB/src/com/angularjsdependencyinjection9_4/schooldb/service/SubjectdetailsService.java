/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.schooldb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.angularjsdependencyinjection9_4.schooldb.Academicsubjects;
import com.angularjsdependencyinjection9_4.schooldb.Subjectdetails;

/**
 * Service object for domain model class {@link Subjectdetails}.
 */
public interface SubjectdetailsService {

    /**
     * Creates a new Subjectdetails. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Subjectdetails if any.
     *
     * @param subjectdetails Details of the Subjectdetails to be created; value cannot be null.
     * @return The newly created Subjectdetails.
     */
    Subjectdetails create(@Valid Subjectdetails subjectdetails);


	/**
     * Returns Subjectdetails by given id if exists.
     *
     * @param subjectdetailsId The id of the Subjectdetails to get; value cannot be null.
     * @return Subjectdetails associated with the given subjectdetailsId.
	 * @throws EntityNotFoundException If no Subjectdetails is found.
     */
    Subjectdetails getById(Integer subjectdetailsId);

    /**
     * Find and return the Subjectdetails by given id if exists, returns null otherwise.
     *
     * @param subjectdetailsId The id of the Subjectdetails to get; value cannot be null.
     * @return Subjectdetails associated with the given subjectdetailsId.
     */
    Subjectdetails findById(Integer subjectdetailsId);

	/**
     * Find and return the list of Subjectdetails by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param subjectdetailsIds The id's of the Subjectdetails to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Subjectdetails associated with the given subjectdetailsIds.
     */
    List<Subjectdetails> findByMultipleIds(List<Integer> subjectdetailsIds, boolean orderedReturn);

    /**
     * Find and return the Subjectdetails for given subjectname  if exists.
     *
     * @param subjectname value of subjectname; value cannot be null.
     * @return Subjectdetails associated with the given inputs.
     * @throws EntityNotFoundException if no matching Subjectdetails found.
     */
    Subjectdetails getBySubjectname(String subjectname);

    /**
     * Updates the details of an existing Subjectdetails. It replaces all fields of the existing Subjectdetails with the given subjectdetails.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Subjectdetails if any.
     *
     * @param subjectdetails The details of the Subjectdetails to be updated; value cannot be null.
     * @return The updated Subjectdetails.
     * @throws EntityNotFoundException if no Subjectdetails is found with given input.
     */
    Subjectdetails update(@Valid Subjectdetails subjectdetails);

    /**
     * Deletes an existing Subjectdetails with the given id.
     *
     * @param subjectdetailsId The id of the Subjectdetails to be deleted; value cannot be null.
     * @return The deleted Subjectdetails.
     * @throws EntityNotFoundException if no Subjectdetails found with the given id.
     */
    Subjectdetails delete(Integer subjectdetailsId);

    /**
     * Deletes an existing Subjectdetails with the given object.
     *
     * @param subjectdetails The instance of the Subjectdetails to be deleted; value cannot be null.
     */
    void delete(Subjectdetails subjectdetails);

    /**
     * Find all Subjectdetails matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Subjectdetails.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Subjectdetails> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Subjectdetails matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Subjectdetails.
     *
     * @see Pageable
     * @see Page
     */
    Page<Subjectdetails> findAll(String query, Pageable pageable);

    /**
     * Exports all Subjectdetails matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Subjectdetails matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Subjectdetails in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Subjectdetails.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated academicsubjectses for given Subjectdetails id.
     *
     * @param subjectid value of subjectid; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Academicsubjects instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Academicsubjects> findAssociatedAcademicsubjectses(Integer subjectid, Pageable pageable);

}