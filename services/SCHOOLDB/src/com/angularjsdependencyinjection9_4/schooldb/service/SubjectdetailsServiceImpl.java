/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.schooldb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.angularjsdependencyinjection9_4.schooldb.Academicsubjects;
import com.angularjsdependencyinjection9_4.schooldb.Subjectdetails;


/**
 * ServiceImpl object for domain model class Subjectdetails.
 *
 * @see Subjectdetails
 */
@Service("SCHOOLDB.SubjectdetailsService")
@Validated
public class SubjectdetailsServiceImpl implements SubjectdetailsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(SubjectdetailsServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("SCHOOLDB.AcademicsubjectsService")
    private AcademicsubjectsService academicsubjectsService;

    @Autowired
    @Qualifier("SCHOOLDB.SubjectdetailsDao")
    private WMGenericDao<Subjectdetails, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Subjectdetails, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SCHOOLDBTransactionManager")
    @Override
    public Subjectdetails create(Subjectdetails subjectdetails) {
        LOGGER.debug("Creating a new Subjectdetails with information: {}", subjectdetails);

        Subjectdetails subjectdetailsCreated = this.wmGenericDao.create(subjectdetails);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(subjectdetailsCreated);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Subjectdetails getById(Integer subjectdetailsId) {
        LOGGER.debug("Finding Subjectdetails by id: {}", subjectdetailsId);
        return this.wmGenericDao.findById(subjectdetailsId);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Subjectdetails findById(Integer subjectdetailsId) {
        LOGGER.debug("Finding Subjectdetails by id: {}", subjectdetailsId);
        try {
            return this.wmGenericDao.findById(subjectdetailsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Subjectdetails found with id: {}", subjectdetailsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public List<Subjectdetails> findByMultipleIds(List<Integer> subjectdetailsIds, boolean orderedReturn) {
        LOGGER.debug("Finding Subjectdetails by ids: {}", subjectdetailsIds);

        return this.wmGenericDao.findByMultipleIds(subjectdetailsIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Subjectdetails getBySubjectname(String subjectname) {
        Map<String, Object> subjectnameMap = new HashMap<>();
        subjectnameMap.put("subjectname", subjectname);

        LOGGER.debug("Finding Subjectdetails by unique keys: {}", subjectnameMap);
        return this.wmGenericDao.findByUniqueKey(subjectnameMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SCHOOLDBTransactionManager")
    @Override
    public Subjectdetails update(Subjectdetails subjectdetails) {
        LOGGER.debug("Updating Subjectdetails with information: {}", subjectdetails);

        this.wmGenericDao.update(subjectdetails);
        this.wmGenericDao.refresh(subjectdetails);

        return subjectdetails;
    }

    @Transactional(value = "SCHOOLDBTransactionManager")
    @Override
    public Subjectdetails delete(Integer subjectdetailsId) {
        LOGGER.debug("Deleting Subjectdetails with id: {}", subjectdetailsId);
        Subjectdetails deleted = this.wmGenericDao.findById(subjectdetailsId);
        if (deleted == null) {
            LOGGER.debug("No Subjectdetails found with id: {}", subjectdetailsId);
            throw new EntityNotFoundException(String.valueOf(subjectdetailsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "SCHOOLDBTransactionManager")
    @Override
    public void delete(Subjectdetails subjectdetails) {
        LOGGER.debug("Deleting Subjectdetails with {}", subjectdetails);
        this.wmGenericDao.delete(subjectdetails);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Page<Subjectdetails> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Subjectdetails");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Page<Subjectdetails> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Subjectdetails");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SCHOOLDB for table Subjectdetails to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service SCHOOLDB for table Subjectdetails to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Page<Academicsubjects> findAssociatedAcademicsubjectses(Integer subjectid, Pageable pageable) {
        LOGGER.debug("Fetching all associated academicsubjectses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("subjectdetails.subjectid = '" + subjectid + "'");

        return academicsubjectsService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service AcademicsubjectsService instance
     */
    protected void setAcademicsubjectsService(AcademicsubjectsService service) {
        this.academicsubjectsService = service;
    }

}