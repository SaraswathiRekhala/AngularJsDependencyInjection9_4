/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.schooldb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.angularjsdependencyinjection9_4.schooldb.Gradedetails;
import com.angularjsdependencyinjection9_4.schooldb.Results;


/**
 * ServiceImpl object for domain model class Gradedetails.
 *
 * @see Gradedetails
 */
@Service("SCHOOLDB.GradedetailsService")
@Validated
public class GradedetailsServiceImpl implements GradedetailsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(GradedetailsServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("SCHOOLDB.ResultsService")
    private ResultsService resultsService;

    @Autowired
    @Qualifier("SCHOOLDB.GradedetailsDao")
    private WMGenericDao<Gradedetails, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Gradedetails, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SCHOOLDBTransactionManager")
    @Override
    public Gradedetails create(Gradedetails gradedetails) {
        LOGGER.debug("Creating a new Gradedetails with information: {}", gradedetails);

        Gradedetails gradedetailsCreated = this.wmGenericDao.create(gradedetails);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(gradedetailsCreated);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Gradedetails getById(Integer gradedetailsId) {
        LOGGER.debug("Finding Gradedetails by id: {}", gradedetailsId);
        return this.wmGenericDao.findById(gradedetailsId);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Gradedetails findById(Integer gradedetailsId) {
        LOGGER.debug("Finding Gradedetails by id: {}", gradedetailsId);
        try {
            return this.wmGenericDao.findById(gradedetailsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Gradedetails found with id: {}", gradedetailsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public List<Gradedetails> findByMultipleIds(List<Integer> gradedetailsIds, boolean orderedReturn) {
        LOGGER.debug("Finding Gradedetails by ids: {}", gradedetailsIds);

        return this.wmGenericDao.findByMultipleIds(gradedetailsIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Gradedetails getByGrade(String grade) {
        Map<String, Object> gradeMap = new HashMap<>();
        gradeMap.put("grade", grade);

        LOGGER.debug("Finding Gradedetails by unique keys: {}", gradeMap);
        return this.wmGenericDao.findByUniqueKey(gradeMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SCHOOLDBTransactionManager")
    @Override
    public Gradedetails update(Gradedetails gradedetails) {
        LOGGER.debug("Updating Gradedetails with information: {}", gradedetails);

        this.wmGenericDao.update(gradedetails);
        this.wmGenericDao.refresh(gradedetails);

        return gradedetails;
    }

    @Transactional(value = "SCHOOLDBTransactionManager")
    @Override
    public Gradedetails delete(Integer gradedetailsId) {
        LOGGER.debug("Deleting Gradedetails with id: {}", gradedetailsId);
        Gradedetails deleted = this.wmGenericDao.findById(gradedetailsId);
        if (deleted == null) {
            LOGGER.debug("No Gradedetails found with id: {}", gradedetailsId);
            throw new EntityNotFoundException(String.valueOf(gradedetailsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "SCHOOLDBTransactionManager")
    @Override
    public void delete(Gradedetails gradedetails) {
        LOGGER.debug("Deleting Gradedetails with {}", gradedetails);
        this.wmGenericDao.delete(gradedetails);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Page<Gradedetails> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Gradedetails");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Page<Gradedetails> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Gradedetails");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SCHOOLDB for table Gradedetails to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service SCHOOLDB for table Gradedetails to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Page<Results> findAssociatedResultses(Integer gradeid, Pageable pageable) {
        LOGGER.debug("Fetching all associated resultses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("gradedetails.gradeid = '" + gradeid + "'");

        return resultsService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service ResultsService instance
     */
    protected void setResultsService(ResultsService service) {
        this.resultsService = service;
    }

}