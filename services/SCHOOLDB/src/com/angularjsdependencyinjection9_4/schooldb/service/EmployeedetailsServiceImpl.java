/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.schooldb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.angularjsdependencyinjection9_4.schooldb.Employeedetails;


/**
 * ServiceImpl object for domain model class Employeedetails.
 *
 * @see Employeedetails
 */
@Service("SCHOOLDB.EmployeedetailsService")
@Validated
public class EmployeedetailsServiceImpl implements EmployeedetailsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeedetailsServiceImpl.class);


    @Autowired
    @Qualifier("SCHOOLDB.EmployeedetailsDao")
    private WMGenericDao<Employeedetails, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Employeedetails, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SCHOOLDBTransactionManager")
    @Override
    public Employeedetails create(Employeedetails employeedetails) {
        LOGGER.debug("Creating a new Employeedetails with information: {}", employeedetails);

        Employeedetails employeedetailsCreated = this.wmGenericDao.create(employeedetails);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(employeedetailsCreated);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Employeedetails getById(Integer employeedetailsId) {
        LOGGER.debug("Finding Employeedetails by id: {}", employeedetailsId);
        return this.wmGenericDao.findById(employeedetailsId);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Employeedetails findById(Integer employeedetailsId) {
        LOGGER.debug("Finding Employeedetails by id: {}", employeedetailsId);
        try {
            return this.wmGenericDao.findById(employeedetailsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Employeedetails found with id: {}", employeedetailsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public List<Employeedetails> findByMultipleIds(List<Integer> employeedetailsIds, boolean orderedReturn) {
        LOGGER.debug("Finding Employeedetails by ids: {}", employeedetailsIds);

        return this.wmGenericDao.findByMultipleIds(employeedetailsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SCHOOLDBTransactionManager")
    @Override
    public Employeedetails update(Employeedetails employeedetails) {
        LOGGER.debug("Updating Employeedetails with information: {}", employeedetails);

        this.wmGenericDao.update(employeedetails);
        this.wmGenericDao.refresh(employeedetails);

        return employeedetails;
    }

    @Transactional(value = "SCHOOLDBTransactionManager")
    @Override
    public Employeedetails delete(Integer employeedetailsId) {
        LOGGER.debug("Deleting Employeedetails with id: {}", employeedetailsId);
        Employeedetails deleted = this.wmGenericDao.findById(employeedetailsId);
        if (deleted == null) {
            LOGGER.debug("No Employeedetails found with id: {}", employeedetailsId);
            throw new EntityNotFoundException(String.valueOf(employeedetailsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "SCHOOLDBTransactionManager")
    @Override
    public void delete(Employeedetails employeedetails) {
        LOGGER.debug("Deleting Employeedetails with {}", employeedetails);
        this.wmGenericDao.delete(employeedetails);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Page<Employeedetails> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Employeedetails");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Page<Employeedetails> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Employeedetails");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SCHOOLDB for table Employeedetails to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service SCHOOLDB for table Employeedetails to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Page<Employeedetails> findAssociatedEmployeedetailsesForManagerid(Integer empid, Pageable pageable) {
        LOGGER.debug("Fetching all associated employeedetailsesForManagerid");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("employeedetailsByManagerid.empid = '" + empid + "'");

        return findAll(queryBuilder.toString(), pageable);
    }


}