/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.schooldb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.angularjsdependencyinjection9_4.schooldb.Academics;
import com.angularjsdependencyinjection9_4.schooldb.Academicyear;


/**
 * ServiceImpl object for domain model class Academicyear.
 *
 * @see Academicyear
 */
@Service("SCHOOLDB.AcademicyearService")
@Validated
public class AcademicyearServiceImpl implements AcademicyearService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AcademicyearServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("SCHOOLDB.AcademicsService")
    private AcademicsService academicsService;

    @Autowired
    @Qualifier("SCHOOLDB.AcademicyearDao")
    private WMGenericDao<Academicyear, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Academicyear, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SCHOOLDBTransactionManager")
    @Override
    public Academicyear create(Academicyear academicyearInstance) {
        LOGGER.debug("Creating a new Academicyear with information: {}", academicyearInstance);

        Academicyear academicyearInstanceCreated = this.wmGenericDao.create(academicyearInstance);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(academicyearInstanceCreated);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Academicyear getById(String academicyearId) {
        LOGGER.debug("Finding Academicyear by id: {}", academicyearId);
        return this.wmGenericDao.findById(academicyearId);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Academicyear findById(String academicyearId) {
        LOGGER.debug("Finding Academicyear by id: {}", academicyearId);
        try {
            return this.wmGenericDao.findById(academicyearId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Academicyear found with id: {}", academicyearId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public List<Academicyear> findByMultipleIds(List<String> academicyearIds, boolean orderedReturn) {
        LOGGER.debug("Finding Academicyears by ids: {}", academicyearIds);

        return this.wmGenericDao.findByMultipleIds(academicyearIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Academicyear getByStartyear(int startyear) {
        Map<String, Object> startyearMap = new HashMap<>();
        startyearMap.put("startyear", startyear);

        LOGGER.debug("Finding Academicyear by unique keys: {}", startyearMap);
        return this.wmGenericDao.findByUniqueKey(startyearMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SCHOOLDBTransactionManager")
    @Override
    public Academicyear update(Academicyear academicyearInstance) {
        LOGGER.debug("Updating Academicyear with information: {}", academicyearInstance);

        this.wmGenericDao.update(academicyearInstance);
        this.wmGenericDao.refresh(academicyearInstance);

        return academicyearInstance;
    }

    @Transactional(value = "SCHOOLDBTransactionManager")
    @Override
    public Academicyear delete(String academicyearId) {
        LOGGER.debug("Deleting Academicyear with id: {}", academicyearId);
        Academicyear deleted = this.wmGenericDao.findById(academicyearId);
        if (deleted == null) {
            LOGGER.debug("No Academicyear found with id: {}", academicyearId);
            throw new EntityNotFoundException(String.valueOf(academicyearId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "SCHOOLDBTransactionManager")
    @Override
    public void delete(Academicyear academicyearInstance) {
        LOGGER.debug("Deleting Academicyear with {}", academicyearInstance);
        this.wmGenericDao.delete(academicyearInstance);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Page<Academicyear> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Academicyears");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Page<Academicyear> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Academicyears");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SCHOOLDB for table Academicyear to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service SCHOOLDB for table Academicyear to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Page<Academics> findAssociatedAcademicses(String academicyear, Pageable pageable) {
        LOGGER.debug("Fetching all associated academicses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("academicyearByAcademicyear.academicyear = '" + academicyear + "'");

        return academicsService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service AcademicsService instance
     */
    protected void setAcademicsService(AcademicsService service) {
        this.academicsService = service;
    }

}