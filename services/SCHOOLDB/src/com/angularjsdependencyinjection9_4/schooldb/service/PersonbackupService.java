/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.schooldb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.angularjsdependencyinjection9_4.schooldb.Personbackup;
import com.angularjsdependencyinjection9_4.schooldb.PersonbackupId;

/**
 * Service object for domain model class {@link Personbackup}.
 */
public interface PersonbackupService {

    /**
     * Creates a new Personbackup. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Personbackup if any.
     *
     * @param personbackup Details of the Personbackup to be created; value cannot be null.
     * @return The newly created Personbackup.
     */
    Personbackup create(@Valid Personbackup personbackup);


	/**
     * Returns Personbackup by given id if exists.
     *
     * @param personbackupId The id of the Personbackup to get; value cannot be null.
     * @return Personbackup associated with the given personbackupId.
	 * @throws EntityNotFoundException If no Personbackup is found.
     */
    Personbackup getById(PersonbackupId personbackupId);

    /**
     * Find and return the Personbackup by given id if exists, returns null otherwise.
     *
     * @param personbackupId The id of the Personbackup to get; value cannot be null.
     * @return Personbackup associated with the given personbackupId.
     */
    Personbackup findById(PersonbackupId personbackupId);

	/**
     * Find and return the list of Personbackups by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param personbackupIds The id's of the Personbackup to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Personbackups associated with the given personbackupIds.
     */
    List<Personbackup> findByMultipleIds(List<PersonbackupId> personbackupIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Personbackup. It replaces all fields of the existing Personbackup with the given personbackup.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Personbackup if any.
     *
     * @param personbackup The details of the Personbackup to be updated; value cannot be null.
     * @return The updated Personbackup.
     * @throws EntityNotFoundException if no Personbackup is found with given input.
     */
    Personbackup update(@Valid Personbackup personbackup);

    /**
     * Deletes an existing Personbackup with the given id.
     *
     * @param personbackupId The id of the Personbackup to be deleted; value cannot be null.
     * @return The deleted Personbackup.
     * @throws EntityNotFoundException if no Personbackup found with the given id.
     */
    Personbackup delete(PersonbackupId personbackupId);

    /**
     * Deletes an existing Personbackup with the given object.
     *
     * @param personbackup The instance of the Personbackup to be deleted; value cannot be null.
     */
    void delete(Personbackup personbackup);

    /**
     * Find all Personbackups matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Personbackups.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Personbackup> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Personbackups matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Personbackups.
     *
     * @see Pageable
     * @see Page
     */
    Page<Personbackup> findAll(String query, Pageable pageable);

    /**
     * Exports all Personbackups matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Personbackups matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Personbackups in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Personbackup.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}