/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.schooldb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.angularjsdependencyinjection9_4.schooldb.Gradedetails;
import com.angularjsdependencyinjection9_4.schooldb.Results;

/**
 * Service object for domain model class {@link Gradedetails}.
 */
public interface GradedetailsService {

    /**
     * Creates a new Gradedetails. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Gradedetails if any.
     *
     * @param gradedetails Details of the Gradedetails to be created; value cannot be null.
     * @return The newly created Gradedetails.
     */
    Gradedetails create(@Valid Gradedetails gradedetails);


	/**
     * Returns Gradedetails by given id if exists.
     *
     * @param gradedetailsId The id of the Gradedetails to get; value cannot be null.
     * @return Gradedetails associated with the given gradedetailsId.
	 * @throws EntityNotFoundException If no Gradedetails is found.
     */
    Gradedetails getById(Integer gradedetailsId);

    /**
     * Find and return the Gradedetails by given id if exists, returns null otherwise.
     *
     * @param gradedetailsId The id of the Gradedetails to get; value cannot be null.
     * @return Gradedetails associated with the given gradedetailsId.
     */
    Gradedetails findById(Integer gradedetailsId);

	/**
     * Find and return the list of Gradedetails by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param gradedetailsIds The id's of the Gradedetails to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Gradedetails associated with the given gradedetailsIds.
     */
    List<Gradedetails> findByMultipleIds(List<Integer> gradedetailsIds, boolean orderedReturn);

    /**
     * Find and return the Gradedetails for given grade  if exists.
     *
     * @param grade value of grade; value cannot be null.
     * @return Gradedetails associated with the given inputs.
     * @throws EntityNotFoundException if no matching Gradedetails found.
     */
    Gradedetails getByGrade(String grade);

    /**
     * Updates the details of an existing Gradedetails. It replaces all fields of the existing Gradedetails with the given gradedetails.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Gradedetails if any.
     *
     * @param gradedetails The details of the Gradedetails to be updated; value cannot be null.
     * @return The updated Gradedetails.
     * @throws EntityNotFoundException if no Gradedetails is found with given input.
     */
    Gradedetails update(@Valid Gradedetails gradedetails);

    /**
     * Deletes an existing Gradedetails with the given id.
     *
     * @param gradedetailsId The id of the Gradedetails to be deleted; value cannot be null.
     * @return The deleted Gradedetails.
     * @throws EntityNotFoundException if no Gradedetails found with the given id.
     */
    Gradedetails delete(Integer gradedetailsId);

    /**
     * Deletes an existing Gradedetails with the given object.
     *
     * @param gradedetails The instance of the Gradedetails to be deleted; value cannot be null.
     */
    void delete(Gradedetails gradedetails);

    /**
     * Find all Gradedetails matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Gradedetails.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Gradedetails> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Gradedetails matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Gradedetails.
     *
     * @see Pageable
     * @see Page
     */
    Page<Gradedetails> findAll(String query, Pageable pageable);

    /**
     * Exports all Gradedetails matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Gradedetails matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Gradedetails in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Gradedetails.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated resultses for given Gradedetails id.
     *
     * @param gradeid value of gradeid; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Results instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Results> findAssociatedResultses(Integer gradeid, Pageable pageable);

}