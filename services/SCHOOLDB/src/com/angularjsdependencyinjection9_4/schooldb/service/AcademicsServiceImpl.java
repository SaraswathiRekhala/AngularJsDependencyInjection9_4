/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.schooldb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.angularjsdependencyinjection9_4.schooldb.Academics;
import com.angularjsdependencyinjection9_4.schooldb.AcademicsId;
import com.angularjsdependencyinjection9_4.schooldb.Academicsubjects;
import com.angularjsdependencyinjection9_4.schooldb.Studentacademics;


/**
 * ServiceImpl object for domain model class Academics.
 *
 * @see Academics
 */
@Service("SCHOOLDB.AcademicsService")
@Validated
public class AcademicsServiceImpl implements AcademicsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AcademicsServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("SCHOOLDB.AcademicsubjectsService")
    private AcademicsubjectsService academicsubjectsService;

    @Lazy
    @Autowired
    @Qualifier("SCHOOLDB.StudentacademicsService")
    private StudentacademicsService studentacademicsService;

    @Autowired
    @Qualifier("SCHOOLDB.AcademicsDao")
    private WMGenericDao<Academics, AcademicsId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Academics, AcademicsId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SCHOOLDBTransactionManager")
    @Override
    public Academics create(Academics academics) {
        LOGGER.debug("Creating a new Academics with information: {}", academics);

        Academics academicsCreated = this.wmGenericDao.create(academics);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(academicsCreated);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Academics getById(AcademicsId academicsId) {
        LOGGER.debug("Finding Academics by id: {}", academicsId);
        return this.wmGenericDao.findById(academicsId);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Academics findById(AcademicsId academicsId) {
        LOGGER.debug("Finding Academics by id: {}", academicsId);
        try {
            return this.wmGenericDao.findById(academicsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Academics found with id: {}", academicsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public List<Academics> findByMultipleIds(List<AcademicsId> academicsIds, boolean orderedReturn) {
        LOGGER.debug("Finding Academics by ids: {}", academicsIds);

        return this.wmGenericDao.findByMultipleIds(academicsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SCHOOLDBTransactionManager")
    @Override
    public Academics update(Academics academics) {
        LOGGER.debug("Updating Academics with information: {}", academics);

        this.wmGenericDao.update(academics);
        this.wmGenericDao.refresh(academics);

        return academics;
    }

    @Transactional(value = "SCHOOLDBTransactionManager")
    @Override
    public Academics delete(AcademicsId academicsId) {
        LOGGER.debug("Deleting Academics with id: {}", academicsId);
        Academics deleted = this.wmGenericDao.findById(academicsId);
        if (deleted == null) {
            LOGGER.debug("No Academics found with id: {}", academicsId);
            throw new EntityNotFoundException(String.valueOf(academicsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "SCHOOLDBTransactionManager")
    @Override
    public void delete(Academics academics) {
        LOGGER.debug("Deleting Academics with {}", academics);
        this.wmGenericDao.delete(academics);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Page<Academics> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Academics");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Page<Academics> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Academics");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SCHOOLDB for table Academics to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service SCHOOLDB for table Academics to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Page<Academicsubjects> findAssociatedAcademicsubjectses(String academicyear, Integer standardid, Pageable pageable) {
        LOGGER.debug("Fetching all associated academicsubjectses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("academics.academicyear = '" + academicyear + "'");
        queryBuilder.append(" and ");
        queryBuilder.append("academics.standardid = '" + standardid + "'");

        return academicsubjectsService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Page<Studentacademics> findAssociatedStudentacademicses(String academicyear, Integer standardid, Pageable pageable) {
        LOGGER.debug("Fetching all associated studentacademicses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("academics.academicyear = '" + academicyear + "'");
        queryBuilder.append(" and ");
        queryBuilder.append("academics.standardid = '" + standardid + "'");

        return studentacademicsService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service AcademicsubjectsService instance
     */
    protected void setAcademicsubjectsService(AcademicsubjectsService service) {
        this.academicsubjectsService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service StudentacademicsService instance
     */
    protected void setStudentacademicsService(StudentacademicsService service) {
        this.studentacademicsService = service;
    }

}