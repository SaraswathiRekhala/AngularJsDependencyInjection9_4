/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.schooldb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.angularjsdependencyinjection9_4.schooldb.Academictestsubjects;
import com.angularjsdependencyinjection9_4.schooldb.AcademictestsubjectsId;
import com.angularjsdependencyinjection9_4.schooldb.Testconducted;


/**
 * ServiceImpl object for domain model class Academictestsubjects.
 *
 * @see Academictestsubjects
 */
@Service("SCHOOLDB.AcademictestsubjectsService")
@Validated
public class AcademictestsubjectsServiceImpl implements AcademictestsubjectsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AcademictestsubjectsServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("SCHOOLDB.TestconductedService")
    private TestconductedService testconductedService;

    @Autowired
    @Qualifier("SCHOOLDB.AcademictestsubjectsDao")
    private WMGenericDao<Academictestsubjects, AcademictestsubjectsId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Academictestsubjects, AcademictestsubjectsId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SCHOOLDBTransactionManager")
    @Override
    public Academictestsubjects create(Academictestsubjects academictestsubjects) {
        LOGGER.debug("Creating a new Academictestsubjects with information: {}", academictestsubjects);

        Academictestsubjects academictestsubjectsCreated = this.wmGenericDao.create(academictestsubjects);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(academictestsubjectsCreated);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Academictestsubjects getById(AcademictestsubjectsId academictestsubjectsId) {
        LOGGER.debug("Finding Academictestsubjects by id: {}", academictestsubjectsId);
        return this.wmGenericDao.findById(academictestsubjectsId);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Academictestsubjects findById(AcademictestsubjectsId academictestsubjectsId) {
        LOGGER.debug("Finding Academictestsubjects by id: {}", academictestsubjectsId);
        try {
            return this.wmGenericDao.findById(academictestsubjectsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Academictestsubjects found with id: {}", academictestsubjectsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public List<Academictestsubjects> findByMultipleIds(List<AcademictestsubjectsId> academictestsubjectsIds, boolean orderedReturn) {
        LOGGER.debug("Finding Academictestsubjects by ids: {}", academictestsubjectsIds);

        return this.wmGenericDao.findByMultipleIds(academictestsubjectsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SCHOOLDBTransactionManager")
    @Override
    public Academictestsubjects update(Academictestsubjects academictestsubjects) {
        LOGGER.debug("Updating Academictestsubjects with information: {}", academictestsubjects);

        this.wmGenericDao.update(academictestsubjects);
        this.wmGenericDao.refresh(academictestsubjects);

        return academictestsubjects;
    }

    @Transactional(value = "SCHOOLDBTransactionManager")
    @Override
    public Academictestsubjects delete(AcademictestsubjectsId academictestsubjectsId) {
        LOGGER.debug("Deleting Academictestsubjects with id: {}", academictestsubjectsId);
        Academictestsubjects deleted = this.wmGenericDao.findById(academictestsubjectsId);
        if (deleted == null) {
            LOGGER.debug("No Academictestsubjects found with id: {}", academictestsubjectsId);
            throw new EntityNotFoundException(String.valueOf(academictestsubjectsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "SCHOOLDBTransactionManager")
    @Override
    public void delete(Academictestsubjects academictestsubjects) {
        LOGGER.debug("Deleting Academictestsubjects with {}", academictestsubjects);
        this.wmGenericDao.delete(academictestsubjects);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Page<Academictestsubjects> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Academictestsubjects");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Page<Academictestsubjects> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Academictestsubjects");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SCHOOLDB for table Academictestsubjects to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service SCHOOLDB for table Academictestsubjects to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Page<Testconducted> findAssociatedTestconducteds(String academicyear, Integer standardid, Integer subjectid, Integer testid, Pageable pageable) {
        LOGGER.debug("Fetching all associated testconducteds");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("academictestsubjects.academicyear = '" + academicyear + "'");
        queryBuilder.append(" and ");
        queryBuilder.append("academictestsubjects.standardid = '" + standardid + "'");
        queryBuilder.append(" and ");
        queryBuilder.append("academictestsubjects.subjectid = '" + subjectid + "'");
        queryBuilder.append(" and ");
        queryBuilder.append("academictestsubjects.testid = '" + testid + "'");

        return testconductedService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service TestconductedService instance
     */
    protected void setTestconductedService(TestconductedService service) {
        this.testconductedService = service;
    }

}