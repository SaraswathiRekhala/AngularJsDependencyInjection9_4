/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.schooldb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.angularjsdependencyinjection9_4.schooldb.Academicsubjects;
import com.angularjsdependencyinjection9_4.schooldb.AcademicsubjectsId;
import com.angularjsdependencyinjection9_4.schooldb.Academictestsubjects;


/**
 * ServiceImpl object for domain model class Academicsubjects.
 *
 * @see Academicsubjects
 */
@Service("SCHOOLDB.AcademicsubjectsService")
@Validated
public class AcademicsubjectsServiceImpl implements AcademicsubjectsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AcademicsubjectsServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("SCHOOLDB.AcademictestsubjectsService")
    private AcademictestsubjectsService academictestsubjectsService;

    @Autowired
    @Qualifier("SCHOOLDB.AcademicsubjectsDao")
    private WMGenericDao<Academicsubjects, AcademicsubjectsId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Academicsubjects, AcademicsubjectsId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SCHOOLDBTransactionManager")
    @Override
    public Academicsubjects create(Academicsubjects academicsubjects) {
        LOGGER.debug("Creating a new Academicsubjects with information: {}", academicsubjects);

        Academicsubjects academicsubjectsCreated = this.wmGenericDao.create(academicsubjects);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(academicsubjectsCreated);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Academicsubjects getById(AcademicsubjectsId academicsubjectsId) {
        LOGGER.debug("Finding Academicsubjects by id: {}", academicsubjectsId);
        return this.wmGenericDao.findById(academicsubjectsId);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Academicsubjects findById(AcademicsubjectsId academicsubjectsId) {
        LOGGER.debug("Finding Academicsubjects by id: {}", academicsubjectsId);
        try {
            return this.wmGenericDao.findById(academicsubjectsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Academicsubjects found with id: {}", academicsubjectsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public List<Academicsubjects> findByMultipleIds(List<AcademicsubjectsId> academicsubjectsIds, boolean orderedReturn) {
        LOGGER.debug("Finding Academicsubjects by ids: {}", academicsubjectsIds);

        return this.wmGenericDao.findByMultipleIds(academicsubjectsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SCHOOLDBTransactionManager")
    @Override
    public Academicsubjects update(Academicsubjects academicsubjects) {
        LOGGER.debug("Updating Academicsubjects with information: {}", academicsubjects);

        this.wmGenericDao.update(academicsubjects);
        this.wmGenericDao.refresh(academicsubjects);

        return academicsubjects;
    }

    @Transactional(value = "SCHOOLDBTransactionManager")
    @Override
    public Academicsubjects delete(AcademicsubjectsId academicsubjectsId) {
        LOGGER.debug("Deleting Academicsubjects with id: {}", academicsubjectsId);
        Academicsubjects deleted = this.wmGenericDao.findById(academicsubjectsId);
        if (deleted == null) {
            LOGGER.debug("No Academicsubjects found with id: {}", academicsubjectsId);
            throw new EntityNotFoundException(String.valueOf(academicsubjectsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "SCHOOLDBTransactionManager")
    @Override
    public void delete(Academicsubjects academicsubjects) {
        LOGGER.debug("Deleting Academicsubjects with {}", academicsubjects);
        this.wmGenericDao.delete(academicsubjects);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Page<Academicsubjects> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Academicsubjects");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Page<Academicsubjects> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Academicsubjects");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SCHOOLDB for table Academicsubjects to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service SCHOOLDB for table Academicsubjects to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Page<Academictestsubjects> findAssociatedAcademictestsubjectses(String academicyear, Integer standardid, Integer subjectid, Pageable pageable) {
        LOGGER.debug("Fetching all associated academictestsubjectses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("academicsubjects.academicyear = '" + academicyear + "'");
        queryBuilder.append(" and ");
        queryBuilder.append("academicsubjects.standardid = '" + standardid + "'");
        queryBuilder.append(" and ");
        queryBuilder.append("academicsubjects.subjectid = '" + subjectid + "'");

        return academictestsubjectsService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service AcademictestsubjectsService instance
     */
    protected void setAcademictestsubjectsService(AcademictestsubjectsService service) {
        this.academictestsubjectsService = service;
    }

}