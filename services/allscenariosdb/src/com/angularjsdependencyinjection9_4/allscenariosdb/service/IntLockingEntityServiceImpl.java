/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.allscenariosdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.angularjsdependencyinjection9_4.allscenariosdb.IntLockingEntity;


/**
 * ServiceImpl object for domain model class IntLockingEntity.
 *
 * @see IntLockingEntity
 */
@Service("allscenariosdb.IntLockingEntityService")
@Validated
public class IntLockingEntityServiceImpl implements IntLockingEntityService {

    private static final Logger LOGGER = LoggerFactory.getLogger(IntLockingEntityServiceImpl.class);


    @Autowired
    @Qualifier("allscenariosdb.IntLockingEntityDao")
    private WMGenericDao<IntLockingEntity, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<IntLockingEntity, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "allscenariosdbTransactionManager")
    @Override
    public IntLockingEntity create(IntLockingEntity intLockingEntity) {
        LOGGER.debug("Creating a new IntLockingEntity with information: {}", intLockingEntity);

        IntLockingEntity intLockingEntityCreated = this.wmGenericDao.create(intLockingEntity);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(intLockingEntityCreated);
    }

    @Transactional(readOnly = true, value = "allscenariosdbTransactionManager")
    @Override
    public IntLockingEntity getById(Integer intlockingentityId) {
        LOGGER.debug("Finding IntLockingEntity by id: {}", intlockingentityId);
        return this.wmGenericDao.findById(intlockingentityId);
    }

    @Transactional(readOnly = true, value = "allscenariosdbTransactionManager")
    @Override
    public IntLockingEntity findById(Integer intlockingentityId) {
        LOGGER.debug("Finding IntLockingEntity by id: {}", intlockingentityId);
        try {
            return this.wmGenericDao.findById(intlockingentityId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No IntLockingEntity found with id: {}", intlockingentityId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "allscenariosdbTransactionManager")
    @Override
    public List<IntLockingEntity> findByMultipleIds(List<Integer> intlockingentityIds, boolean orderedReturn) {
        LOGGER.debug("Finding IntLockingEntities by ids: {}", intlockingentityIds);

        return this.wmGenericDao.findByMultipleIds(intlockingentityIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "allscenariosdbTransactionManager")
    @Override
    public IntLockingEntity getByVersion(Integer version) {
        Map<String, Object> versionMap = new HashMap<>();
        versionMap.put("version", version);

        LOGGER.debug("Finding IntLockingEntity by unique keys: {}", versionMap);
        return this.wmGenericDao.findByUniqueKey(versionMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "allscenariosdbTransactionManager")
    @Override
    public IntLockingEntity update(IntLockingEntity intLockingEntity) {
        LOGGER.debug("Updating IntLockingEntity with information: {}", intLockingEntity);

        this.wmGenericDao.update(intLockingEntity);
        this.wmGenericDao.refresh(intLockingEntity);

        return intLockingEntity;
    }

    @Transactional(value = "allscenariosdbTransactionManager")
    @Override
    public IntLockingEntity delete(Integer intlockingentityId) {
        LOGGER.debug("Deleting IntLockingEntity with id: {}", intlockingentityId);
        IntLockingEntity deleted = this.wmGenericDao.findById(intlockingentityId);
        if (deleted == null) {
            LOGGER.debug("No IntLockingEntity found with id: {}", intlockingentityId);
            throw new EntityNotFoundException(String.valueOf(intlockingentityId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "allscenariosdbTransactionManager")
    @Override
    public void delete(IntLockingEntity intLockingEntity) {
        LOGGER.debug("Deleting IntLockingEntity with {}", intLockingEntity);
        this.wmGenericDao.delete(intLockingEntity);
    }

    @Transactional(readOnly = true, value = "allscenariosdbTransactionManager")
    @Override
    public Page<IntLockingEntity> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all IntLockingEntities");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "allscenariosdbTransactionManager")
    @Override
    public Page<IntLockingEntity> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all IntLockingEntities");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "allscenariosdbTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service allscenariosdb for table IntLockingEntity to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "allscenariosdbTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service allscenariosdb for table IntLockingEntity to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "allscenariosdbTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "allscenariosdbTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}