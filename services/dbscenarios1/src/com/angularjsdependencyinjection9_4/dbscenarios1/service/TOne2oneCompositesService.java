/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios1.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.angularjsdependencyinjection9_4.dbscenarios1.TOne2oneComposites;
import com.angularjsdependencyinjection9_4.dbscenarios1.TOne2oneComposites1Id;

/**
 * Service object for domain model class {@link TOne2oneComposites}.
 */
public interface TOne2oneCompositesService {

    /**
     * Creates a new TOne2oneComposites. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TOne2oneComposites if any.
     *
     * @param tone2oneComposites Details of the TOne2oneComposites to be created; value cannot be null.
     * @return The newly created TOne2oneComposites.
     */
    TOne2oneComposites create(@Valid TOne2oneComposites tone2oneComposites);


	/**
     * Returns TOne2oneComposites by given id if exists.
     *
     * @param tone2onecompositesId The id of the TOne2oneComposites to get; value cannot be null.
     * @return TOne2oneComposites associated with the given tone2onecompositesId.
	 * @throws EntityNotFoundException If no TOne2oneComposites is found.
     */
    TOne2oneComposites getById(TOne2oneComposites1Id tone2onecompositesId);

    /**
     * Find and return the TOne2oneComposites by given id if exists, returns null otherwise.
     *
     * @param tone2onecompositesId The id of the TOne2oneComposites to get; value cannot be null.
     * @return TOne2oneComposites associated with the given tone2onecompositesId.
     */
    TOne2oneComposites findById(TOne2oneComposites1Id tone2onecompositesId);

	/**
     * Find and return the list of TOne2oneComposites by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param tone2onecompositesIds The id's of the TOne2oneComposites to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return TOne2oneComposites associated with the given tone2onecompositesIds.
     */
    List<TOne2oneComposites> findByMultipleIds(List<TOne2oneComposites1Id> tone2onecompositesIds, boolean orderedReturn);


    /**
     * Updates the details of an existing TOne2oneComposites. It replaces all fields of the existing TOne2oneComposites with the given tone2oneComposites.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TOne2oneComposites if any.
     *
     * @param tone2oneComposites The details of the TOne2oneComposites to be updated; value cannot be null.
     * @return The updated TOne2oneComposites.
     * @throws EntityNotFoundException if no TOne2oneComposites is found with given input.
     */
    TOne2oneComposites update(@Valid TOne2oneComposites tone2oneComposites);

    /**
     * Deletes an existing TOne2oneComposites with the given id.
     *
     * @param tone2onecompositesId The id of the TOne2oneComposites to be deleted; value cannot be null.
     * @return The deleted TOne2oneComposites.
     * @throws EntityNotFoundException if no TOne2oneComposites found with the given id.
     */
    TOne2oneComposites delete(TOne2oneComposites1Id tone2onecompositesId);

    /**
     * Deletes an existing TOne2oneComposites with the given object.
     *
     * @param tone2oneComposites The instance of the TOne2oneComposites to be deleted; value cannot be null.
     */
    void delete(TOne2oneComposites tone2oneComposites);

    /**
     * Find all TOne2oneComposites matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TOne2oneComposites.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<TOne2oneComposites> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all TOne2oneComposites matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TOne2oneComposites.
     *
     * @see Pageable
     * @see Page
     */
    Page<TOne2oneComposites> findAll(String query, Pageable pageable);

    /**
     * Exports all TOne2oneComposites matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all TOne2oneComposites matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the TOne2oneComposites in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the TOne2oneComposites.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}