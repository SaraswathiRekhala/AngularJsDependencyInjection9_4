/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios1.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.angularjsdependencyinjection9_4.dbscenarios1.TestXss;


/**
 * ServiceImpl object for domain model class TestXss.
 *
 * @see TestXss
 */
@Service("dbscenarios1.TestXssService")
@Validated
public class TestXssServiceImpl implements TestXssService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TestXssServiceImpl.class);


    @Autowired
    @Qualifier("dbscenarios1.TestXssDao")
    private WMGenericDao<TestXss, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TestXss, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbscenarios1TransactionManager")
    @Override
    public TestXss create(TestXss testXss) {
        LOGGER.debug("Creating a new TestXss with information: {}", testXss);

        TestXss testXssCreated = this.wmGenericDao.create(testXss);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(testXssCreated);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public TestXss getById(Integer testxssId) {
        LOGGER.debug("Finding TestXss by id: {}", testxssId);
        return this.wmGenericDao.findById(testxssId);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public TestXss findById(Integer testxssId) {
        LOGGER.debug("Finding TestXss by id: {}", testxssId);
        try {
            return this.wmGenericDao.findById(testxssId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TestXss found with id: {}", testxssId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public List<TestXss> findByMultipleIds(List<Integer> testxssIds, boolean orderedReturn) {
        LOGGER.debug("Finding TestXsses by ids: {}", testxssIds);

        return this.wmGenericDao.findByMultipleIds(testxssIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dbscenarios1TransactionManager")
    @Override
    public TestXss update(TestXss testXss) {
        LOGGER.debug("Updating TestXss with information: {}", testXss);

        this.wmGenericDao.update(testXss);
        this.wmGenericDao.refresh(testXss);

        return testXss;
    }

    @Transactional(value = "dbscenarios1TransactionManager")
    @Override
    public TestXss delete(Integer testxssId) {
        LOGGER.debug("Deleting TestXss with id: {}", testxssId);
        TestXss deleted = this.wmGenericDao.findById(testxssId);
        if (deleted == null) {
            LOGGER.debug("No TestXss found with id: {}", testxssId);
            throw new EntityNotFoundException(String.valueOf(testxssId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "dbscenarios1TransactionManager")
    @Override
    public void delete(TestXss testXss) {
        LOGGER.debug("Deleting TestXss with {}", testXss);
        this.wmGenericDao.delete(testXss);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public Page<TestXss> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TestXsses");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public Page<TestXss> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TestXsses");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbscenarios1 for table TestXss to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service dbscenarios1 for table TestXss to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}