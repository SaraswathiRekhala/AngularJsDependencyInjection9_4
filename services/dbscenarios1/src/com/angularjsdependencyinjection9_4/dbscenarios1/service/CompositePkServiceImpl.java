/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios1.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.angularjsdependencyinjection9_4.dbscenarios1.CompositePk;
import com.angularjsdependencyinjection9_4.dbscenarios1.CompositePkId;


/**
 * ServiceImpl object for domain model class CompositePk.
 *
 * @see CompositePk
 */
@Service("dbscenarios1.CompositePkService")
@Validated
public class CompositePkServiceImpl implements CompositePkService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CompositePkServiceImpl.class);


    @Autowired
    @Qualifier("dbscenarios1.CompositePkDao")
    private WMGenericDao<CompositePk, CompositePkId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<CompositePk, CompositePkId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbscenarios1TransactionManager")
    @Override
    public CompositePk create(CompositePk compositePk) {
        LOGGER.debug("Creating a new CompositePk with information: {}", compositePk);

        CompositePk compositePkCreated = this.wmGenericDao.create(compositePk);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(compositePkCreated);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public CompositePk getById(CompositePkId compositepkId) {
        LOGGER.debug("Finding CompositePk by id: {}", compositepkId);
        return this.wmGenericDao.findById(compositepkId);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public CompositePk findById(CompositePkId compositepkId) {
        LOGGER.debug("Finding CompositePk by id: {}", compositepkId);
        try {
            return this.wmGenericDao.findById(compositepkId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No CompositePk found with id: {}", compositepkId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public List<CompositePk> findByMultipleIds(List<CompositePkId> compositepkIds, boolean orderedReturn) {
        LOGGER.debug("Finding CompositePks by ids: {}", compositepkIds);

        return this.wmGenericDao.findByMultipleIds(compositepkIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dbscenarios1TransactionManager")
    @Override
    public CompositePk update(CompositePk compositePk) {
        LOGGER.debug("Updating CompositePk with information: {}", compositePk);

        this.wmGenericDao.update(compositePk);
        this.wmGenericDao.refresh(compositePk);

        return compositePk;
    }

    @Transactional(value = "dbscenarios1TransactionManager")
    @Override
    public CompositePk delete(CompositePkId compositepkId) {
        LOGGER.debug("Deleting CompositePk with id: {}", compositepkId);
        CompositePk deleted = this.wmGenericDao.findById(compositepkId);
        if (deleted == null) {
            LOGGER.debug("No CompositePk found with id: {}", compositepkId);
            throw new EntityNotFoundException(String.valueOf(compositepkId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "dbscenarios1TransactionManager")
    @Override
    public void delete(CompositePk compositePk) {
        LOGGER.debug("Deleting CompositePk with {}", compositePk);
        this.wmGenericDao.delete(compositePk);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public Page<CompositePk> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all CompositePks");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public Page<CompositePk> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all CompositePks");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbscenarios1 for table CompositePk to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service dbscenarios1 for table CompositePk to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}