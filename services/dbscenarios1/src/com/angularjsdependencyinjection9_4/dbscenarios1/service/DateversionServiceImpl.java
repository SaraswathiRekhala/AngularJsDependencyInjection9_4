/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios1.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.angularjsdependencyinjection9_4.dbscenarios1.Dateversion;


/**
 * ServiceImpl object for domain model class Dateversion.
 *
 * @see Dateversion
 */
@Service("dbscenarios1.DateversionService")
@Validated
public class DateversionServiceImpl implements DateversionService {

    private static final Logger LOGGER = LoggerFactory.getLogger(DateversionServiceImpl.class);


    @Autowired
    @Qualifier("dbscenarios1.DateversionDao")
    private WMGenericDao<Dateversion, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Dateversion, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbscenarios1TransactionManager")
    @Override
    public Dateversion create(Dateversion dateversion) {
        LOGGER.debug("Creating a new Dateversion with information: {}", dateversion);

        Dateversion dateversionCreated = this.wmGenericDao.create(dateversion);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(dateversionCreated);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public Dateversion getById(Integer dateversionId) {
        LOGGER.debug("Finding Dateversion by id: {}", dateversionId);
        return this.wmGenericDao.findById(dateversionId);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public Dateversion findById(Integer dateversionId) {
        LOGGER.debug("Finding Dateversion by id: {}", dateversionId);
        try {
            return this.wmGenericDao.findById(dateversionId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Dateversion found with id: {}", dateversionId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public List<Dateversion> findByMultipleIds(List<Integer> dateversionIds, boolean orderedReturn) {
        LOGGER.debug("Finding Dateversions by ids: {}", dateversionIds);

        return this.wmGenericDao.findByMultipleIds(dateversionIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dbscenarios1TransactionManager")
    @Override
    public Dateversion update(Dateversion dateversion) {
        LOGGER.debug("Updating Dateversion with information: {}", dateversion);

        this.wmGenericDao.update(dateversion);
        this.wmGenericDao.refresh(dateversion);

        return dateversion;
    }

    @Transactional(value = "dbscenarios1TransactionManager")
    @Override
    public Dateversion delete(Integer dateversionId) {
        LOGGER.debug("Deleting Dateversion with id: {}", dateversionId);
        Dateversion deleted = this.wmGenericDao.findById(dateversionId);
        if (deleted == null) {
            LOGGER.debug("No Dateversion found with id: {}", dateversionId);
            throw new EntityNotFoundException(String.valueOf(dateversionId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "dbscenarios1TransactionManager")
    @Override
    public void delete(Dateversion dateversion) {
        LOGGER.debug("Deleting Dateversion with {}", dateversion);
        this.wmGenericDao.delete(dateversion);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public Page<Dateversion> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Dateversions");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public Page<Dateversion> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Dateversions");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbscenarios1 for table Dateversion to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service dbscenarios1 for table Dateversion to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}