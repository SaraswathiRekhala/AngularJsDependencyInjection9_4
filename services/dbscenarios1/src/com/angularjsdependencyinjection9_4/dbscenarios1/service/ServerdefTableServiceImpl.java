/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios1.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.angularjsdependencyinjection9_4.dbscenarios1.ServerdefTable;


/**
 * ServiceImpl object for domain model class ServerdefTable.
 *
 * @see ServerdefTable
 */
@Service("dbscenarios1.ServerdefTableService")
@Validated
public class ServerdefTableServiceImpl implements ServerdefTableService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ServerdefTableServiceImpl.class);


    @Autowired
    @Qualifier("dbscenarios1.ServerdefTableDao")
    private WMGenericDao<ServerdefTable, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ServerdefTable, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbscenarios1TransactionManager")
    @Override
    public ServerdefTable create(ServerdefTable serverdefTable) {
        LOGGER.debug("Creating a new ServerdefTable with information: {}", serverdefTable);

        ServerdefTable serverdefTableCreated = this.wmGenericDao.create(serverdefTable);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(serverdefTableCreated);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public ServerdefTable getById(Integer serverdeftableId) {
        LOGGER.debug("Finding ServerdefTable by id: {}", serverdeftableId);
        return this.wmGenericDao.findById(serverdeftableId);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public ServerdefTable findById(Integer serverdeftableId) {
        LOGGER.debug("Finding ServerdefTable by id: {}", serverdeftableId);
        try {
            return this.wmGenericDao.findById(serverdeftableId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No ServerdefTable found with id: {}", serverdeftableId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public List<ServerdefTable> findByMultipleIds(List<Integer> serverdeftableIds, boolean orderedReturn) {
        LOGGER.debug("Finding ServerdefTables by ids: {}", serverdeftableIds);

        return this.wmGenericDao.findByMultipleIds(serverdeftableIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dbscenarios1TransactionManager")
    @Override
    public ServerdefTable update(ServerdefTable serverdefTable) {
        LOGGER.debug("Updating ServerdefTable with information: {}", serverdefTable);

        this.wmGenericDao.update(serverdefTable);
        this.wmGenericDao.refresh(serverdefTable);

        return serverdefTable;
    }

    @Transactional(value = "dbscenarios1TransactionManager")
    @Override
    public ServerdefTable delete(Integer serverdeftableId) {
        LOGGER.debug("Deleting ServerdefTable with id: {}", serverdeftableId);
        ServerdefTable deleted = this.wmGenericDao.findById(serverdeftableId);
        if (deleted == null) {
            LOGGER.debug("No ServerdefTable found with id: {}", serverdeftableId);
            throw new EntityNotFoundException(String.valueOf(serverdeftableId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "dbscenarios1TransactionManager")
    @Override
    public void delete(ServerdefTable serverdefTable) {
        LOGGER.debug("Deleting ServerdefTable with {}", serverdefTable);
        this.wmGenericDao.delete(serverdefTable);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public Page<ServerdefTable> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ServerdefTables");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public Page<ServerdefTable> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ServerdefTables");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbscenarios1 for table ServerdefTable to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service dbscenarios1 for table ServerdefTable to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}