/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios1.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.angularjsdependencyinjection9_4.dbscenarios1.Table2Editable;

/**
 * Service object for domain model class {@link Table2Editable}.
 */
public interface Table2EditableService {

    /**
     * Creates a new Table2Editable. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Table2Editable if any.
     *
     * @param table2editable Details of the Table2Editable to be created; value cannot be null.
     * @return The newly created Table2Editable.
     */
    Table2Editable create(@Valid Table2Editable table2editable);


	/**
     * Returns Table2Editable by given id if exists.
     *
     * @param table2editableId The id of the Table2Editable to get; value cannot be null.
     * @return Table2Editable associated with the given table2editableId.
	 * @throws EntityNotFoundException If no Table2Editable is found.
     */
    Table2Editable getById(Integer table2editableId);

    /**
     * Find and return the Table2Editable by given id if exists, returns null otherwise.
     *
     * @param table2editableId The id of the Table2Editable to get; value cannot be null.
     * @return Table2Editable associated with the given table2editableId.
     */
    Table2Editable findById(Integer table2editableId);

	/**
     * Find and return the list of Table2Editables by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param table2editableIds The id's of the Table2Editable to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Table2Editables associated with the given table2editableIds.
     */
    List<Table2Editable> findByMultipleIds(List<Integer> table2editableIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Table2Editable. It replaces all fields of the existing Table2Editable with the given table2editable.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Table2Editable if any.
     *
     * @param table2editable The details of the Table2Editable to be updated; value cannot be null.
     * @return The updated Table2Editable.
     * @throws EntityNotFoundException if no Table2Editable is found with given input.
     */
    Table2Editable update(@Valid Table2Editable table2editable);

    /**
     * Deletes an existing Table2Editable with the given id.
     *
     * @param table2editableId The id of the Table2Editable to be deleted; value cannot be null.
     * @return The deleted Table2Editable.
     * @throws EntityNotFoundException if no Table2Editable found with the given id.
     */
    Table2Editable delete(Integer table2editableId);

    /**
     * Deletes an existing Table2Editable with the given object.
     *
     * @param table2editable The instance of the Table2Editable to be deleted; value cannot be null.
     */
    void delete(Table2Editable table2editable);

    /**
     * Find all Table2Editables matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Table2Editables.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Table2Editable> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Table2Editables matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Table2Editables.
     *
     * @see Pageable
     * @see Page
     */
    Page<Table2Editable> findAll(String query, Pageable pageable);

    /**
     * Exports all Table2Editables matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Table2Editables matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Table2Editables in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Table2Editable.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}