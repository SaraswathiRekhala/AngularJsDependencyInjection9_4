/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios1.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.sql.Date;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.angularjsdependencyinjection9_4.dbscenarios1.Uniquegrouping;


/**
 * ServiceImpl object for domain model class Uniquegrouping.
 *
 * @see Uniquegrouping
 */
@Service("dbscenarios1.UniquegroupingService")
@Validated
public class UniquegroupingServiceImpl implements UniquegroupingService {

    private static final Logger LOGGER = LoggerFactory.getLogger(UniquegroupingServiceImpl.class);


    @Autowired
    @Qualifier("dbscenarios1.UniquegroupingDao")
    private WMGenericDao<Uniquegrouping, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Uniquegrouping, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbscenarios1TransactionManager")
    @Override
    public Uniquegrouping create(Uniquegrouping uniquegrouping) {
        LOGGER.debug("Creating a new Uniquegrouping with information: {}", uniquegrouping);

        Uniquegrouping uniquegroupingCreated = this.wmGenericDao.create(uniquegrouping);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(uniquegroupingCreated);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public Uniquegrouping getById(Integer uniquegroupingId) {
        LOGGER.debug("Finding Uniquegrouping by id: {}", uniquegroupingId);
        return this.wmGenericDao.findById(uniquegroupingId);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public Uniquegrouping findById(Integer uniquegroupingId) {
        LOGGER.debug("Finding Uniquegrouping by id: {}", uniquegroupingId);
        try {
            return this.wmGenericDao.findById(uniquegroupingId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Uniquegrouping found with id: {}", uniquegroupingId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public List<Uniquegrouping> findByMultipleIds(List<Integer> uniquegroupingIds, boolean orderedReturn) {
        LOGGER.debug("Finding Uniquegroupings by ids: {}", uniquegroupingIds);

        return this.wmGenericDao.findByMultipleIds(uniquegroupingIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public Uniquegrouping getByDatecolAndCharcol(Date datecol, String charcol) {
        Map<String, Object> datecolAndCharcolMap = new HashMap<>();
        datecolAndCharcolMap.put("datecol", datecol);
        datecolAndCharcolMap.put("charcol", charcol);

        LOGGER.debug("Finding Uniquegrouping by unique keys: {}", datecolAndCharcolMap);
        return this.wmGenericDao.findByUniqueKey(datecolAndCharcolMap);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public Uniquegrouping getByStringcol(String stringcol) {
        Map<String, Object> stringcolMap = new HashMap<>();
        stringcolMap.put("stringcol", stringcol);

        LOGGER.debug("Finding Uniquegrouping by unique keys: {}", stringcolMap);
        return this.wmGenericDao.findByUniqueKey(stringcolMap);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public Uniquegrouping getByDatecolAndCharcolAndDatetimecol(Date datecol, String charcol, LocalDateTime datetimecol) {
        Map<String, Object> datecolAndCharcolAndDatetimecolMap = new HashMap<>();
        datecolAndCharcolAndDatetimecolMap.put("datecol", datecol);
        datecolAndCharcolAndDatetimecolMap.put("charcol", charcol);
        datecolAndCharcolAndDatetimecolMap.put("datetimecol", datetimecol);

        LOGGER.debug("Finding Uniquegrouping by unique keys: {}", datecolAndCharcolAndDatetimecolMap);
        return this.wmGenericDao.findByUniqueKey(datecolAndCharcolAndDatetimecolMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dbscenarios1TransactionManager")
    @Override
    public Uniquegrouping update(Uniquegrouping uniquegrouping) {
        LOGGER.debug("Updating Uniquegrouping with information: {}", uniquegrouping);

        this.wmGenericDao.update(uniquegrouping);
        this.wmGenericDao.refresh(uniquegrouping);

        return uniquegrouping;
    }

    @Transactional(value = "dbscenarios1TransactionManager")
    @Override
    public Uniquegrouping delete(Integer uniquegroupingId) {
        LOGGER.debug("Deleting Uniquegrouping with id: {}", uniquegroupingId);
        Uniquegrouping deleted = this.wmGenericDao.findById(uniquegroupingId);
        if (deleted == null) {
            LOGGER.debug("No Uniquegrouping found with id: {}", uniquegroupingId);
            throw new EntityNotFoundException(String.valueOf(uniquegroupingId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "dbscenarios1TransactionManager")
    @Override
    public void delete(Uniquegrouping uniquegrouping) {
        LOGGER.debug("Deleting Uniquegrouping with {}", uniquegrouping);
        this.wmGenericDao.delete(uniquegrouping);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public Page<Uniquegrouping> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Uniquegroupings");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public Page<Uniquegrouping> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Uniquegroupings");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbscenarios1 for table Uniquegrouping to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service dbscenarios1 for table Uniquegrouping to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}