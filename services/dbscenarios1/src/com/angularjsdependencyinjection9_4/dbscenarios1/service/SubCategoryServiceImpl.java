/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios1.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.angularjsdependencyinjection9_4.dbscenarios1.ProductTest;
import com.angularjsdependencyinjection9_4.dbscenarios1.SubCategory;


/**
 * ServiceImpl object for domain model class SubCategory.
 *
 * @see SubCategory
 */
@Service("dbscenarios1.SubCategoryService")
@Validated
public class SubCategoryServiceImpl implements SubCategoryService {

    private static final Logger LOGGER = LoggerFactory.getLogger(SubCategoryServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("dbscenarios1.ProductTestService")
    private ProductTestService productTestService;

    @Autowired
    @Qualifier("dbscenarios1.SubCategoryDao")
    private WMGenericDao<SubCategory, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<SubCategory, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbscenarios1TransactionManager")
    @Override
    public SubCategory create(SubCategory subCategory) {
        LOGGER.debug("Creating a new SubCategory with information: {}", subCategory);

        SubCategory subCategoryCreated = this.wmGenericDao.create(subCategory);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(subCategoryCreated);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public SubCategory getById(String subcategoryId) {
        LOGGER.debug("Finding SubCategory by id: {}", subcategoryId);
        return this.wmGenericDao.findById(subcategoryId);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public SubCategory findById(String subcategoryId) {
        LOGGER.debug("Finding SubCategory by id: {}", subcategoryId);
        try {
            return this.wmGenericDao.findById(subcategoryId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No SubCategory found with id: {}", subcategoryId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public List<SubCategory> findByMultipleIds(List<String> subcategoryIds, boolean orderedReturn) {
        LOGGER.debug("Finding SubCategories by ids: {}", subcategoryIds);

        return this.wmGenericDao.findByMultipleIds(subcategoryIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dbscenarios1TransactionManager")
    @Override
    public SubCategory update(SubCategory subCategory) {
        LOGGER.debug("Updating SubCategory with information: {}", subCategory);

        this.wmGenericDao.update(subCategory);
        this.wmGenericDao.refresh(subCategory);

        return subCategory;
    }

    @Transactional(value = "dbscenarios1TransactionManager")
    @Override
    public SubCategory delete(String subcategoryId) {
        LOGGER.debug("Deleting SubCategory with id: {}", subcategoryId);
        SubCategory deleted = this.wmGenericDao.findById(subcategoryId);
        if (deleted == null) {
            LOGGER.debug("No SubCategory found with id: {}", subcategoryId);
            throw new EntityNotFoundException(String.valueOf(subcategoryId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "dbscenarios1TransactionManager")
    @Override
    public void delete(SubCategory subCategory) {
        LOGGER.debug("Deleting SubCategory with {}", subCategory);
        this.wmGenericDao.delete(subCategory);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public Page<SubCategory> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all SubCategories");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public Page<SubCategory> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all SubCategories");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbscenarios1 for table SubCategory to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service dbscenarios1 for table SubCategory to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public Page<ProductTest> findAssociatedProductTests(String subcategory, Pageable pageable) {
        LOGGER.debug("Fetching all associated productTests");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("subCategory.subcategory = '" + subcategory + "'");

        return productTestService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service ProductTestService instance
     */
    protected void setProductTestService(ProductTestService service) {
        this.productTestService = service;
    }

}