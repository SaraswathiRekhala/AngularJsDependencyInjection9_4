/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios1.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.angularjsdependencyinjection9_4.dbscenarios1.PersonBackup;


/**
 * ServiceImpl object for domain model class PersonBackup.
 *
 * @see PersonBackup
 */
@Service("dbscenarios1.PersonBackupService")
@Validated
public class PersonBackupServiceImpl implements PersonBackupService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PersonBackupServiceImpl.class);


    @Autowired
    @Qualifier("dbscenarios1.PersonBackupDao")
    private WMGenericDao<PersonBackup, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PersonBackup, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbscenarios1TransactionManager")
    @Override
    public PersonBackup create(PersonBackup personBackup) {
        LOGGER.debug("Creating a new PersonBackup with information: {}", personBackup);

        PersonBackup personBackupCreated = this.wmGenericDao.create(personBackup);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(personBackupCreated);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public PersonBackup getById(Integer personbackupId) {
        LOGGER.debug("Finding PersonBackup by id: {}", personbackupId);
        return this.wmGenericDao.findById(personbackupId);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public PersonBackup findById(Integer personbackupId) {
        LOGGER.debug("Finding PersonBackup by id: {}", personbackupId);
        try {
            return this.wmGenericDao.findById(personbackupId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No PersonBackup found with id: {}", personbackupId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public List<PersonBackup> findByMultipleIds(List<Integer> personbackupIds, boolean orderedReturn) {
        LOGGER.debug("Finding PersonBackups by ids: {}", personbackupIds);

        return this.wmGenericDao.findByMultipleIds(personbackupIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dbscenarios1TransactionManager")
    @Override
    public PersonBackup update(PersonBackup personBackup) {
        LOGGER.debug("Updating PersonBackup with information: {}", personBackup);

        this.wmGenericDao.update(personBackup);
        this.wmGenericDao.refresh(personBackup);

        return personBackup;
    }

    @Transactional(value = "dbscenarios1TransactionManager")
    @Override
    public PersonBackup delete(Integer personbackupId) {
        LOGGER.debug("Deleting PersonBackup with id: {}", personbackupId);
        PersonBackup deleted = this.wmGenericDao.findById(personbackupId);
        if (deleted == null) {
            LOGGER.debug("No PersonBackup found with id: {}", personbackupId);
            throw new EntityNotFoundException(String.valueOf(personbackupId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "dbscenarios1TransactionManager")
    @Override
    public void delete(PersonBackup personBackup) {
        LOGGER.debug("Deleting PersonBackup with {}", personBackup);
        this.wmGenericDao.delete(personBackup);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public Page<PersonBackup> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all PersonBackups");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public Page<PersonBackup> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all PersonBackups");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbscenarios1 for table PersonBackup to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service dbscenarios1 for table PersonBackup to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}