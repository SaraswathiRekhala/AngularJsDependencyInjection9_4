/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios1.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.angularjsdependencyinjection9_4.dbscenarios1.RenameTable2;


/**
 * ServiceImpl object for domain model class RenameTable2.
 *
 * @see RenameTable2
 */
@Service("dbscenarios1.RenameTable2Service")
@Validated
public class RenameTable2ServiceImpl implements RenameTable2Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(RenameTable2ServiceImpl.class);


    @Autowired
    @Qualifier("dbscenarios1.RenameTable2Dao")
    private WMGenericDao<RenameTable2, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<RenameTable2, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbscenarios1TransactionManager")
    @Override
    public RenameTable2 create(RenameTable2 renameTable2) {
        LOGGER.debug("Creating a new RenameTable2 with information: {}", renameTable2);

        RenameTable2 renameTable2Created = this.wmGenericDao.create(renameTable2);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(renameTable2Created);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public RenameTable2 getById(Integer renametable2Id) {
        LOGGER.debug("Finding RenameTable2 by id: {}", renametable2Id);
        return this.wmGenericDao.findById(renametable2Id);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public RenameTable2 findById(Integer renametable2Id) {
        LOGGER.debug("Finding RenameTable2 by id: {}", renametable2Id);
        try {
            return this.wmGenericDao.findById(renametable2Id);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No RenameTable2 found with id: {}", renametable2Id, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public List<RenameTable2> findByMultipleIds(List<Integer> renametable2Ids, boolean orderedReturn) {
        LOGGER.debug("Finding RenameTable2s by ids: {}", renametable2Ids);

        return this.wmGenericDao.findByMultipleIds(renametable2Ids, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dbscenarios1TransactionManager")
    @Override
    public RenameTable2 update(RenameTable2 renameTable2) {
        LOGGER.debug("Updating RenameTable2 with information: {}", renameTable2);

        this.wmGenericDao.update(renameTable2);
        this.wmGenericDao.refresh(renameTable2);

        return renameTable2;
    }

    @Transactional(value = "dbscenarios1TransactionManager")
    @Override
    public RenameTable2 delete(Integer renametable2Id) {
        LOGGER.debug("Deleting RenameTable2 with id: {}", renametable2Id);
        RenameTable2 deleted = this.wmGenericDao.findById(renametable2Id);
        if (deleted == null) {
            LOGGER.debug("No RenameTable2 found with id: {}", renametable2Id);
            throw new EntityNotFoundException(String.valueOf(renametable2Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "dbscenarios1TransactionManager")
    @Override
    public void delete(RenameTable2 renameTable2) {
        LOGGER.debug("Deleting RenameTable2 with {}", renameTable2);
        this.wmGenericDao.delete(renameTable2);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public Page<RenameTable2> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all RenameTable2s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public Page<RenameTable2> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all RenameTable2s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbscenarios1 for table RenameTable2 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service dbscenarios1 for table RenameTable2 to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}