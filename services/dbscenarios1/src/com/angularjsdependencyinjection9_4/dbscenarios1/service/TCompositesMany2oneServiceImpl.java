/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios1.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.math.BigDecimal;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.angularjsdependencyinjection9_4.dbscenarios1.TCompositesMany2one;
import com.angularjsdependencyinjection9_4.dbscenarios1.TCompositesMany2one1;
import com.angularjsdependencyinjection9_4.dbscenarios1.TCompositesMany2oneId;


/**
 * ServiceImpl object for domain model class TCompositesMany2one.
 *
 * @see TCompositesMany2one
 */
@Service("dbscenarios1.TCompositesMany2oneService")
@Validated
public class TCompositesMany2oneServiceImpl implements TCompositesMany2oneService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TCompositesMany2oneServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("dbscenarios1.TCompositesMany2one1Service")
    private TCompositesMany2one1Service tCompositesMany2one1Service;

    @Autowired
    @Qualifier("dbscenarios1.TCompositesMany2oneDao")
    private WMGenericDao<TCompositesMany2one, TCompositesMany2oneId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TCompositesMany2one, TCompositesMany2oneId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbscenarios1TransactionManager")
    @Override
    public TCompositesMany2one create(TCompositesMany2one tcompositesMany2one) {
        LOGGER.debug("Creating a new TCompositesMany2one with information: {}", tcompositesMany2one);

        TCompositesMany2one tcompositesMany2oneCreated = this.wmGenericDao.create(tcompositesMany2one);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tcompositesMany2oneCreated);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public TCompositesMany2one getById(TCompositesMany2oneId tcompositesmany2oneId) {
        LOGGER.debug("Finding TCompositesMany2one by id: {}", tcompositesmany2oneId);
        return this.wmGenericDao.findById(tcompositesmany2oneId);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public TCompositesMany2one findById(TCompositesMany2oneId tcompositesmany2oneId) {
        LOGGER.debug("Finding TCompositesMany2one by id: {}", tcompositesmany2oneId);
        try {
            return this.wmGenericDao.findById(tcompositesmany2oneId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TCompositesMany2one found with id: {}", tcompositesmany2oneId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public List<TCompositesMany2one> findByMultipleIds(List<TCompositesMany2oneId> tcompositesmany2oneIds, boolean orderedReturn) {
        LOGGER.debug("Finding TCompositesMany2ones by ids: {}", tcompositesmany2oneIds);

        return this.wmGenericDao.findByMultipleIds(tcompositesmany2oneIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dbscenarios1TransactionManager")
    @Override
    public TCompositesMany2one update(TCompositesMany2one tcompositesMany2one) {
        LOGGER.debug("Updating TCompositesMany2one with information: {}", tcompositesMany2one);

        this.wmGenericDao.update(tcompositesMany2one);
        this.wmGenericDao.refresh(tcompositesMany2one);

        return tcompositesMany2one;
    }

    @Transactional(value = "dbscenarios1TransactionManager")
    @Override
    public TCompositesMany2one delete(TCompositesMany2oneId tcompositesmany2oneId) {
        LOGGER.debug("Deleting TCompositesMany2one with id: {}", tcompositesmany2oneId);
        TCompositesMany2one deleted = this.wmGenericDao.findById(tcompositesmany2oneId);
        if (deleted == null) {
            LOGGER.debug("No TCompositesMany2one found with id: {}", tcompositesmany2oneId);
            throw new EntityNotFoundException(String.valueOf(tcompositesmany2oneId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "dbscenarios1TransactionManager")
    @Override
    public void delete(TCompositesMany2one tcompositesMany2one) {
        LOGGER.debug("Deleting TCompositesMany2one with {}", tcompositesMany2one);
        this.wmGenericDao.delete(tcompositesMany2one);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public Page<TCompositesMany2one> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TCompositesMany2ones");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public Page<TCompositesMany2one> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TCompositesMany2ones");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbscenarios1 for table TCompositesMany2one to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service dbscenarios1 for table TCompositesMany2one to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public Page<TCompositesMany2one1> findAssociatedTcompositesMany2one1s(BigDecimal bigdecId, Short shortId, Short byteId, String charId, Pageable pageable) {
        LOGGER.debug("Fetching all associated tcompositesMany2one1s");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("tcompositesMany2one.bigdecId = '" + bigdecId + "'");
        queryBuilder.append(" and ");
        queryBuilder.append("tcompositesMany2one.shortId = '" + shortId + "'");
        queryBuilder.append(" and ");
        queryBuilder.append("tcompositesMany2one.byteId = '" + byteId + "'");
        queryBuilder.append(" and ");
        queryBuilder.append("tcompositesMany2one.charId = '" + charId + "'");

        return tCompositesMany2one1Service.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service TCompositesMany2one1Service instance
     */
    protected void setTCompositesMany2one1Service(TCompositesMany2one1Service service) {
        this.tCompositesMany2one1Service = service;
    }

}