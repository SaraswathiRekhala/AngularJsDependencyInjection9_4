/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios1.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.angularjsdependencyinjection9_4.dbscenarios1.Table2Editable;


/**
 * ServiceImpl object for domain model class Table2Editable.
 *
 * @see Table2Editable
 */
@Service("dbscenarios1.Table2EditableService")
@Validated
public class Table2EditableServiceImpl implements Table2EditableService {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table2EditableServiceImpl.class);


    @Autowired
    @Qualifier("dbscenarios1.Table2EditableDao")
    private WMGenericDao<Table2Editable, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table2Editable, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbscenarios1TransactionManager")
    @Override
    public Table2Editable create(Table2Editable table2editable) {
        LOGGER.debug("Creating a new Table2Editable with information: {}", table2editable);

        Table2Editable table2editableCreated = this.wmGenericDao.create(table2editable);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(table2editableCreated);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public Table2Editable getById(Integer table2editableId) {
        LOGGER.debug("Finding Table2Editable by id: {}", table2editableId);
        return this.wmGenericDao.findById(table2editableId);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public Table2Editable findById(Integer table2editableId) {
        LOGGER.debug("Finding Table2Editable by id: {}", table2editableId);
        try {
            return this.wmGenericDao.findById(table2editableId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Table2Editable found with id: {}", table2editableId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public List<Table2Editable> findByMultipleIds(List<Integer> table2editableIds, boolean orderedReturn) {
        LOGGER.debug("Finding Table2Editables by ids: {}", table2editableIds);

        return this.wmGenericDao.findByMultipleIds(table2editableIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dbscenarios1TransactionManager")
    @Override
    public Table2Editable update(Table2Editable table2editable) {
        LOGGER.debug("Updating Table2Editable with information: {}", table2editable);

        this.wmGenericDao.update(table2editable);
        this.wmGenericDao.refresh(table2editable);

        return table2editable;
    }

    @Transactional(value = "dbscenarios1TransactionManager")
    @Override
    public Table2Editable delete(Integer table2editableId) {
        LOGGER.debug("Deleting Table2Editable with id: {}", table2editableId);
        Table2Editable deleted = this.wmGenericDao.findById(table2editableId);
        if (deleted == null) {
            LOGGER.debug("No Table2Editable found with id: {}", table2editableId);
            throw new EntityNotFoundException(String.valueOf(table2editableId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "dbscenarios1TransactionManager")
    @Override
    public void delete(Table2Editable table2editable) {
        LOGGER.debug("Deleting Table2Editable with {}", table2editable);
        this.wmGenericDao.delete(table2editable);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public Page<Table2Editable> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Table2Editables");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public Page<Table2Editable> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Table2Editables");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbscenarios1 for table Table2Editable to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service dbscenarios1 for table Table2Editable to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}