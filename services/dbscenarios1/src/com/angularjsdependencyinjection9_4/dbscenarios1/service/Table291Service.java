/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios1.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.angularjsdependencyinjection9_4.dbscenarios1.Table291;
import com.angularjsdependencyinjection9_4.dbscenarios1.Table291Id;

/**
 * Service object for domain model class {@link Table291}.
 */
public interface Table291Service {

    /**
     * Creates a new Table291. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Table291 if any.
     *
     * @param table291 Details of the Table291 to be created; value cannot be null.
     * @return The newly created Table291.
     */
    Table291 create(@Valid Table291 table291);


	/**
     * Returns Table291 by given id if exists.
     *
     * @param table291Id The id of the Table291 to get; value cannot be null.
     * @return Table291 associated with the given table291Id.
	 * @throws EntityNotFoundException If no Table291 is found.
     */
    Table291 getById(Table291Id table291Id);

    /**
     * Find and return the Table291 by given id if exists, returns null otherwise.
     *
     * @param table291Id The id of the Table291 to get; value cannot be null.
     * @return Table291 associated with the given table291Id.
     */
    Table291 findById(Table291Id table291Id);

	/**
     * Find and return the list of Table291s by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param table291Ids The id's of the Table291 to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Table291s associated with the given table291Ids.
     */
    List<Table291> findByMultipleIds(List<Table291Id> table291Ids, boolean orderedReturn);


    /**
     * Updates the details of an existing Table291. It replaces all fields of the existing Table291 with the given table291.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Table291 if any.
     *
     * @param table291 The details of the Table291 to be updated; value cannot be null.
     * @return The updated Table291.
     * @throws EntityNotFoundException if no Table291 is found with given input.
     */
    Table291 update(@Valid Table291 table291);

    /**
     * Deletes an existing Table291 with the given id.
     *
     * @param table291Id The id of the Table291 to be deleted; value cannot be null.
     * @return The deleted Table291.
     * @throws EntityNotFoundException if no Table291 found with the given id.
     */
    Table291 delete(Table291Id table291Id);

    /**
     * Deletes an existing Table291 with the given object.
     *
     * @param table291 The instance of the Table291 to be deleted; value cannot be null.
     */
    void delete(Table291 table291);

    /**
     * Find all Table291s matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Table291s.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Table291> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Table291s matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Table291s.
     *
     * @see Pageable
     * @see Page
     */
    Page<Table291> findAll(String query, Pageable pageable);

    /**
     * Exports all Table291s matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Table291s matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Table291s in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Table291.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}