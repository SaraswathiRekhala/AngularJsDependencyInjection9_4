/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios1.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.angularjsdependencyinjection9_4.dbscenarios1.TUcOne2oneParent;


/**
 * ServiceImpl object for domain model class TUcOne2oneParent.
 *
 * @see TUcOne2oneParent
 */
@Service("dbscenarios1.TUcOne2oneParentService")
@Validated
public class TUcOne2oneParentServiceImpl implements TUcOne2oneParentService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TUcOne2oneParentServiceImpl.class);


    @Autowired
    @Qualifier("dbscenarios1.TUcOne2oneParentDao")
    private WMGenericDao<TUcOne2oneParent, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TUcOne2oneParent, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbscenarios1TransactionManager")
    @Override
    public TUcOne2oneParent create(TUcOne2oneParent tucOne2oneParent) {
        LOGGER.debug("Creating a new TUcOne2oneParent with information: {}", tucOne2oneParent);

        TUcOne2oneParent tucOne2oneParentCreated = this.wmGenericDao.create(tucOne2oneParent);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tucOne2oneParentCreated);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public TUcOne2oneParent getById(Integer tucone2oneparentId) {
        LOGGER.debug("Finding TUcOne2oneParent by id: {}", tucone2oneparentId);
        return this.wmGenericDao.findById(tucone2oneparentId);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public TUcOne2oneParent findById(Integer tucone2oneparentId) {
        LOGGER.debug("Finding TUcOne2oneParent by id: {}", tucone2oneparentId);
        try {
            return this.wmGenericDao.findById(tucone2oneparentId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TUcOne2oneParent found with id: {}", tucone2oneparentId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public List<TUcOne2oneParent> findByMultipleIds(List<Integer> tucone2oneparentIds, boolean orderedReturn) {
        LOGGER.debug("Finding TUcOne2oneParents by ids: {}", tucone2oneparentIds);

        return this.wmGenericDao.findByMultipleIds(tucone2oneparentIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public TUcOne2oneParent getByShortCol(Short shortCol) {
        Map<String, Object> shortColMap = new HashMap<>();
        shortColMap.put("shortCol", shortCol);

        LOGGER.debug("Finding TUcOne2oneParent by unique keys: {}", shortColMap);
        return this.wmGenericDao.findByUniqueKey(shortColMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dbscenarios1TransactionManager")
    @Override
    public TUcOne2oneParent update(TUcOne2oneParent tucOne2oneParent) {
        LOGGER.debug("Updating TUcOne2oneParent with information: {}", tucOne2oneParent);

        this.wmGenericDao.update(tucOne2oneParent);
        this.wmGenericDao.refresh(tucOne2oneParent);

        return tucOne2oneParent;
    }

    @Transactional(value = "dbscenarios1TransactionManager")
    @Override
    public TUcOne2oneParent delete(Integer tucone2oneparentId) {
        LOGGER.debug("Deleting TUcOne2oneParent with id: {}", tucone2oneparentId);
        TUcOne2oneParent deleted = this.wmGenericDao.findById(tucone2oneparentId);
        if (deleted == null) {
            LOGGER.debug("No TUcOne2oneParent found with id: {}", tucone2oneparentId);
            throw new EntityNotFoundException(String.valueOf(tucone2oneparentId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "dbscenarios1TransactionManager")
    @Override
    public void delete(TUcOne2oneParent tucOne2oneParent) {
        LOGGER.debug("Deleting TUcOne2oneParent with {}", tucOne2oneParent);
        this.wmGenericDao.delete(tucOne2oneParent);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public Page<TUcOne2oneParent> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TUcOne2oneParents");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public Page<TUcOne2oneParent> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TUcOne2oneParents");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbscenarios1 for table TUcOne2oneParent to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service dbscenarios1 for table TUcOne2oneParent to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}