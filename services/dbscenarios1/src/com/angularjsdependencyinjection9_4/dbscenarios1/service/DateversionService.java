/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios1.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.angularjsdependencyinjection9_4.dbscenarios1.Dateversion;

/**
 * Service object for domain model class {@link Dateversion}.
 */
public interface DateversionService {

    /**
     * Creates a new Dateversion. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Dateversion if any.
     *
     * @param dateversion Details of the Dateversion to be created; value cannot be null.
     * @return The newly created Dateversion.
     */
    Dateversion create(@Valid Dateversion dateversion);


	/**
     * Returns Dateversion by given id if exists.
     *
     * @param dateversionId The id of the Dateversion to get; value cannot be null.
     * @return Dateversion associated with the given dateversionId.
	 * @throws EntityNotFoundException If no Dateversion is found.
     */
    Dateversion getById(Integer dateversionId);

    /**
     * Find and return the Dateversion by given id if exists, returns null otherwise.
     *
     * @param dateversionId The id of the Dateversion to get; value cannot be null.
     * @return Dateversion associated with the given dateversionId.
     */
    Dateversion findById(Integer dateversionId);

	/**
     * Find and return the list of Dateversions by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param dateversionIds The id's of the Dateversion to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Dateversions associated with the given dateversionIds.
     */
    List<Dateversion> findByMultipleIds(List<Integer> dateversionIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Dateversion. It replaces all fields of the existing Dateversion with the given dateversion.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Dateversion if any.
     *
     * @param dateversion The details of the Dateversion to be updated; value cannot be null.
     * @return The updated Dateversion.
     * @throws EntityNotFoundException if no Dateversion is found with given input.
     */
    Dateversion update(@Valid Dateversion dateversion);

    /**
     * Deletes an existing Dateversion with the given id.
     *
     * @param dateversionId The id of the Dateversion to be deleted; value cannot be null.
     * @return The deleted Dateversion.
     * @throws EntityNotFoundException if no Dateversion found with the given id.
     */
    Dateversion delete(Integer dateversionId);

    /**
     * Deletes an existing Dateversion with the given object.
     *
     * @param dateversion The instance of the Dateversion to be deleted; value cannot be null.
     */
    void delete(Dateversion dateversion);

    /**
     * Find all Dateversions matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Dateversions.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Dateversion> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Dateversions matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Dateversions.
     *
     * @see Pageable
     * @see Page
     */
    Page<Dateversion> findAll(String query, Pageable pageable);

    /**
     * Exports all Dateversions matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Dateversions matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Dateversions in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Dateversion.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}