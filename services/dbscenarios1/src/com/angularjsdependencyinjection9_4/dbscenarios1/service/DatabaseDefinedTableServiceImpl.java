/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios1.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.angularjsdependencyinjection9_4.dbscenarios1.DatabaseDefinedTable;


/**
 * ServiceImpl object for domain model class DatabaseDefinedTable.
 *
 * @see DatabaseDefinedTable
 */
@Service("dbscenarios1.DatabaseDefinedTableService")
@Validated
public class DatabaseDefinedTableServiceImpl implements DatabaseDefinedTableService {

    private static final Logger LOGGER = LoggerFactory.getLogger(DatabaseDefinedTableServiceImpl.class);


    @Autowired
    @Qualifier("dbscenarios1.DatabaseDefinedTableDao")
    private WMGenericDao<DatabaseDefinedTable, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<DatabaseDefinedTable, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbscenarios1TransactionManager")
    @Override
    public DatabaseDefinedTable create(DatabaseDefinedTable databaseDefinedTable) {
        LOGGER.debug("Creating a new DatabaseDefinedTable with information: {}", databaseDefinedTable);

        DatabaseDefinedTable databaseDefinedTableCreated = this.wmGenericDao.create(databaseDefinedTable);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(databaseDefinedTableCreated);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public DatabaseDefinedTable getById(Integer databasedefinedtableId) {
        LOGGER.debug("Finding DatabaseDefinedTable by id: {}", databasedefinedtableId);
        return this.wmGenericDao.findById(databasedefinedtableId);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public DatabaseDefinedTable findById(Integer databasedefinedtableId) {
        LOGGER.debug("Finding DatabaseDefinedTable by id: {}", databasedefinedtableId);
        try {
            return this.wmGenericDao.findById(databasedefinedtableId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No DatabaseDefinedTable found with id: {}", databasedefinedtableId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public List<DatabaseDefinedTable> findByMultipleIds(List<Integer> databasedefinedtableIds, boolean orderedReturn) {
        LOGGER.debug("Finding DatabaseDefinedTables by ids: {}", databasedefinedtableIds);

        return this.wmGenericDao.findByMultipleIds(databasedefinedtableIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dbscenarios1TransactionManager")
    @Override
    public DatabaseDefinedTable update(DatabaseDefinedTable databaseDefinedTable) {
        LOGGER.debug("Updating DatabaseDefinedTable with information: {}", databaseDefinedTable);

        this.wmGenericDao.update(databaseDefinedTable);
        this.wmGenericDao.refresh(databaseDefinedTable);

        return databaseDefinedTable;
    }

    @Transactional(value = "dbscenarios1TransactionManager")
    @Override
    public DatabaseDefinedTable delete(Integer databasedefinedtableId) {
        LOGGER.debug("Deleting DatabaseDefinedTable with id: {}", databasedefinedtableId);
        DatabaseDefinedTable deleted = this.wmGenericDao.findById(databasedefinedtableId);
        if (deleted == null) {
            LOGGER.debug("No DatabaseDefinedTable found with id: {}", databasedefinedtableId);
            throw new EntityNotFoundException(String.valueOf(databasedefinedtableId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "dbscenarios1TransactionManager")
    @Override
    public void delete(DatabaseDefinedTable databaseDefinedTable) {
        LOGGER.debug("Deleting DatabaseDefinedTable with {}", databaseDefinedTable);
        this.wmGenericDao.delete(databaseDefinedTable);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public Page<DatabaseDefinedTable> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all DatabaseDefinedTables");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public Page<DatabaseDefinedTable> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all DatabaseDefinedTables");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbscenarios1 for table DatabaseDefinedTable to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service dbscenarios1 for table DatabaseDefinedTable to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}