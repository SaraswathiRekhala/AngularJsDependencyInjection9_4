/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios1.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.angularjsdependencyinjection9_4.dbscenarios1.DateDataTypes;


/**
 * ServiceImpl object for domain model class DateDataTypes.
 *
 * @see DateDataTypes
 */
@Service("dbscenarios1.DateDataTypesService")
@Validated
public class DateDataTypesServiceImpl implements DateDataTypesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(DateDataTypesServiceImpl.class);


    @Autowired
    @Qualifier("dbscenarios1.DateDataTypesDao")
    private WMGenericDao<DateDataTypes, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<DateDataTypes, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbscenarios1TransactionManager")
    @Override
    public DateDataTypes create(DateDataTypes dateDataTypes) {
        LOGGER.debug("Creating a new DateDataTypes with information: {}", dateDataTypes);

        DateDataTypes dateDataTypesCreated = this.wmGenericDao.create(dateDataTypes);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(dateDataTypesCreated);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public DateDataTypes getById(Integer datedatatypesId) {
        LOGGER.debug("Finding DateDataTypes by id: {}", datedatatypesId);
        return this.wmGenericDao.findById(datedatatypesId);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public DateDataTypes findById(Integer datedatatypesId) {
        LOGGER.debug("Finding DateDataTypes by id: {}", datedatatypesId);
        try {
            return this.wmGenericDao.findById(datedatatypesId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No DateDataTypes found with id: {}", datedatatypesId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public List<DateDataTypes> findByMultipleIds(List<Integer> datedatatypesIds, boolean orderedReturn) {
        LOGGER.debug("Finding DateDataTypes by ids: {}", datedatatypesIds);

        return this.wmGenericDao.findByMultipleIds(datedatatypesIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dbscenarios1TransactionManager")
    @Override
    public DateDataTypes update(DateDataTypes dateDataTypes) {
        LOGGER.debug("Updating DateDataTypes with information: {}", dateDataTypes);

        this.wmGenericDao.update(dateDataTypes);
        this.wmGenericDao.refresh(dateDataTypes);

        return dateDataTypes;
    }

    @Transactional(value = "dbscenarios1TransactionManager")
    @Override
    public DateDataTypes delete(Integer datedatatypesId) {
        LOGGER.debug("Deleting DateDataTypes with id: {}", datedatatypesId);
        DateDataTypes deleted = this.wmGenericDao.findById(datedatatypesId);
        if (deleted == null) {
            LOGGER.debug("No DateDataTypes found with id: {}", datedatatypesId);
            throw new EntityNotFoundException(String.valueOf(datedatatypesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "dbscenarios1TransactionManager")
    @Override
    public void delete(DateDataTypes dateDataTypes) {
        LOGGER.debug("Deleting DateDataTypes with {}", dateDataTypes);
        this.wmGenericDao.delete(dateDataTypes);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public Page<DateDataTypes> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all DateDataTypes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public Page<DateDataTypes> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all DateDataTypes");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbscenarios1 for table DateDataTypes to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service dbscenarios1 for table DateDataTypes to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}