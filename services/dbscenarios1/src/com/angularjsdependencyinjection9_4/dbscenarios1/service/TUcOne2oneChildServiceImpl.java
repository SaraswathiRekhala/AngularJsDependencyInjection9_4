/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios1.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.angularjsdependencyinjection9_4.dbscenarios1.TUcOne2oneChild;


/**
 * ServiceImpl object for domain model class TUcOne2oneChild.
 *
 * @see TUcOne2oneChild
 */
@Service("dbscenarios1.TUcOne2oneChildService")
@Validated
public class TUcOne2oneChildServiceImpl implements TUcOne2oneChildService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TUcOne2oneChildServiceImpl.class);


    @Autowired
    @Qualifier("dbscenarios1.TUcOne2oneChildDao")
    private WMGenericDao<TUcOne2oneChild, Short> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TUcOne2oneChild, Short> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbscenarios1TransactionManager")
    @Override
    public TUcOne2oneChild create(TUcOne2oneChild tucOne2oneChild) {
        LOGGER.debug("Creating a new TUcOne2oneChild with information: {}", tucOne2oneChild);

        TUcOne2oneChild tucOne2oneChildCreated = this.wmGenericDao.create(tucOne2oneChild);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tucOne2oneChildCreated);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public TUcOne2oneChild getById(Short tucone2onechildId) {
        LOGGER.debug("Finding TUcOne2oneChild by id: {}", tucone2onechildId);
        return this.wmGenericDao.findById(tucone2onechildId);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public TUcOne2oneChild findById(Short tucone2onechildId) {
        LOGGER.debug("Finding TUcOne2oneChild by id: {}", tucone2onechildId);
        try {
            return this.wmGenericDao.findById(tucone2onechildId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TUcOne2oneChild found with id: {}", tucone2onechildId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public List<TUcOne2oneChild> findByMultipleIds(List<Short> tucone2onechildIds, boolean orderedReturn) {
        LOGGER.debug("Finding TUcOne2oneChilds by ids: {}", tucone2onechildIds);

        return this.wmGenericDao.findByMultipleIds(tucone2onechildIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dbscenarios1TransactionManager")
    @Override
    public TUcOne2oneChild update(TUcOne2oneChild tucOne2oneChild) {
        LOGGER.debug("Updating TUcOne2oneChild with information: {}", tucOne2oneChild);

        this.wmGenericDao.update(tucOne2oneChild);
        this.wmGenericDao.refresh(tucOne2oneChild);

        return tucOne2oneChild;
    }

    @Transactional(value = "dbscenarios1TransactionManager")
    @Override
    public TUcOne2oneChild delete(Short tucone2onechildId) {
        LOGGER.debug("Deleting TUcOne2oneChild with id: {}", tucone2onechildId);
        TUcOne2oneChild deleted = this.wmGenericDao.findById(tucone2onechildId);
        if (deleted == null) {
            LOGGER.debug("No TUcOne2oneChild found with id: {}", tucone2onechildId);
            throw new EntityNotFoundException(String.valueOf(tucone2onechildId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "dbscenarios1TransactionManager")
    @Override
    public void delete(TUcOne2oneChild tucOne2oneChild) {
        LOGGER.debug("Deleting TUcOne2oneChild with {}", tucOne2oneChild);
        this.wmGenericDao.delete(tucOne2oneChild);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public Page<TUcOne2oneChild> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TUcOne2oneChilds");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public Page<TUcOne2oneChild> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TUcOne2oneChilds");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbscenarios1 for table TUcOne2oneChild to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service dbscenarios1 for table TUcOne2oneChild to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbscenarios1TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}