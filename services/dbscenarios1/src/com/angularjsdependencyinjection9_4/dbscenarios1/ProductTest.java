/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios1;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * ProductTest generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`PRODUCT_TEST`")
public class ProductTest implements Serializable {

    private Integer id;
    private String name;
    private String category;
    private String subcategory;
    private Category categoryByCategory;
    private SubCategory subCategory;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`ID`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`NAME`", nullable = true, length = 255)
    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Column(name = "`CATEGORY`", nullable = true, length = 255)
    public String getCategory() {
        return this.category;
    }

    public void setCategory(String category) {
        this.category = category;
    }

    @Column(name = "`SUBCATEGORY`", nullable = true, length = 255)
    public String getSubcategory() {
        return this.subcategory;
    }

    public void setSubcategory(String subcategory) {
        this.subcategory = subcategory;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`CATEGORY`", referencedColumnName = "`CATRGORY`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_PRODUCT_TEST_TO_CATEGtF0Zv`"))
    @Fetch(FetchMode.JOIN)
    public Category getCategoryByCategory() {
        return this.categoryByCategory;
    }

    public void setCategoryByCategory(Category categoryByCategory) {
        if(categoryByCategory != null) {
            this.category = categoryByCategory.getCatrgory();
        }

        this.categoryByCategory = categoryByCategory;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`SUBCATEGORY`", referencedColumnName = "`SUBCATEGORY`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_PRODUCT_TEST_TO_SUB_CXHRbW`"))
    @Fetch(FetchMode.JOIN)
    public SubCategory getSubCategory() {
        return this.subCategory;
    }

    public void setSubCategory(SubCategory subCategory) {
        if(subCategory != null) {
            this.subcategory = subCategory.getSubcategory();
        }

        this.subCategory = subCategory;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ProductTest)) return false;
        final ProductTest productTest = (ProductTest) o;
        return Objects.equals(getId(), productTest.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}