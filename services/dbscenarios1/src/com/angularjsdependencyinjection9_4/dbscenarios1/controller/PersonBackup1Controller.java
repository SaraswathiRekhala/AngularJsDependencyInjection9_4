/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios1.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.angularjsdependencyinjection9_4.dbscenarios1.PersonBackup1;
import com.angularjsdependencyinjection9_4.dbscenarios1.PersonBackup1Id;
import com.angularjsdependencyinjection9_4.dbscenarios1.service.PersonBackup1Service;


/**
 * Controller object for domain model class PersonBackup1.
 * @see PersonBackup1
 */
@RestController("dbscenarios1.PersonBackup1Controller")
@Api(value = "PersonBackup1Controller", description = "Exposes APIs to work with PersonBackup1 resource.")
@RequestMapping("/dbscenarios1/PersonBackup1")
public class PersonBackup1Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(PersonBackup1Controller.class);

    @Autowired
	@Qualifier("dbscenarios1.PersonBackup1Service")
	private PersonBackup1Service personBackup1Service;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new PersonBackup1 instance.")
    @RequestMapping(method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PersonBackup1 createPersonBackup1(@RequestPart("wm_data_json") PersonBackup1 personBackup1, @RequestPart(value = "column6", required = false) MultipartFile _column6) {
		LOGGER.debug("Create PersonBackup1 with information: {}" , personBackup1);

    personBackup1.setColumn6(WMMultipartUtils.toByteArray(_column6));
		personBackup1 = personBackup1Service.create(personBackup1);
		LOGGER.debug("Created PersonBackup1 with information: {}" , personBackup1);

	    return personBackup1;
	}

    @ApiOperation(value = "Returns the PersonBackup1 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PersonBackup1 getPersonBackup1(@RequestParam("pid") Integer pid, @RequestParam("lastName") String lastName, @RequestParam("firstName") String firstName, @RequestParam("address") String address, @RequestParam("city") String city, @RequestParam("column6") byte[] column6, @RequestParam("column7") String column7, @RequestParam("column8") Boolean column8, @RequestParam("column9") String column9) {

        PersonBackup1Id personbackup1Id = new PersonBackup1Id();
        personbackup1Id.setPid(pid);
        personbackup1Id.setLastName(lastName);
        personbackup1Id.setFirstName(firstName);
        personbackup1Id.setAddress(address);
        personbackup1Id.setCity(city);
        personbackup1Id.setColumn6(column6);
        personbackup1Id.setColumn7(column7);
        personbackup1Id.setColumn8(column8);
        personbackup1Id.setColumn9(column9);

        LOGGER.debug("Getting PersonBackup1 with id: {}" , personbackup1Id);
        PersonBackup1 personBackup1 = personBackup1Service.getById(personbackup1Id);
        LOGGER.debug("PersonBackup1 details with id: {}" , personBackup1);

        return personBackup1;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in PersonBackup1 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id/content/{fieldName}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public void getPersonBackup1BLOBContent(@RequestParam("pid") Integer pid, @RequestParam("lastName") String lastName, @RequestParam("firstName") String firstName, @RequestParam("address") String address, @RequestParam("city") String city, @RequestParam("column6") byte[] column6, @RequestParam("column7") String column7, @RequestParam("column8") Boolean column8, @RequestParam("column9") String column9, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) {

        LOGGER.debug("Retrieves content for the given BLOB field {} in PersonBackup1 instance" , fieldName);

        if(!WMRuntimeUtils.isLob(PersonBackup1.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName +  " is not a valid BLOB type");
        }

        PersonBackup1Id personbackup1Id = new PersonBackup1Id();
        personbackup1Id.setPid(pid);
        personbackup1Id.setLastName(lastName);
        personbackup1Id.setFirstName(firstName);
        personbackup1Id.setAddress(address);
        personbackup1Id.setCity(city);
        personbackup1Id.setColumn6(column6);
        personbackup1Id.setColumn7(column7);
        personbackup1Id.setColumn8(column8);
        personbackup1Id.setColumn9(column9);

        PersonBackup1 personBackup1 = personBackup1Service.getById(personbackup1Id);
        WMMultipartUtils.buildHttpResponseForBlob(personBackup1, fieldName, httpServletRequest, httpServletResponse);
    }



    @ApiOperation(value = "Updates the PersonBackup1 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PersonBackup1 editPersonBackup1(@RequestParam("pid") Integer pid, @RequestParam("lastName") String lastName, @RequestParam("firstName") String firstName, @RequestParam("address") String address, @RequestParam("city") String city, @RequestParam("column6") byte[] column6, @RequestParam("column7") String column7, @RequestParam("column8") Boolean column8, @RequestParam("column9") String column9, @RequestBody PersonBackup1 personBackup1) {

        personBackup1.setPid(pid);
        personBackup1.setLastName(lastName);
        personBackup1.setFirstName(firstName);
        personBackup1.setAddress(address);
        personBackup1.setCity(city);
        personBackup1.setColumn6(column6);
        personBackup1.setColumn7(column7);
        personBackup1.setColumn8(column8);
        personBackup1.setColumn9(column9);

        LOGGER.debug("PersonBackup1 details with id is updated with: {}" , personBackup1);

        return personBackup1Service.update(personBackup1);
    }

    @ApiOperation(value = "Updates the PersonBackup1 instance associated with the given composite-id.This API should be used when PersonBackup1 instance fields that require multipart data.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PersonBackup1 editPersonBackup1(@RequestParam("pid") Integer pid, @RequestParam("lastName") String lastName, @RequestParam("firstName") String firstName, @RequestParam("address") String address, @RequestParam("city") String city, @RequestParam("column6") byte[] column6, @RequestParam("column7") String column7, @RequestParam("column8") Boolean column8, @RequestParam("column9") String column9, MultipartHttpServletRequest multipartHttpServletRequest) {
        return this.editPersonBackup1AndMultiparts(pid, lastName, firstName, address, city, column6, column7, column8, column9, multipartHttpServletRequest);
    }

    @ApiOperation(value = "Updates the PersonBackup1 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT,  consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PersonBackup1 editPersonBackup1AndMultiparts(@RequestParam("pid") Integer pid, @RequestParam("lastName") String lastName, @RequestParam("firstName") String firstName, @RequestParam("address") String address, @RequestParam("city") String city, @RequestParam("column6") byte[] column6, @RequestParam("column7") String column7, @RequestParam("column8") Boolean column8, @RequestParam("column9") String column9, MultipartHttpServletRequest multipartHttpServletRequest) { 

        PersonBackup1Id personbackup1Id = new PersonBackup1Id();
        personbackup1Id.setPid(pid);
        personbackup1Id.setLastName(lastName);
        personbackup1Id.setFirstName(firstName);
        personbackup1Id.setAddress(address);
        personbackup1Id.setCity(city);
        personbackup1Id.setColumn6(column6);
        personbackup1Id.setColumn7(column7);
        personbackup1Id.setColumn8(column8);
        personbackup1Id.setColumn9(column9);

        PersonBackup1 newPersonBackup1 = WMMultipartUtils.toObject(multipartHttpServletRequest, PersonBackup1.class, "dbscenarios1");
        PersonBackup1 oldPersonBackup1 = personBackup1Service.getById(personbackup1Id);

        WMMultipartUtils.updateLobsContent(oldPersonBackup1, newPersonBackup1);

        newPersonBackup1.setPid(pid);
        newPersonBackup1.setLastName(lastName);
        newPersonBackup1.setFirstName(firstName);
        newPersonBackup1.setAddress(address);
        newPersonBackup1.setCity(city);
        newPersonBackup1.setColumn6(column6);
        newPersonBackup1.setColumn7(column7);
        newPersonBackup1.setColumn8(column8);
        newPersonBackup1.setColumn9(column9);

        LOGGER.debug("PersonBackup1 details with id is updated with: {}" , newPersonBackup1);

        return personBackup1Service.update(newPersonBackup1);
    }


    @ApiOperation(value = "Deletes the PersonBackup1 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePersonBackup1(@RequestParam("pid") Integer pid, @RequestParam("lastName") String lastName, @RequestParam("firstName") String firstName, @RequestParam("address") String address, @RequestParam("city") String city, @RequestParam("column6") byte[] column6, @RequestParam("column7") String column7, @RequestParam("column8") Boolean column8, @RequestParam("column9") String column9) {

        PersonBackup1Id personbackup1Id = new PersonBackup1Id();
        personbackup1Id.setPid(pid);
        personbackup1Id.setLastName(lastName);
        personbackup1Id.setFirstName(firstName);
        personbackup1Id.setAddress(address);
        personbackup1Id.setCity(city);
        personbackup1Id.setColumn6(column6);
        personbackup1Id.setColumn7(column7);
        personbackup1Id.setColumn8(column8);
        personbackup1Id.setColumn9(column9);

        LOGGER.debug("Deleting PersonBackup1 with id: {}" , personbackup1Id);
        PersonBackup1 personBackup1 = personBackup1Service.delete(personbackup1Id);

        return personBackup1 != null;
    }


    /**
     * @deprecated Use {@link #findPersonBackup1s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of PersonBackup1 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PersonBackup1> searchPersonBackup1sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PersonBackup1s list by query filter:{}", (Object) queryFilters);
        return personBackup1Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PersonBackup1 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PersonBackup1> findPersonBackup1s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PersonBackup1s list by filter:", query);
        return personBackup1Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PersonBackup1 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PersonBackup1> filterPersonBackup1s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PersonBackup1s list by filter", query);
        return personBackup1Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPersonBackup1s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return personBackup1Service.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportPersonBackup1sAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = PersonBackup1.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> personBackup1Service.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of PersonBackup1 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countPersonBackup1s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting PersonBackup1s");
		return personBackup1Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getPersonBackup1AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return personBackup1Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PersonBackup1Service instance
	 */
	protected void setPersonBackup1Service(PersonBackup1Service service) {
		this.personBackup1Service = service;
	}

}