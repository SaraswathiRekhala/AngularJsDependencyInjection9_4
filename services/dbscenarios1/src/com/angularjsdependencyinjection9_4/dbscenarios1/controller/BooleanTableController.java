/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios1.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.angularjsdependencyinjection9_4.dbscenarios1.BooleanTable;
import com.angularjsdependencyinjection9_4.dbscenarios1.service.BooleanTableService;


/**
 * Controller object for domain model class BooleanTable.
 * @see BooleanTable
 */
@RestController("dbscenarios1.BooleanTableController")
@Api(value = "BooleanTableController", description = "Exposes APIs to work with BooleanTable resource.")
@RequestMapping("/dbscenarios1/BooleanTable")
public class BooleanTableController {

    private static final Logger LOGGER = LoggerFactory.getLogger(BooleanTableController.class);

    @Autowired
	@Qualifier("dbscenarios1.BooleanTableService")
	private BooleanTableService booleanTableService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new BooleanTable instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public BooleanTable createBooleanTable(@RequestBody BooleanTable booleanTable) {
		LOGGER.debug("Create BooleanTable with information: {}" , booleanTable);

		booleanTable = booleanTableService.create(booleanTable);
		LOGGER.debug("Created BooleanTable with information: {}" , booleanTable);

	    return booleanTable;
	}

    @ApiOperation(value = "Returns the BooleanTable instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public BooleanTable getBooleanTable(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting BooleanTable with id: {}" , id);

        BooleanTable foundBooleanTable = booleanTableService.getById(id);
        LOGGER.debug("BooleanTable details with id: {}" , foundBooleanTable);

        return foundBooleanTable;
    }

    @ApiOperation(value = "Updates the BooleanTable instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public BooleanTable editBooleanTable(@PathVariable("id") Integer id, @RequestBody BooleanTable booleanTable) {
        LOGGER.debug("Editing BooleanTable with id: {}" , booleanTable.getPkid());

        booleanTable.setPkid(id);
        booleanTable = booleanTableService.update(booleanTable);
        LOGGER.debug("BooleanTable details with id: {}" , booleanTable);

        return booleanTable;
    }

    @ApiOperation(value = "Deletes the BooleanTable instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteBooleanTable(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting BooleanTable with id: {}" , id);

        BooleanTable deletedBooleanTable = booleanTableService.delete(id);

        return deletedBooleanTable != null;
    }

    /**
     * @deprecated Use {@link #findBooleanTables(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of BooleanTable instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<BooleanTable> searchBooleanTablesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering BooleanTables list by query filter:{}", (Object) queryFilters);
        return booleanTableService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of BooleanTable instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<BooleanTable> findBooleanTables(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering BooleanTables list by filter:", query);
        return booleanTableService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of BooleanTable instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<BooleanTable> filterBooleanTables(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering BooleanTables list by filter", query);
        return booleanTableService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportBooleanTables(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return booleanTableService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportBooleanTablesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = BooleanTable.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> booleanTableService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of BooleanTable instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countBooleanTables( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting BooleanTables");
		return booleanTableService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getBooleanTableAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return booleanTableService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service BooleanTableService instance
	 */
	protected void setBooleanTableService(BooleanTableService service) {
		this.booleanTableService = service;
	}

}