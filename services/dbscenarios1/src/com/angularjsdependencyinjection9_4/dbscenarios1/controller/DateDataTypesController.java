/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios1.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.angularjsdependencyinjection9_4.dbscenarios1.DateDataTypes;
import com.angularjsdependencyinjection9_4.dbscenarios1.service.DateDataTypesService;


/**
 * Controller object for domain model class DateDataTypes.
 * @see DateDataTypes
 */
@RestController("dbscenarios1.DateDataTypesController")
@Api(value = "DateDataTypesController", description = "Exposes APIs to work with DateDataTypes resource.")
@RequestMapping("/dbscenarios1/DateDataTypes")
public class DateDataTypesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(DateDataTypesController.class);

    @Autowired
	@Qualifier("dbscenarios1.DateDataTypesService")
	private DateDataTypesService dateDataTypesService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new DateDataTypes instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DateDataTypes createDateDataTypes(@RequestBody DateDataTypes dateDataTypes) {
		LOGGER.debug("Create DateDataTypes with information: {}" , dateDataTypes);

		dateDataTypes = dateDataTypesService.create(dateDataTypes);
		LOGGER.debug("Created DateDataTypes with information: {}" , dateDataTypes);

	    return dateDataTypes;
	}

    @ApiOperation(value = "Returns the DateDataTypes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DateDataTypes getDateDataTypes(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting DateDataTypes with id: {}" , id);

        DateDataTypes foundDateDataTypes = dateDataTypesService.getById(id);
        LOGGER.debug("DateDataTypes details with id: {}" , foundDateDataTypes);

        return foundDateDataTypes;
    }

    @ApiOperation(value = "Updates the DateDataTypes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DateDataTypes editDateDataTypes(@PathVariable("id") Integer id, @RequestBody DateDataTypes dateDataTypes) {
        LOGGER.debug("Editing DateDataTypes with id: {}" , dateDataTypes.getId());

        dateDataTypes.setId(id);
        dateDataTypes = dateDataTypesService.update(dateDataTypes);
        LOGGER.debug("DateDataTypes details with id: {}" , dateDataTypes);

        return dateDataTypes;
    }

    @ApiOperation(value = "Deletes the DateDataTypes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteDateDataTypes(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting DateDataTypes with id: {}" , id);

        DateDataTypes deletedDateDataTypes = dateDataTypesService.delete(id);

        return deletedDateDataTypes != null;
    }

    /**
     * @deprecated Use {@link #findDateDataTypes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of DateDataTypes instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<DateDataTypes> searchDateDataTypesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering DateDataTypes list by query filter:{}", (Object) queryFilters);
        return dateDataTypesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of DateDataTypes instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<DateDataTypes> findDateDataTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering DateDataTypes list by filter:", query);
        return dateDataTypesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of DateDataTypes instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<DateDataTypes> filterDateDataTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering DateDataTypes list by filter", query);
        return dateDataTypesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportDateDataTypes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return dateDataTypesService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportDateDataTypesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = DateDataTypes.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> dateDataTypesService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of DateDataTypes instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countDateDataTypes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting DateDataTypes");
		return dateDataTypesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getDateDataTypesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return dateDataTypesService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service DateDataTypesService instance
	 */
	protected void setDateDataTypesService(DateDataTypesService service) {
		this.dateDataTypesService = service;
	}

}