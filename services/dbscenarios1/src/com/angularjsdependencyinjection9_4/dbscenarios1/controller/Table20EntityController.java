/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios1.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.angularjsdependencyinjection9_4.dbscenarios1.Table20Entity;
import com.angularjsdependencyinjection9_4.dbscenarios1.service.Table20EntityService;


/**
 * Controller object for domain model class Table20Entity.
 * @see Table20Entity
 */
@RestController("dbscenarios1.Table20EntityController")
@Api(value = "Table20EntityController", description = "Exposes APIs to work with Table20Entity resource.")
@RequestMapping("/dbscenarios1/Table20Entity")
public class Table20EntityController {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table20EntityController.class);

    @Autowired
	@Qualifier("dbscenarios1.Table20EntityService")
	private Table20EntityService table20EntityService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Table20Entity instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table20Entity createTable20Entity(@RequestBody Table20Entity table20entity) {
		LOGGER.debug("Create Table20Entity with information: {}" , table20entity);

		table20entity = table20EntityService.create(table20entity);
		LOGGER.debug("Created Table20Entity with information: {}" , table20entity);

	    return table20entity;
	}

    @ApiOperation(value = "Returns the Table20Entity instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table20Entity getTable20Entity(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Table20Entity with id: {}" , id);

        Table20Entity foundTable20Entity = table20EntityService.getById(id);
        LOGGER.debug("Table20Entity details with id: {}" , foundTable20Entity);

        return foundTable20Entity;
    }

    @ApiOperation(value = "Updates the Table20Entity instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table20Entity editTable20Entity(@PathVariable("id") Integer id, @RequestBody Table20Entity table20entity) {
        LOGGER.debug("Editing Table20Entity with id: {}" , table20entity.getPid());

        table20entity.setPid(id);
        table20entity = table20EntityService.update(table20entity);
        LOGGER.debug("Table20Entity details with id: {}" , table20entity);

        return table20entity;
    }

    @ApiOperation(value = "Deletes the Table20Entity instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTable20Entity(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Table20Entity with id: {}" , id);

        Table20Entity deletedTable20Entity = table20EntityService.delete(id);

        return deletedTable20Entity != null;
    }

    @RequestMapping(value = "/lastName/{lastName}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Table20Entity with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table20Entity getByLastName(@PathVariable("lastName") String lastName) {
        LOGGER.debug("Getting Table20Entity with uniques key LastName");
        return table20EntityService.getByLastName(lastName);
    }

    /**
     * @deprecated Use {@link #findTable20Entities(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Table20Entity instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table20Entity> searchTable20EntitiesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Table20Entities list by query filter:{}", (Object) queryFilters);
        return table20EntityService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Table20Entity instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table20Entity> findTable20Entities(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table20Entities list by filter:", query);
        return table20EntityService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Table20Entity instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table20Entity> filterTable20Entities(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table20Entities list by filter", query);
        return table20EntityService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTable20Entities(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return table20EntityService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTable20EntitiesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Table20Entity.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> table20EntityService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Table20Entity instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTable20Entities( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Table20Entities");
		return table20EntityService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTable20EntityAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return table20EntityService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table20EntityService instance
	 */
	protected void setTable20EntityService(Table20EntityService service) {
		this.table20EntityService = service;
	}

}