/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.angularjsdependencyinjection9_4.dbscenarios1.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.angularjsdependencyinjection9_4.dbscenarios1.ProductTest;
import com.angularjsdependencyinjection9_4.dbscenarios1.SubCategory;
import com.angularjsdependencyinjection9_4.dbscenarios1.service.SubCategoryService;


/**
 * Controller object for domain model class SubCategory.
 * @see SubCategory
 */
@RestController("dbscenarios1.SubCategoryController")
@Api(value = "SubCategoryController", description = "Exposes APIs to work with SubCategory resource.")
@RequestMapping("/dbscenarios1/SubCategory")
public class SubCategoryController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SubCategoryController.class);

    @Autowired
	@Qualifier("dbscenarios1.SubCategoryService")
	private SubCategoryService subCategoryService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new SubCategory instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SubCategory createSubCategory(@RequestBody SubCategory subCategory) {
		LOGGER.debug("Create SubCategory with information: {}" , subCategory);

		subCategory = subCategoryService.create(subCategory);
		LOGGER.debug("Created SubCategory with information: {}" , subCategory);

	    return subCategory;
	}

    @ApiOperation(value = "Returns the SubCategory instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SubCategory getSubCategory(@PathVariable("id") String id) {
        LOGGER.debug("Getting SubCategory with id: {}" , id);

        SubCategory foundSubCategory = subCategoryService.getById(id);
        LOGGER.debug("SubCategory details with id: {}" , foundSubCategory);

        return foundSubCategory;
    }

    @ApiOperation(value = "Updates the SubCategory instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SubCategory editSubCategory(@PathVariable("id") String id, @RequestBody SubCategory subCategory) {
        LOGGER.debug("Editing SubCategory with id: {}" , subCategory.getSubcategory());

        subCategory.setSubcategory(id);
        subCategory = subCategoryService.update(subCategory);
        LOGGER.debug("SubCategory details with id: {}" , subCategory);

        return subCategory;
    }

    @ApiOperation(value = "Deletes the SubCategory instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteSubCategory(@PathVariable("id") String id) {
        LOGGER.debug("Deleting SubCategory with id: {}" , id);

        SubCategory deletedSubCategory = subCategoryService.delete(id);

        return deletedSubCategory != null;
    }

    /**
     * @deprecated Use {@link #findSubCategories(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of SubCategory instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubCategory> searchSubCategoriesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering SubCategories list by query filter:{}", (Object) queryFilters);
        return subCategoryService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SubCategory instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubCategory> findSubCategories(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SubCategories list by filter:", query);
        return subCategoryService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SubCategory instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SubCategory> filterSubCategories(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SubCategories list by filter", query);
        return subCategoryService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportSubCategories(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return subCategoryService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportSubCategoriesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = SubCategory.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> subCategoryService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of SubCategory instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countSubCategories( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting SubCategories");
		return subCategoryService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getSubCategoryAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return subCategoryService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/productTests", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the productTests instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ProductTest> findAssociatedProductTests(@PathVariable("id") String id, Pageable pageable) {

        LOGGER.debug("Fetching all associated productTests");
        return subCategoryService.findAssociatedProductTests(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SubCategoryService instance
	 */
	protected void setSubCategoryService(SubCategoryService service) {
		this.subCategoryService = service;
	}

}